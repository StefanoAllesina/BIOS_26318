[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fundamentals of Biological Data Analysis",
    "section": "",
    "text": "Organization of the class"
  },
  {
    "objectID": "index.html#learning-goals",
    "href": "index.html#learning-goals",
    "title": "Fundamentals of Biological Data Analysis",
    "section": "Learning goals",
    "text": "Learning goals\n\nR tools for visualizing and analyzing data\n\nexploration of tidyverse\ndplyr, tidyr and readr for data wrangling and organization\nggplot2 for visualization\nspecific packages and functions for statistical analysis\n\nTheory to perform statistical inference\n\nassumptions of different methods\nhypothesis testing\nestimation of parameters\nmodel building and selection\n\nAvoiding common errors\n\nwhen (not) to use a statistical method\nsneaky paradoxes\nphantom effects\n\nWork on your own data\n\nanalyze data\nproduce graphics\nwrite up a report\npresent to class"
  },
  {
    "objectID": "index.html#approach",
    "href": "index.html#approach",
    "title": "Fundamentals of Biological Data Analysis",
    "section": "Approach",
    "text": "Approach\n\nMix of theory and practice\nApply what you’re learning to your own data"
  },
  {
    "objectID": "index.html#materials",
    "href": "index.html#materials",
    "title": "Fundamentals of Biological Data Analysis",
    "section": "Materials",
    "text": "Materials\n\nWeek 0\n\nR refresher @ref(refresher)\n\n\n\nWeek 1\n\nUsing ggplot2 to produce publication-ready figures\nReview of probability\n\n\n\nWeek 2\n\nData wrangling in tidyverse\nProbability distributions\n\n\n\nWeek 3\n\nHypothesis testing\nLikelihood\n\n\n\nWeek 4\n\nLinear algebra refresher\nLinear models\n\n\n\nWeek 5\n\nAnalysis of variance\nModel selection\n\n\n\nWeek 6\n\nPrincipal Component Analysis\nMultidimensional Scaling and Clustering\n\n\n\nWeek 7\n\nGeneralized Linear Models\nMachine Learning and cross validation\n\n\n\nWeek 8\n\nPhylogenetic reconstruction (?)\nModeling time-series data (?)\n\n\n\nWeek 9\nThanksgiving break\n\n\nWeek 10\n\nStudent presentations 1\nStudent presentations 2"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Fundamentals of Biological Data Analysis",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nZach Miller for TAing the first iteration of the class, and for contributing materials and comments; Julia Smith for TAing the second iteration; Cassie Manrique for TAing the third iteration; Amatullah Mir for this year. Development of the class was partially supported by the Burroughs Wellcome Fund through the program “Quantitative and statistical thinking in the life sciences” (Stefano Allesina, PI)."
  },
  {
    "objectID": "00-refresher.html#goal",
    "href": "00-refresher.html#goal",
    "title": "1  Refresher",
    "section": "1.1 Goal",
    "text": "1.1 Goal\nIntroduce the statistical software R, and show how it can be used to analyze biological data in an automated, replicable way. Showcase the RStudio development environment, illustrate the notion of assignment, present the main data structures available in R. Show how to read and write data, how to execute simple programs, and how to modify the stream of execution of a program through conditional branching and looping. Introduce the use of packages and user-defined functions."
  },
  {
    "objectID": "00-refresher.html#motivation",
    "href": "00-refresher.html#motivation",
    "title": "1  Refresher",
    "section": "1.2 Motivation",
    "text": "1.2 Motivation\nWhen it comes to analyzing data, there are two competing paradigms. First, one could use point-and-click software with a graphical user interface, such as Excel, to perform calculations and draw graphs; second, one could write programs that can be run to perform the analysis of the data, the generation of tables and statistics, and the production of figures automatically.\nThis latter approach is to be preferred, because it allows for the automation of analysis, it requires a good documentation of the procedures, and is completely replicable.\nA few motivating examples:\n\nYou have written code to analyze your data. You receive from your collaborators a new batch of data. With simple modifications of your code, you can update your results, tables and figures automatically.\nA new student joins the laboratory. The new student can read the code and understand the analysis without the need of a lab mate showing the procedure step-by-step.\nThe reviewers of your manuscript ask you to slightly alter the analysis. Rather than having to start over, you can modify a few lines of code and satisfy the reviewers.\n\nHere we introduce R, which can help you write simple programs to analyze your data, perform statistical analysis, and draw beautiful figures."
  },
  {
    "objectID": "00-refresher.html#before-we-start",
    "href": "00-refresher.html#before-we-start",
    "title": "1  Refresher",
    "section": "1.3 Before we start",
    "text": "1.3 Before we start\nTo follow this tutorial, you will need to install R and RStudio\n\nInstall R: download and install R from this page. Choose the right architecture (Windows, Mac, Linux). If possible, install the latest release.\nInstall RStudio: go to this page and download the “RStudio Desktop Open Source License”.\nInstall R packages: launch RStudio. Click on “Packages” in the bottom-right panel. Click on “Install”: a dialog window will open. Type tidyverse in the field “Packages” and click on “Install”. This might take a few minutes, and ask you to download further packages."
  },
  {
    "objectID": "00-refresher.html#what-is-r",
    "href": "00-refresher.html#what-is-r",
    "title": "1  Refresher",
    "section": "1.4 What is R?",
    "text": "1.4 What is R?\nR is a statistical software that is completely programmable. This means that one can write a program (script) containing a series of commands for the analysis of data, and execute them automatically. This approach is especially good as it makes the analysis of data well-documented, and completely replicable.\nR is free software: anyone can download its source code, modify it, and improve it. The R community of users is vast and very active. In particular, scientists have enthusiastically embraced the program, creating thousands of packages to perform specific types of analysis, and adding many new capabilities. You can find a list of official packages (which have been vetted by R core developers) here; many more are available on GitHub and other websites.\nThe main hurdle new users face when approaching R is that it is based on a command line interface: when you launch R, you simply open a console with the character > signaling that R is ready to accept an input. When you write a command and press Enter, the command is interpreted by R, and the result is printed immediately after the command. For example,\n\n1 + 1\n\n[1] 2\n\n\nA little history: R was modeled after the commercial statistical software S by Robert Gentleman and Ross Ihaka. The project was started in 1992, first released in 1994, and the first stable version appeared in 2000. Today, R is managed by the R Core Team."
  },
  {
    "objectID": "00-refresher.html#rstudio",
    "href": "00-refresher.html#rstudio",
    "title": "1  Refresher",
    "section": "1.5 RStudio",
    "text": "1.5 RStudio\nFor this introduction, we’re going to use RStudio, an Integrated Development Environment (IDE) for R. The main advantage is that the environment will look identical irrespective of your computer architecture (Linux, Windows, Mac). Also, RStudio makes writing code much easier by automatically completing commands and file names (simply type the beginning of the name and press Tab), and allowing you to easily inspect data and code.\nTypically, an RStudio window contains four panels:\n\nConsole This is a panel containing an instance of R. For this tutorial, we will work mainly in this panel.\nSource code In this panel, you can write a program, save it to a file pressing Ctrl + S and then execute it by pressing Ctrl + Shift + S.\nEnvironment This panel lists all the variables you created (more on this later); another tab shows you the history of the commands you typed.\nPlots This panel shows you all the plots you drew. Other tabs allow you to access the list of packages you have loaded, and the help page for commands (just type help(name_of_command) in the Console) and packages."
  },
  {
    "objectID": "00-refresher.html#how-to-write-a-simple-program",
    "href": "00-refresher.html#how-to-write-a-simple-program",
    "title": "1  Refresher",
    "section": "1.6 How to write a simple program",
    "text": "1.6 How to write a simple program\nAn R program is simply a list of commands, which are executed one after the other. The commands are written in a text file (with extension .R). When R executes the program, it will start from the beginning of the file and proceed toward the end of the file. Every time R encounters a command, it will execute it. Special commands can modify this basic flow of the program by, for example, executing a series of commands only when a condition is met, or repeating the execution of a series of commands multiple times.\nNote that if you were to copy and paste (or type) the code into the Console you would obtain exactly the same result. Writing a program is advantageous, however, because the analysis can be automated, and the code shared with other researchers. Moreover, after a while you will have a large code base, so that you can recycle much of your code.\nWe start by working on the console, and then start writing simple scripts.\n\n1.6.1 The most basic operation: assignment\nThe most basic operation in any programming language is the assignment. In R, assignment is marked by the operator <- (can be typed quickly using Alt -). When you type a command in R, it is executed, and the output is printed in the Console. For example:\n\nsqrt(9)\n\n[1] 3\n\n\nIf we want to save the result of this operation, we can assign it to a variable. For example:\n\nx <- sqrt(9)\nx\n\n[1] 3\n\n\nWhat has happened? We wrote a command containing an assignment operator (<-). R has evaluated the right-hand-side of the command (sqrt(9)), and has stored the result (3) in a newly created variable called x. Now we can use x in our commands: every time the command needs to be evaluated, the program will look up which value is associated with the variable x, and substitute it. For example:\n\nx * 2 \n\n[1] 6\n\n\n\n\n1.6.2 Data types\nR provides different types of data that can be used in your programs. For each variable x, calling class(x) prints the type of the variable. The basic data types are:\n\nlogical, taking only two possible values: TRUE and FALSE\n\n\nv <- TRUE\nclass(v)\n\n[1] \"logical\"\n\n\n\nnumeric, storing real numbers (actually, their approximations, as computers have limited memory and thus cannot store numbers like π, or even 0.2)\n\n\nv <- 3.77\nclass(v)\n\n[1] \"numeric\"\n\n\n\nReal numbers can also be specified using scientific notation:\n\n\nv <- 6.022e23 # 6.022⋅10^23 (Avogadro's number)\nclass(v)\n\n[1] \"numeric\"\n\n\n\ninteger, storing whole numbers\n\n\nv <- 23L # the L signals that this should be stored as integer\nclass(v)\n\n[1] \"integer\"\n\n\n\ncomplex, storing complex numbers (i.e., with a real and an imaginary part)\n\n\nv <- 23 + 5i # the i marks the imaginary part\nclass(v)\n\n[1] \"complex\"\n\n\n\ncharacter, for strings, characters and text\n\n\nv <- 'a string' # you can use single or double quotes\nclass(v)\n\n[1] \"character\"\n\n\nIn R, the value and type of a variable are evaluated at run-time. This means that you can recycle the names of variables. This is very handy, but can make your programs more difficult to read and to debug (i.e., find mistakes). For example:\n\nx <- '2.3' # this is a string\nx\n\n[1] \"2.3\"\n\nx <- 2.3 # this is numeric\nx\n\n[1] 2.3\n\n\n\n\n1.6.3 Operators and functions\nEach data type supports a certain number of operators and functions. For example, numeric variables can be combined with + (addition), - (subtraction), * (multiplication), / (division), and ^ (or **, exponentiation). A possibly unfamiliar operator is the modulo (%%), calculating the remainder of an integer division:\n\n5 %% 3\n\n[1] 2\n\n\nmeaning that 5 %/% 3 (5 integer divided by 3) is 1 with a remainder of 2\nThe modulo operator is useful to determine whether a number is divisible for another: if y is divisible by x, then y %% x is 0.\nR provides many built-in functions: each functions has a name, followed by round parentheses surrounding the (possibly optional) function arguments. For example, these functions operate on numeric variables:\n\nabs(x) absolute value\nsqrt(x) square root\nround(x, digits = 3) round x to three decimal digits\ncos(x) cosine (also supported are all the usual trigonometric functions)\nlog(x) natural logarithm (use log10 for base 10 logarithms)\nexp(x) calculating \\(e^x\\)\n\nSimilarly, character variables have their own set of functions, such as:\n\ntoupper(x) make uppercase\nnchar(x) count the number of characters in the string\npaste(x, y, sep = \"_\") concatenate strings, joining them using the separator _\nstrsplit(x, \"_\") separate the string using the separator _\n\nCalling a function meant for a certain data type on another will cause errors. If sensible, you can convert a type into another. For example:\n\nv <- \"2.13\"\nclass(v)\n\n[1] \"character\"\n\n# if we call v * 2, we get an error.\n# to avoid it, we can convert v to numeric:\nas.numeric(v) * 2 \n\n[1] 4.26\n\n\nIf sensible, you can use the comparison operators > (greater), < (lower), == (equals), != (differs), >= and <=, returning a logical value:\n\n2 == sqrt(4)\n\n[1] TRUE\n\n2 < sqrt(4)\n\n[1] FALSE\n\n2 <= sqrt(4)\n\n[1] TRUE\n\n\n\nExercise:\nWhy are two equal signs (==) used to check that two values are equal? What happens if you use only one = sign?\n\nSimilarly, you can concatenate several comparison and logical variables using & (and), | (or), and ! (not):\n\n(2 > 3) & (3 > 1)\n\n[1] FALSE\n\n(2 > 3) | (3 > 1)\n\n[1] TRUE\n\n\n\n\n1.6.4 Getting help\nIf you want to know more about a function, type ?my_function_name in the console (e.g., ?abs). This will open the help page in one of the panels on the right. The same can be accomplished calling help(abs). For more complex questions, check out stackoverflow.\n\n\n1.6.5 Data structures\nBesides these simple types, R provides structured data types, meant to collect and organize multiple values.\n\n1.6.5.1 Vectors\nThe most basic data structure in R is the vector, which is an ordered collection of values of the same type. Vectors can be created by concatenating different values with the function c() (“combine”):\n\nx <- c(2, 3, 5, 27, 31, 13, 17, 19) \nx\n\n[1]  2  3  5 27 31 13 17 19\n\n\nYou can access the elements of a vector by their index: the first element is indexed at 1, the second at 2, etc.\n\nx[3]\n\n[1] 5\n\nx[8]\n\n[1] 19\n\nx[9] # what if the element does not exist?\n\n[1] NA\n\n\nNA stands for “Not Available”. Other special values are NaN (Not a Number, e.g., 0/0), Inf (Infinity, e.g., 1/0), and NULL (variable undefined). You can test for special values using is.na(x), is.infinite(x), is.null(x), etc.\nNote that in R a single number (string, logical) is a vector of length 1 by default. That’s why if you type 3 in the console you see [1] 3 in the output.\nYou can extract several elements at once (i.e., create another vector), using the colon (:) command, or by concatenating the indices:\n\nx[1:3]\n\n[1] 2 3 5\n\nx[4:7]\n\n[1] 27 31 13 17\n\nx[c(1,3,5)]\n\n[1]  2  5 31\n\n\nYou can also use a vector of logical variables to extract values from vectors. For example, suppose we have two vectors:\n\nsex <- c(\"M\", \"M\", \"F\", \"M\", \"F\") # sex of Drosophila\nweight <- c(0.230, 0.281, 0.228, 0.260, 0.231) # weight in mg\n\nand that we want to extract only the weights for the males.\n\nsex == \"M\"\n\n[1]  TRUE  TRUE FALSE  TRUE FALSE\n\n\nreturns a vector of logical values, which we can use to subset the data:\n\nweight[sex == \"M\"]\n\n[1] 0.230 0.281 0.260\n\n\nGiven that R was born for statistics, there are many statistical functions you can perform on vectors:\n\nlength(x)\n\n[1] 8\n\nmin(x)\n\n[1] 2\n\nmax(x)\n\n[1] 31\n\nsum(x) # sum all elements\n\n[1] 117\n\nprod(x) # multiply all elements\n\n[1] 105436890\n\nmedian(x) # median value\n\n[1] 15\n\nmean(x) # arithmetic mean\n\n[1] 14.625\n\nvar(x) # unbiased sample variance\n\n[1] 119.4107\n\nmean(x ^ 2) - mean(x) ^ 2 # population variance\n\n[1] 104.4844\n\nsummary(x) # print a summary\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2.00    4.50   15.00   14.62   21.00   31.00 \n\n\nYou can generate vectors of sequential numbers using the colon command:\n\nx <- 1:10\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nFor more complex sequences, use seq:\n\nseq(from = 1, to = 5, by = 0.5)\n\n[1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0\n\n\nTo repeat a value or a sequence several times, use rep:\n\nrep(\"abc\", 3)\n\n[1] \"abc\" \"abc\" \"abc\"\n\nrep(c(1, 2, 3), 3)\n\n[1] 1 2 3 1 2 3 1 2 3\n\n\n\nExercise:\n\nCreate a vector containing all the even numbers between 2 and 100 (inclusive) and store it in variable z.\nExtract all the elements of z that are divisible by 12. How many elements match this criterion?\nWhat is the sum of all the elements of z?\nIs it equal to \\(51 \\cdot 50\\)?\nWhat is the product of elements 5, 10 and 15 of z?\nDoes seq(2, 100, by = 2) produce the same vector as (1:50) * 2?\nWhat happens if you type z ^ 2?\n\n\n\n\n1.6.5.2 Matrices\nA matrix is a two-dimensional table of values. In case of numeric values, you can perform the usual operations on matrices (product, inverse, decomposition, etc.):\n\nA <- matrix(c(1, 2, 3, 4), 2, 2) # values, nrows, ncols\nA \n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\nA %*% A # matrix product\n\n     [,1] [,2]\n[1,]    7   15\n[2,]   10   22\n\nsolve(A) # matrix inverse\n\n     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5\n\nA %*% solve(A) # this should return the identity matrix\n\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1\n\nB <- matrix(1, 3, 2) # you can fill the whole matrix with a single number (1)\nB\n\n     [,1] [,2]\n[1,]    1    1\n[2,]    1    1\n[3,]    1    1\n\nB %*% t(B) # transpose\n\n     [,1] [,2] [,3]\n[1,]    2    2    2\n[2,]    2    2    2\n[3,]    2    2    2\n\nZ <- matrix(1:9, 3, 3) # by default, matrices are filled by column\nZ\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nTo determine the dimensions of a matrix, use dim:\n\ndim(B)\n\n[1] 3 2\n\ndim(B)[1]\n\n[1] 3\n\nnrow(B) \n\n[1] 3\n\ndim(B)[2]\n\n[1] 2\n\nncol(B)\n\n[1] 2\n\nnrow(B)\n\n[1] 3\n\n\nUse indices to access a particular row/column of a matrix:\n\nZ\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nZ[1, ] # first row\n\n[1] 1 4 7\n\nZ[, 2] # second column\n\n[1] 4 5 6\n\nZ [1:2, 2:3] # submatrix with coefficients in first two rows, and second and third column\n\n     [,1] [,2]\n[1,]    4    7\n[2,]    5    8\n\nZ[c(1, 3), c(1, 3)] # indexing non-adjacent rows/columns\n\n     [,1] [,2]\n[1,]    1    7\n[2,]    3    9\n\n\nSome functions use all the elements of the matrix:\n\nsum(Z)\n\n[1] 45\n\nmean(Z)\n\n[1] 5\n\n\nSome functions apply the operation across a given dimension (e.g., columns) of the matrix:\n\nrowSums(Z) # returns a vector of the sums of the values in each row\n\n[1] 12 15 18\n\ncolSums(Z) # does the same for columns\n\n[1]  6 15 24\n\nrowMeans(Z) # returns a vector of the means of the values in each row\n\n[1] 4 5 6\n\ncolMeans(Z) # does the same for columns\n\n[1] 2 5 8\n\n\n\n\n1.6.5.3 Arrays\nIf you need tables with more than two dimensions, use arrays:\n\nM <- array(1:24, c(4, 3, 2))\nM \n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]   13   17   21\n[2,]   14   18   22\n[3,]   15   19   23\n[4,]   16   20   24\n\n\nYou can still determine the dimensions using:\n\ndim(M)\n\n[1] 4 3 2\n\n\nand access the elements as done for matrices. One thing you should be paying attention to: R drops dimensions that are not needed. So, if you access a “slice” of a 3-dimensional array:\n\nM[, , 1]\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n\nyou obtain a matrix:\n\ndim(M[, , 1])\n\n[1] 4 3\n\n\nThis can be problematic, for example, when your code expects an array and R turns your data into a matrix (or you expect a matrix but find a vector). To avoid this behavior, add drop = FALSE when subsetting:\n\ndim(M[, , 1, drop = FALSE])\n\n[1] 4 3 1\n\n\n\n\n1.6.5.4 Lists\nVectors are good if each element is of the same type (e.g., numbers, strings). Lists are used when we want to store elements of different types, or more complex objects (e.g., vectors, matrices, even lists of lists). Each element of the list can be referenced either by its index, or by a label:\n\nmylist <- list(Names = c(\"a\", \"b\", \"c\", \"d\"), Values = c(1, 2, 3))\nmylist\n\n$Names\n[1] \"a\" \"b\" \"c\" \"d\"\n\n$Values\n[1] 1 2 3\n\nmylist[[1]] # access first element using index\n\n[1] \"a\" \"b\" \"c\" \"d\"\n\nmylist[[2]] # access second element by index\n\n[1] 1 2 3\n\nmylist$Names # access second element by label\n\n[1] \"a\" \"b\" \"c\" \"d\"\n\nmylist[[\"Names\"]] # another way to access by label\n\n[1] \"a\" \"b\" \"c\" \"d\"\n\nmylist[[\"Values\"]][3]  # access third element in second vector\n\n[1] 3\n\n\n\n\n1.6.5.5 Data frames\nData frames contain data organized like in a spreadsheet. The columns (typically representing different measurements) can be of different types (e.g., a column could be the date of measurement, another the weight of the individual, or the volume of the cell, or the treatment of the sample), while the rows typically represent different samples.\nWhen you read a spreadsheet file in R, it is automatically stored as a data frame. The difference between a matrix and a data frame is that in a matrix all the values are of the same type (e.g., all numeric), while in a data frame each column can be of a different type.\nBecause typing a data frame by hand would be tedious, let’s use a data set that is already available in R:\n\ndata(trees) # girth, height and volume of cherry trees\nstr(trees) # structure of data frame\n\n'data.frame':   31 obs. of  3 variables:\n $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...\n $ Height: num  70 65 63 72 81 83 66 75 80 75 ...\n $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...\n\nncol(trees)\n\n[1] 3\n\nnrow(trees)\n\n[1] 31\n\nhead(trees) # print the first few rows\n\n  Girth Height Volume\n1   8.3     70   10.3\n2   8.6     65   10.3\n3   8.8     63   10.2\n4  10.5     72   16.4\n5  10.7     81   18.8\n6  10.8     83   19.7\n\nsummary(trees) # Quickly get an overview of the data frame.\n\n     Girth           Height       Volume     \n Min.   : 8.30   Min.   :63   Min.   :10.20  \n 1st Qu.:11.05   1st Qu.:72   1st Qu.:19.40  \n Median :12.90   Median :76   Median :24.20  \n Mean   :13.25   Mean   :76   Mean   :30.17  \n 3rd Qu.:15.25   3rd Qu.:80   3rd Qu.:37.30  \n Max.   :20.60   Max.   :87   Max.   :77.00  \n\ntrees$Girth # select column by name\n\n [1]  8.3  8.6  8.8 10.5 10.7 10.8 11.0 11.0 11.1 11.2 11.3 11.4 11.4 11.7 12.0\n[16] 12.9 12.9 13.3 13.7 13.8 14.0 14.2 14.5 16.0 16.3 17.3 17.5 17.9 18.0 18.0\n[31] 20.6\n\ntrees$Height[1:5] # select column by name; return first five elements\n\n[1] 70 65 63 72 81\n\ntrees[1:3, ] #select rows 1 through 3\n\n  Girth Height Volume\n1   8.3     70   10.3\n2   8.6     65   10.3\n3   8.8     63   10.2\n\ntrees[1:3, ]$Volume # select rows 1 through 3; return column Volume\n\n[1] 10.3 10.3 10.2\n\ntrees <- rbind(trees, c(13.25, 76, 30.17)) # add a row\ntrees_double <- cbind(trees, trees) # combine columns\ncolnames(trees) <- c(\"Circumference\", \"Height\", \"Volume\") # change column names\n\n\nExercise:\n\nWhat is the average height of the cherry trees?\nWhat is the average girth of those that are more than 75 ft tall?\nWhat is the maximum height of trees with a volume between 15 and 35 ft\\(^3\\)?"
  },
  {
    "objectID": "00-refresher.html#reading-and-writing-data",
    "href": "00-refresher.html#reading-and-writing-data",
    "title": "1  Refresher",
    "section": "1.7 Reading and writing data",
    "text": "1.7 Reading and writing data\nIn most cases, you will not generate your data in R, but import it from a file. By far, the best option is to have your data in a comma separated value text file or in a tab separated file. Then, you can use the function read.csv (or read.table) to import your data. The syntax of the functions is as follows:\n\nread.csv(\"MyFile.csv\") # read the file MyFile.csv\nread.csv(\"MyFile.csv\", header = TRUE) # the file has a header\nread.csv(\"MyFile.csv\", sep = ';') # specify the column separator\nread.csv(\"MyFile.csv\", skip = 5) # skip the first 5 lines\n\nNote that columns containing strings are typically converted to factors (categorical values, useful when performing regressions). To avoid this behavior, you can specify stringsAsFactors = FALSE when calling the function.\nSimilarly, you can save your data frames using write.table or write.csv. Suppose you want to save the data frame MyDF:\n\nwrite.csv(MyDF, \"MyFile.csv\") \nwrite.csv(MyDF, \"MyFile.csv\", append = TRUE) # append to the end of the file \nwrite.csv(MyDF, \"MyFile.csv\", row.names = TRUE) # include the row names\nwrite.csv(MyDF, \"MyFile.csv\", col.names = FALSE) # do not include column names\n\nLet’s look at an example: Read a file containing data on the 6th chromosome for a number of Europeans (Data adapted from Stanford HGDP SNP Genotyping Data by John Novembre). This example shows that you can read data directly from the internet!\n\n# The actual URL is\n# https://github.com/StefanoAllesina/BSD-QBio4/raw/master/tutorials/basic_computing_1/data/H938_Euro_chr6.geno\nch6 <- read.table(\"https://tinyurl.com/y7vctq3v\", \n                  header = TRUE, stringsAsFactors = FALSE)\n\nwhere header = TRUE means that we want to take the first line to be a header containing the column names. How big is this table?\n\ndim(ch6)\n\n[1] 43141     7\n\n\nwe have 7 columns, but more than 40k rows! Let’s see the first few:\n\nhead(ch6)\n\n  CHR        SNP A1 A2 nA1A1 nA1A2 nA2A2\n1   6  rs4959515  A  G     0    17   107\n2   6   rs719065  A  G     0    26    98\n3   6  rs6596790  C  T     0     4   119\n4   6  rs6596796  A  G     0    22   102\n5   6  rs1535053  G  A     5    39    80\n6   6 rs12660307  C  T     0     3   121\n\n\nand the last few:\n\ntail(ch6)\n\n      CHR        SNP A1 A2 nA1A1 nA1A2 nA2A2\n43136   6 rs10946282  C  T     0    16   108\n43137   6  rs3734763  C  T    19    56    48\n43138   6   rs960744  T  C    32    60    32\n43139   6  rs4428484  A  G     1    11   112\n43140   6  rs7775031  T  C    26    56    42\n43141   6 rs12213906  C  T     1    11   112\n\n\nThe data contains the number of homozygotes (nA1A1, nA2A2) and heterozygotes (nA1A2), for 43,141 single nucleotide polymorphisms (SNPs) obtained by sequencing European individuals:\n\nCHR The chromosome (6 in this case)\nSNP The identifier of the Single Nucleotide Polymorphism\nA1 One of the alleles\nA2 The other allele\nnA1A1 The number of individuals with the particular combination of alleles.\n\n\nExercise:\n\nHow many individuals were sampled? Find the maximum of the sum nA1A1 + nA1A2 + nA2A2. Note: you can access the columns by index (e.g., ch6[,5]), or by name (e.g., ch6$nA1A1, or also ch6[,\"nA1A1\"]).\nTry using the function rowSums to obtain the same result.\nFor how many SNPs do we have that all sampled individuals are homozygotes (i.e., all A1A1 or all A2A2)?\nFor how many SNPs, are more than 99% of the sampled individuals homozygous?"
  },
  {
    "objectID": "00-refresher.html#conditional-branching",
    "href": "00-refresher.html#conditional-branching",
    "title": "1  Refresher",
    "section": "1.8 Conditional branching",
    "text": "1.8 Conditional branching\nNow we turn to writing actual programs in the Source code panel. To start a new R program, press Ctrl + Shift + N. This will open an Untitled script. Save the script by pressing Ctrl + S: save it as conditional.R in the directory programming_skills/sandbox/. To make sure you’re working in the directory where the script is contained, on the menu on the top choose Session -> Set Working Directory -> To Source File Location.\nNow type the following script:\n\nprint(\"Hello world!\")\nx <- 4\nprint(x)\n\nand execute the script by pressing Ctrl + Shift + S. You should see Hello World! and 4 printed in your console.\nAs you saw in this simple example, when R executes the program, it starts from the top and proceeds toward the end of the file. Every time it encounters a command (for example, print(x), printing the value of x into the console), it executes it.\nWhen we want a certain block of code to be executed only when a certain condition is met, we can write a conditional branching point. The syntax is as follows:\n\nif (condition is met){\n  # execute this block of code\n} else {\n  # execute this other block of code\n}\n\nFor example, add these lines to the script conditional.R, and run it again:\n\nprint(\"Hello world!\")\nx <- 4\nprint(x)\nif (x %% 2 == 0){\n  my_message <- paste(x, \"is even\")\n} else {\n  my_message <- paste(x, \"is odd\")\n}\nprint(my_message)\n\nWe have created a conditional branching point, so that the value of my_message changes depending on whether x is even (and thus the remainder of the integer division by 2 is 0), or odd. Change the line x <- 4 to x <- 131 and run it again.\n\nExercise: What does this do?\n\nx <- 36\nif (x > 20){\n  x <- sqrt(x)\n} else {\n  x <- x ^ 2\n}\nif (x > 7) {\n  print(x)\n} else if (x %% 2 == 1){\n  print(x + 1)\n}"
  },
  {
    "objectID": "00-refresher.html#looping",
    "href": "00-refresher.html#looping",
    "title": "1  Refresher",
    "section": "1.9 Looping",
    "text": "1.9 Looping\nAnother way to change the flow of the program is to write a loop. A loop is simply a series of commands that are repeated a number of times. For example, you want to run the same analysis on different data sets that you collected; you want to plot the results contained in a set of files; you want to test your simulation over a number of parameter sets; etc.\nR provides you with two ways to loop over blocks of commands: the for loop, and the while loop. Let’s start with the for loop, which is used to iterate over a vector (or a list): for each value of the vector, a series of commands will be run, as shown by the following example, which you can type in a new script called forloop.R.\n\nmyvec <- 1:10 # vector with numbers from 1 to 10\n\nfor (i in myvec) {\n  a <- i ^ 2\n  print(a)\n}\n\nIn the code above, the variable i takes the value of each element of myvec in sequence. Inside the block defined by the for loop, you can use the variable i to perform operations.\nThe anatomy of the for statement:\n\nfor (variable in list_or_vector) {\n  execute these commands\n} # automatically moves to the next value\n\nFor loops are used when you know that you want to perform the analysis using a given set of values (e.g., run over all files of a directory, all samples in your data, all sequences of a fasta file, etc.).\nThe while loop is used when the commands need to be repeated while a certain condition is true, as shown by the following example, which you can type in a script called whileloop.R:\n\ni <- 1\n\nwhile (i <= 10) {\n  a <- i ^ 2\n  print(a)\n  i <- i + 1 \n}\n\nThe script performs exactly the same operations we wrote for the for loop above. Note that you need to update the value of i, (using i <- i + 1), otherwise the loop will run forever (infinite loop—to terminate click on the stop button in the top-right corner of the console). The anatomy of the while statement:\n\nwhile (condition is met) {\n  execute these commands\n} # beware of infinite loops: remember to update the condition!\n\nYou can break a loop using the command break. For example:\n\ni <- 1\n\nwhile (i <= 10) {\n  if (i > 5) {\n    break\n  }\n  a <- i ^ 2\n  print(a)\n  i <- i + 1\n}\n\n\nExercise: What does this do? Try to guess what each loop does, and then create and run a script to confirm your intuition.\n\nz <- seq(1, 1000, by = 3)\nfor (k in z) {\n  if (k %% 4 == 0) {\n     print(k)\n  }\n}\n\n\nz <- readline(prompt = \"Enter a number: \")\nz <- as.numeric(z)\nisthisspecial <- TRUE\ni <- 2\nwhile (i < z) {\n  if (z %% i == 0) {\n     isthisspecial <- FALSE\n     break\n  }\n  i <- i + 1\n}\nif (isthisspecial == TRUE) {\n  print(z)\n}"
  },
  {
    "objectID": "00-refresher.html#useful-functions",
    "href": "00-refresher.html#useful-functions",
    "title": "1  Refresher",
    "section": "1.10 Useful Functions",
    "text": "1.10 Useful Functions\nHere’s a short list of useful functions that will help you write your programs:\n\nrange(x): minimum and maximum of a vector x\nsort(x): sort a vector x\nunique(x): remove duplicate entries from vector x\nwhich(x == a): returns a vector of the indices of x having value a\nlist.files(\"path_to_directory\"): list the files in a directory (current directory if not specified)\ntable(x) build a table of frequencies\n\n\nExercises: What does this code do? For each snippet of code, first try to guess what will happen. Then, write a script and run it to confirm your intuition.\n\nv <- c(1, 3, 5, 5, 3, 1, 2, 4, 6, 4, 2)\nv <- sort(unique(v))\nfor (i in v){\n  if (i > 2){\n    print(i)\n  }\n  if (i > 4){\n    break\n  }\n}\n\n\nx <- 1:100\nx <- x[which(x %% 7 == 0)]\n\n\nmy_amount <- 10\nwhile (my_amount > 0){\n  my_color <- NA\n  while(is.na(my_color)){\n    tmp <- readline(prompt=\"Do you want to bet on black or red? \")\n    tmp <- tolower(tmp)\n    if (tmp == \"black\") my_color <- \"black\"\n    if (tmp == \"red\") my_color <- \"red\"\n    if (is.na(my_color)) print(\"Please enter either red or black\")\n  }\n  my_bet <- NA\n  while(is.na(my_bet)){\n    tmp <- readline(prompt=\"How much do you want to bet? \")\n    tmp <- as.numeric(tmp)\n    if (is.numeric(tmp) == FALSE){\n      print(\"Please enter a number\")\n    } else {\n      if (tmp > my_amount){\n        print(\"You don't have enough money!\")\n      } else {\n        my_bet <- tmp\n        my_amount <- my_amount - tmp\n      }\n    }\n  }\n  lady_luck <- sample(c(\"red\", \"black\"), 1)\n  if (lady_luck == my_color){\n    my_amount <- my_amount + 2 * my_bet\n    print(paste(\"You won!! Now you have\", my_amount, \"gold doubloons\"))\n  } else {\n    print(paste(\"You lost!! Now you have\", my_amount, \"gold doubloons\"))\n  }\n}"
  },
  {
    "objectID": "00-refresher.html#packages",
    "href": "00-refresher.html#packages",
    "title": "1  Refresher",
    "section": "1.11 Packages",
    "text": "1.11 Packages\nR is the most popular statistical computing software among biologists due to its highly specialized packages, often written by biologists for biologists. You can contribute a package too! The RStudio support (goo.gl/harVqF) provides guidance on how to start developing R packages and Hadley Wickham’s free online book (r-pkgs.had.co.nz) will make you a pro.\nYou can find highly specialized packages to address your research questions. Here are some suggestions for finding an appropriate package. The Comprehensive R Archive Network (CRAN) offers several ways to find specific packages for your task. You can either browse packages (goo.gl/7oVyKC) and their short description or select a scientific field of interest (goo.gl/0WdIcu) to browse through a compilation of packages related to each discipline.\nFrom within your R terminal or RStudio you can also call the function RSiteSearch(\"KEYWORD\"), which submits a search query to the website search.r-project.org. The website rseek.org casts an even wider net, as it not only includes package names and their documentation but also blogs and mailing lists related to R. If your research interests relate to high-throughput genomic data, you should have a look the packages provided by Bioconductor (goo.gl/7dwQlq).\n\n1.11.1 Installing a package\nTo install a package type\n\ninstall.packages(\"name_of_package\")\n\nin the Console, or choose the panel Packages and then click on Install in RStudio.\n\n\n1.11.2 Loading a package\nTo load a package type\n\nlibrary(name_of_package)\n\nor call the command into your script. If you want your script to automatically install a package in case it’s missing, use this boilerplate:\n\nif (!require(needed_package, character.only = TRUE, quietly = TRUE)) {\n    install.packages(needed_package)\n    library(needed_package, character.only = TRUE)\n}\n\n\n\n1.11.3 Example\nFor example, say we want to access the dataset bacteria, which reports the incidence of H. influenzae in Australian children. The dataset is contained in the package MASS.\nFirst, we need to load the package:\n\nlibrary(MASS)\n\nNow we can load the data:\n\ndata(bacteria)\nbacteria[1:3,]\n\n  y ap hilo week  ID     trt\n1 y  p   hi    0 X01 placebo\n2 y  p   hi    2 X01 placebo\n3 y  p   hi    4 X01 placebo"
  },
  {
    "objectID": "00-refresher.html#random-numbers",
    "href": "00-refresher.html#random-numbers",
    "title": "1  Refresher",
    "section": "1.12 Random numbers",
    "text": "1.12 Random numbers\nTo perform randomization, or any simulation, we typically need to draw random numbers. R has functions to sample random numbers from very many different statistical distributions. For example:\n\nrunif(5) # sample 5 numbers from the uniform distribution between 0 and 1\n\n[1] 0.1045393 0.1002351 0.1986356 0.3930936 0.6115644\n\nrunif(5, min = 1, max = 9) # set the limits of the uniform distribution\n\n[1] 2.716179 7.216968 2.409861 3.377299 7.477481\n\nrnorm(3) # three values from standard normal\n\n[1]  0.05725381 -0.57283250 -0.06721126\n\nrnorm(3, mean = 5, sd = 4) # specify mean and standard deviation\n\n[1] 6.7494651 6.5208202 0.7241634\n\n\nTo sample from a set of values, use sample:\n\nv <- c(\"a\", \"b\", \"c\", \"d\")\nsample(v, 2) # without replacement\n\n[1] \"c\" \"a\"\n\nsample(v, 6, replace = TRUE) # with replacement\n\n[1] \"c\" \"d\" \"c\" \"c\" \"b\" \"b\"\n\nsample(v) # simply shuffle the elements\n\n[1] \"a\" \"d\" \"b\" \"c\""
  },
  {
    "objectID": "00-refresher.html#writing-functions",
    "href": "00-refresher.html#writing-functions",
    "title": "1  Refresher",
    "section": "1.13 Writing functions",
    "text": "1.13 Writing functions\nThe R community provides about 7,000 packages. Still, sometimes there isn’t an already made function capable of doing what you need. In these cases, you can write your own functions. In fact, it is generally a good idea to always divide your analysis into functions, and then write a small “master” program that calls the functions and performs the analysis. In this way, the code will be much more legible, and you will be able to recycle the functions for your other projects.\nA function in R has this form:\n\nmy_function_name <- function(optional, arguments, separated, by_commas){\n  # Body of the function\n  # ...\n  # \n  return(return_value) # this is optional\n}\n\nA few examples:\n\nsum_two_numbers <- function(a, b){\n  apb <- a + b  \n  return(apb)\n}\nsum_two_numbers(5, 7.2)\n\n[1] 12.2\n\n\nYou can set a default value for some of the arguments: if not specified by the user, the function will use these defaults:\n\nsum_two_numbers <- function(a = 1, b = 2){\n  apb <- a + b  \n  return(apb)\n}\nsum_two_numbers()\n\n[1] 3\n\nsum_two_numbers(3)\n\n[1] 5\n\nsum_two_numbers(b = 9)\n\n[1] 10\n\n\nThe return value is optional:\n\nmy_factorial <- function(a = 6){\n  if (as.integer(a) != a) {\n    print(\"Please enter an integer!\")\n  } else {\n    tmp <- 1\n    for (i in 2:a){\n      tmp <- tmp * i\n    }\n    print(paste(a, \"! = \", tmp, sep = \"\"))\n  }\n}\nmy_factorial()\n\n[1] \"6! = 720\"\n\nmy_factorial(10)\n\n[1] \"10! = 3628800\"\n\n\nYou can return only one object. If you need to return multiple values, organize them into a vector/matrix/list and return that.\n\norder_two_numbers <- function(a, b){\n  if (a > b) return(c(a, b)) #nothing after the first return is executed\n  return(c(b,a))\n}\n\norder_two_numbers(runif(1), runif(1))\n\n[1] 0.9370971 0.7664916"
  },
  {
    "objectID": "00-refresher.html#organizing-and-running-code",
    "href": "00-refresher.html#organizing-and-running-code",
    "title": "1  Refresher",
    "section": "1.14 Organizing and running code",
    "text": "1.14 Organizing and running code\nDuring the class, we will write a lot of code, of increasing complexity. Here is what you should do to ensure that your programs are well-organized, easy to understand, and easy to debug.\n\nTake the problem, and divide it into its basic building blocks. Each block should be its own function.\nWrite the code for each building block separately, and test it thoroughly.\nExtensively document the code, so that you can understand what you did, how you did it, and why.\nCombine the building blocks into a master program.\n\nFor example, let’s write code that takes the data on Chromosome 6 we have seen above, and tries to identify which SNPs deviate the most from Hardy-Weinberg equilibrium. Remember that in an infinite population, where mating is random, there is no selection and no mutations, the proportion of people carrying the alleles \\(A1A1\\) should be approximately \\(p_{11} = p^2\\) (where \\(p\\) is the frequency of the first allele in the population \\(p = p_{11} + \\frac{1}{2} p_{12}\\)), those carrying \\(A1A2\\) should be \\(p_{12} = 2 p q\\) (where \\(q = 1-p\\)) and finally those carrying \\(A2A2\\) should be \\(p_{22} = q^2\\). This is called the Hardy-Weinberg equilibrium.\nWe want to test this on a number of different SNPs. First, we write a function that takes as input the data and a given SNP, and computes the probability \\(p\\) of carrying the first allele.\n\ncompute_probabilities_HW <- function(my_data, my_SNP = \"rs1535053\"){\n  # Take a SNP and compute the probabilities\n  # p = frequency of first allele\n  # q = frequency of second allele (1 - p)\n  # p11 = proportion homozygous first allele\n  # p12 = proportion heterozygous\n  # p22 = proportion homozygous second allele\n  my_SNP_data <- my_data[my_data$\"SNP\" == my_SNP,]\n  AA <- my_SNP_data$nA1A1\n  AB <- my_SNP_data$nA1A2\n  BB <- my_SNP_data$nA2A2\n  tot_observations <- AA + AB + BB\n  p11 <- AA / tot_observations\n  p12 <- AB / tot_observations\n  p22 <- BB / tot_observations\n  p <- p11 + p12 / 2\n  q <- 1 - p\n  return(list(SNP = my_SNP,\n              p11 = p11,\n              p12 = p12,\n              p22 = p22,\n              p = p,\n              q = q,\n              tot = tot_observations,\n              AA = AA,\n              AB = AB,\n              BB = BB))\n}\n\nNow we can test our function:\n\ncompute_probabilities_HW(ch6)\n\n$SNP\n[1] \"rs1535053\"\n\n$p11\n[1] 0.04032258\n\n$p12\n[1] 0.3145161\n\n$p22\n[1] 0.6451613\n\n$p\n[1] 0.1975806\n\n$q\n[1] 0.8024194\n\n$tot\n[1] 124\n\n$AA\n[1] 5\n\n$AB\n[1] 39\n\n$BB\n[1] 80\n\n\nIf the allele conformed to Hardy-Weinberg, we should find approximately \\(p^2 \\cdot n\\) people with \\(A1A1\\), where \\(n\\) is the number of people sampled. Let’s see whether these assumptions are met by the data:\n\nobserved_vs_expected_HW <- function(SNP_data){\n  # compute expectations under Hardy-Weinberg equilibrium\n  # organize expected and observed in a table\n  observed <- c(\"AA\" = SNP_data$AA, \"AB\" = SNP_data$AB, \"BB\" = SNP_data$BB)\n  expected <- c(\"AA\" = SNP_data$p^2 * SNP_data$tot, \n                \"AB\" = 2 * SNP_data$p * SNP_data$q * SNP_data$tot, \n                \"BB\" = SNP_data$q^2 * SNP_data$tot)\n  return(rbind(observed, expected))\n}\n\nAnd test it:\n\nmy_SNP_data <- compute_probabilities_HW(ch6)\nobserved_vs_expected_HW(my_SNP_data)\n\n               AA       AB       BB\nobserved 5.000000 39.00000 80.00000\nexpected 4.840726 39.31855 79.84073\n\n\nPretty good! This SNP seems very close to the theoretical expectation.\nLet’s try another one\n\nobserved_vs_expected_HW(compute_probabilities_HW(ch6, \"rs1316662\"))\n\n               AA       AB       BB\nobserved 26.00000 62.00000 36.00000\nexpected 26.20161 61.59677 36.20161\n\n\nBecause we have so many SNPs, we will surely find some that do not comply with the expectation. For example:\n\nmy_SNP_data <- compute_probabilities_HW(ch6, \"rs6596835\")\nobserved_vs_expected_HW(my_SNP_data)\n\n                AA      AB      BB\nobserved 17.000000 24.0000 82.0000\nexpected  6.837398 44.3252 71.8374\n\n\nTo find those with the largest deviations, we can compute for the statistic:\n\\[\n\\sum_i \\frac{(e_i - o_i)^2}{e_i}\n\\] In genetics, this is called \\(\\chi^2\\) statistics, because if the data were to follow the assumptions, these quantities would follow the \\(\\chi^2\\) distribution.\n\ncompute_chi_sq_stat <- function(my_obs_vs_expected){\n  observed <- my_obs_vs_expected[\"observed\",]\n  expected <- my_obs_vs_expected[\"expected\",]\n  return(sum((expected - observed)^2 / expected))\n}\n\nNow let’s compute the statistic for each SNPs:\n\n# because this might take a while, we're going to only analyze the first 1000 SNPs\nall_SNPs <- ch6$SNP[1:1000]\nresults <- data.frame(SNP = all_SNPs, ChiSq = 0)\nfor (i in 1:nrow(results)){\n  results[i, 2] <- compute_chi_sq_stat(observed_vs_expected_HW(compute_probabilities_HW(ch6, results[i, 1])))\n}\n\nTo find the ones with the largest discrepancy, run\n\nresults <- results[order(results$ChiSq, decreasing = TRUE),]\nhead(results)\n\n          SNP     ChiSq\n10  rs2281351 53.993853\n221 rs1933650 27.724832\n36  rs6596835 25.862675\n681  rs689035  9.802277\n178 rs6930805  9.491511\n179 rs1737539  9.491511\n\n\nThis example showed how a seemingly difficult problem can be decomposed in smaller problems that are easier to solve."
  },
  {
    "objectID": "00-refresher.html#documenting-the-code-using-knitr",
    "href": "00-refresher.html#documenting-the-code-using-knitr",
    "title": "1  Refresher",
    "section": "1.15 Documenting the code using knitr",
    "text": "1.15 Documenting the code using knitr\n\nLet us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to humans what we want the computer to do.\n\n\nDonald E. Knuth, Literate Programming, 1984\n\nWhen doing experiments, we typically keep track of everything we do in a laboratory notebook, so that when writing the manuscript, or responding to queries, we can go back to our documentation to find exactly what we did, how we did it, and possibly why we did it. The same should be true for computational work.\nRStudio makes it very easy to build a computational laboratory notebook. First, create a new R Markdown file (choose File -> New File -> R Markdown from the menu).\nThe gist of it is that you write a text file (.Rmd). The file is then read by an interpreter that transforms it into an .html or .pdf file, or even into a Word document. You can use special syntax to render the text in different ways. For example, type\n***********\n\n*Test* **Test2**\n\n# Very large header\n\n## Large header\n\n### Smaller header\n\n## Unordered lists\n\n* First\n* Second\n    + Second 1\n    + Second 2\n\n1. This is\n2. A numbered list\n\nYou can insert `inline code`\n\n-----------\nThe most important feature of R Markdown, however, is that you can include blocks of code, and they will be interpreted and executed by R. You can therefore combine effectively the code itself with the description of what you are doing.\nFor example, including\n{{r, eval=FALSE}}   print(\"hello world!\")\nwill become\n\nprint(\"hello world!\")  \n\n[1] \"hello world!\"\n\n\nIf you don’t want to run the R code, but just display it, use {r, eval = FALSE}; if you want to show the output but not the code, use {r, echo = FALSE}.\nYou can include plots, tables, and even render equations using LaTeX. In summary, when exploring your data or writing the methods of your paper, give R Markdown a try!\nYou can find inspiration in the notes for this class: all are written in R Markdown."
  },
  {
    "objectID": "00-refresher.html#resources",
    "href": "00-refresher.html#resources",
    "title": "1  Refresher",
    "section": "1.16 Resources",
    "text": "1.16 Resources\nThere are very many excellent books and tutorials you can read to become a proficient programmer in R. For example:\n\nIntro to R\nAdvanced R\nDataCamp\nComputerWorld\nR Style guide\nR for Data Science\nRStudio Cheat Sheet\nBase R Cheat Sheet\nAdvanced R Cheat Sheet\nX in Y minutes\nIntro to Data Wrangling\nR Boot Camp"
  },
  {
    "objectID": "01-dataviz.html#goal",
    "href": "01-dataviz.html#goal",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.1 Goal",
    "text": "2.1 Goal\nIntroduce the package ggplot2, which is part of the tidyverse bundle. Learn how to use ggplot2 to produce publication-quality figures. Discuss the philosophical underpinnings of the “Grammar of Graphics”, showcase the ggplot2 syntax, produce examples of the different types of graphs. Learn how to change colors, legends, scales. Visualize histograms, barplots, scatterplots, etc."
  },
  {
    "objectID": "01-dataviz.html#introduction-to-the-grammar-of-graphics",
    "href": "01-dataviz.html#introduction-to-the-grammar-of-graphics",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.2 Introduction to the Grammar of Graphics",
    "text": "2.2 Introduction to the Grammar of Graphics\nThe most salient feature of scientific graphs should be clarity. Each figure should make crystal-clear a) what is being plotted; b) what are the axes; c) what do colors, shapes, and sizes represent; d) the message the figure wants to convey. Each figure is accompanied by a (sometimes long) caption, where the details can be explained further, but the main message should be clear from glancing at the figure (often, figures are the first thing editors and referees look at).\nMany scientific publications contain very poor graphics: labels are missing, scales are unintelligible, there is no explanation of some graphical elements. Moreover, some color graphs are impossible to understand if printed in black and white, or difficult to discern for color-blind people.\nGiven the effort that you put into your science, you want to ensure that it is well presented and accessible. The investment to master some plotting software will be rewarded by pleasing graphics that convey a clear message.\nIn this section, we introduce ggplot2, a plotting package for R This package was developed by Hadley Wickham who contributed many important packages to R (all included in the tidyverse bundle we’re going to use for the reminder of the class). Unlike many other plotting systems, ggplot2 is deeply rooted in a “philosophical” vision. The goal is to conceive a grammar for all graphical representation of data. Leland Wilkinson and collaborators proposed The Grammar of Graphics. It follows the idea of a well-formed sentence that is composed of a subject, a predicate, and an object. The Grammar of Graphics likewise aims at describing a well-formed graph by a grammar that captures a very wide range of statistical and scientific graphics. This might be more clear with an example – Take a simple two-dimensional scatterplot. How can we describe it? We have:\n\nData The data we want to plot.\nMapping What part of the data is associated with a particular visual feature? For example: Which column is associated with the x-axis? Which with the y-axis? Which column corresponds to the shape or the color of the points? In ggplot2 lingo, these are called aesthetic mappings (aes).\nGeometry Do we want to draw points? Lines? In ggplot2 we speak of geometries (geom).\nScale Do we want the sizes and shapes of the points to scale according to some value? Linearly? Logarithmically? Which palette of colors do we want to use?\nCoordinate We need to choose a coordinate system (e.g., Cartesian, polar).\nFaceting Do we want to produce different panels, partitioning the data according to one (or more) of the variables?\n\nThis basic grammar can be extended by adding statistical transformations of the data (e.g., regression, smoothing), multiple layers, adjustment of position (e.g., stack bars instead of plotting them side-by-side), annotations, and so on.\nExactly like in the grammar of a natural language, we can easily change the meaning of a “sentence” by adding or removing parts. Also, it is very easy to completely change the type of geometry if we are moving from say a histogram to a boxplot or a violin plot, as these types of plots are meant to describe one-dimensional distributions. Similarly, we can go from points to lines, changing one “word” in our code. Finally, the look and feel of the graphs is controlled by a theming system, separating the content from the presentation."
  },
  {
    "objectID": "01-dataviz.html#basic-ggplot2",
    "href": "01-dataviz.html#basic-ggplot2",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.3 Basic ggplot2",
    "text": "2.3 Basic ggplot2\nggplot2 ships with a simplified graphing function, called qplot. In this introduction we are not going to use it, and we concentrate instead on the function ggplot, which gives you complete control over your plotting. First, we need to load the package:\n\nlibrary(tidyverse)\n\nTo explore the features of ggplot2, we are going to use a data set detailing the total number of COVID cases and deaths in US counties. The data are provided by the New York Times.\n\n# read the data\n# original URL https://github.com/nytimes/covid-19-data/raw/master/live/us-counties.csv\ndt <- read_csv(\"https://rb.gy/zr65gg\")\n\nRows: 3257 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): county, state, fips\ndbl  (2): cases, deaths\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(dt)\n\n# A tibble: 6 × 6\n  date       county    state        fips  cases deaths\n  <date>     <chr>     <chr>        <chr> <dbl>  <dbl>\n1 2023-03-24 McPherson South Dakota 46089   534     16\n2 2023-03-24 Meade     South Dakota 46093  8404     68\n3 2023-03-24 Mellette  South Dakota 46095   654      8\n4 2023-03-24 Miner     South Dakota 46097   542     15\n5 2023-03-24 Jennings  Indiana      18079  8178    119\n6 2023-03-24 Johnson   Indiana      18081 51093    664\n\n\nwe are going to work with date, county, state, cases and deaths.\nLet’s select Illnois, and take only the counties with more than 10k cases (to have a less crowded graph):\n\ndti <- dt[(dt$state == \"Illinois\") & (dt$cases > 10^4), ]\n\nA particularity of ggplot2 is that it accepts exclusively data organized in tables (a data.frame or a tibble object—more on tibbles later). Thus, all of your data needs to be converted into a data frame format for plotting."
  },
  {
    "objectID": "01-dataviz.html#building-a-well-formed-graph",
    "href": "01-dataviz.html#building-a-well-formed-graph",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.4 Building a well-formed graph",
    "text": "2.4 Building a well-formed graph\nFor our first plot, we’re going to produce a barplot detailing how many cases have been reported in each County:\n\nggplot(data = dti)\n\n\n\n\nAs you can see, nothing is drawn: we need to specify what we would like to associate to the x axis, and what to the y axis, etc. (i.e., we want to set as the aesthetic mappings). A barplot typically has classes on the x axis, while the y axis reports the counts in each class.\n\nggplot(data = dti) + aes(x = county, y = cases)\n\n\n\n\nNote that we concatenate pieces of our “sentence” using the + sign! We’ve got the aestethic mappings figured out, but still no graph… we need to specify a geometry, i.e., the type of graph we want to produce. In this case, a barplot where the height of the bars is specified by the y value:\n\nggplot(data = dti) + aes(x = county, y = cases) + geom_col()\n\n\n\n\nBecause it is very difficult to see the labels, let’s swap the axes:\n\nggplot(data = dti) + \n  aes(x = county, y = cases) + \n  geom_col() + \n  coord_flip()\n\n\n\n\nThe graph shows that, naturally, the vast majority of cases was reported in Cook county. We have written a “well-formed sentence”, composed of data + mapping + geometry, and this is sufficient to produce a graph. We can add “adjectives” and “adverbs” to our graph, to make it clearer:\n\nggplot(data = dti) + \n  aes(x = reorder(county, cases), y = cases) + # order labels according to cases\n  geom_col() +\n  ylab(\"Number of COVID cases reported\") + # x label\n  xlab(\"Illinois County\") + # y label\n  scale_y_log10() + # transform the counts to logs\n  coord_flip()+\n  ggtitle(dti$date[1]) # main title (use current date)"
  },
  {
    "objectID": "01-dataviz.html#scatterplots",
    "href": "01-dataviz.html#scatterplots",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.5 Scatterplots",
    "text": "2.5 Scatterplots\nUsing ggplot2, one can produce very many types of graphs. The package works very well for 2D graphs (or 3D rendered in two dimensions), while it lack capabilities to draw proper 3D graphs, or networks.\nThe main feature of ggplot2 is that you can tinker with your graph fairly easily, and with a common grammar. You don’t have to settle on a certain presentation of the data until you’re ready, and it is very easy to switch from one type of graph to another.\nFor example, let’s plot the number of cases vs. number of deaths:\n\n# you can store the graph in a variable\npl <- ggplot(data = dti)\npl <- pl + aes(x = cases, y = deaths) # for a scatter plot, we need two aes mappings!\npl <- pl + geom_point() # draw points in a scatterplot\npl <- pl + scale_x_sqrt() + scale_y_sqrt() # transform axes\npl # or show(pl)\n\n\n\n\nShowing that number of daily cases and number of daily deaths are highly correlated (but it would be a stronger correlation if we were to plot past cases vs. current deaths)."
  },
  {
    "objectID": "01-dataviz.html#histograms-density-and-boxplots",
    "href": "01-dataviz.html#histograms-density-and-boxplots",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.6 Histograms, density and boxplots",
    "text": "2.6 Histograms, density and boxplots\nIt would be nice to see the distribution of the ratio deaths/cases. To do so, we can produce a histogram:\n\npl <- ggplot(data = dti)\npl <- pl + aes(x = deaths / cases)  \npl + geom_histogram(binwidth = 0.0025) \n\n\n\n\nWe can control the width of the bins by specifying:\n\npl + geom_histogram(bins = 30) # specify the number of bins\n\n\n\npl + geom_histogram(binwidth = 0.001) # specify the bin width\n\n\n\n\nLet’s see whether the histograms differ between Illinois and Indiana:\n\nggplot(data = dt[dt$state %in% c(\"Illinois\", \"Indiana\"),]) + \n  aes(x = deaths / cases, fill = state) + # fill the bar colors by state\n  geom_histogram(bins = 30)\n\n\n\n\nTo plot the histogram side by side, use\n\nggplot(data = dt[dt$state %in% c(\"Illinois\", \"Indiana\"),]) + \n  aes(x = deaths / cases, fill = state) + # fill the bar colors by state\n  geom_histogram(position = \"dodge\", bins = 30)+ \n  xlim(c(0,0.03))\n\n\n\n\nSimilarly, we can approximate the histogram using a density plot, which interpolates the bin height to create a smooth distribution:\n\nggplot(data = dt[dt$state %in% c(\"Illinois\", \"Indiana\"),]) + \n  aes(x = deaths / cases, fill = state) + # fill by state\n  geom_density() + xlim(c(0,0.03))\n\n\n\n\nTo see the graph better, let’s make the coloring semi-transparent:\n\nggplot(data = dt[dt$state %in% c(\"Illinois\", \"Indiana\"),]) + \n  aes(x = deaths / cases, fill = state) + # fill by state\n  geom_density(alpha = 0.5) + xlim(c(0, 0.03))\n\n\n\n\nShowing a similar distribution for the death rate in the two states. For this type of comparison, the ideal graph to show is maybe a box-plot or a violin plot:\n\nggplot(data = dt[dt$state %in% c(\"Illinois\", \"Indiana\"),]) + \n  aes(x = state, y = deaths / cases, fill = state) + # we need both x and y\n  geom_boxplot() + ylim(c(0, 0.03))\n\n\n\n\nA boxplot shows the median (horizontal bar) as well as the inter-quartile range (box size goes from 25th to 75th percentile), as well as the typical range of the data (whiskers). The dots represent “outliers”. To show the full distribution, you can use a violin plot:\n\nggplot(data = dt[dt$state %in% c(\"Illinois\", \"Indiana\"),]) + \n  aes(x = state, y = deaths / cases, fill = state) + # we need both x and y\n  geom_violin(draw_quantiles = 0.5) + ylim(c(0, 0.03))\n\n\n\n\nNote that when we’re producing “similar” plots (e.g., histogram vs. density, box vs. violin, or any other plot sharing the same aesthetic mappings) changing a single word, we have changed the structure of the graph considerably!"
  },
  {
    "objectID": "01-dataviz.html#scales",
    "href": "01-dataviz.html#scales",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.7 Scales",
    "text": "2.7 Scales\nWe can use scales to determine how the aesthetic mappings are displayed. For example, we could set the x axis to be in logarithmic scale, or we can choose how the colors, shapes and sizes are used. ggplot2 uses two types of scales: continuous scales are used for continuos variables (e.g., real numbers); discrete scales for variables that can only take a certain number of values (e.g., colors, shapes, sizes).\nFor example, let’s plot deaths vs. cases in our dti data set:\n\npl <- ggplot(data = dti) + \n  aes(x = cases, y = deaths, colour = log(deaths)) +\n    geom_point() \npl\n\n\n\n\nWe can change the scale of the x axis by calling:\n\npl + scale_x_log10() + scale_y_log10() # log-log plot\n\n\n\npl + scale_x_sqrt() # sqrt of number of cases\n\n\n\npl + scale_x_reverse() # from large to small\n\n\n\n\nSimilarly, we can change the use of colors, points, etc."
  },
  {
    "objectID": "01-dataviz.html#list-of-aesthetic-mappings",
    "href": "01-dataviz.html#list-of-aesthetic-mappings",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.8 List of aesthetic mappings",
    "text": "2.8 List of aesthetic mappings\nWe’ve seen some of the aesthetic mappings. Here’s a list of the main aes:\n\nx what to use for x axis\ny what to use for y axis\ncolor the color of points and lines\nfill the color of shapes (e.g., boxes, bars, etc.)\nsize the size of points, lines, etc.\nshape the shape of points\nalpha the level of transparency of the object\nlinetype the type of line (e.g., solid, dashed, etc.)\n\n\n# a more complex example\nggplot(data = dt) + \n  aes(x = cases, y = deaths, \n          color = state) +\n  geom_point() + \n  scale_x_log10() + # note that the points with 0 cases or deaths will not work\n  scale_y_log10() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "01-dataviz.html#list-of-geometries",
    "href": "01-dataviz.html#list-of-geometries",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.9 List of geometries",
    "text": "2.9 List of geometries\nThere are very many geometries; here are a few of the most useful ones:\n\nLines: geom_abline (line given slope and intercept); geom_hline, geom_vline (horizontal, vertical line); geom_line (connect observation in scatterplot).\nBars: geom_bar (bar height is the count/sum); geom_col (bar heigts are provided by the data).\nBoxes: geom_boxplot.\nDistributions: geom_violin (like boxplots, but showing the density of the distribution); geom_density (density of 1D distribution), geom_density2d (density of bivariate distribution); geom_histogram, geom_bin2d (histograms).\nText: geom_text.\nSmoothing function: geom_smooth (interpolates the points of a scatterplot).\nError bars: geom_errorbar.\nMaps: geom_map (polygons from a reference map)."
  },
  {
    "objectID": "01-dataviz.html#list-of-scales",
    "href": "01-dataviz.html#list-of-scales",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.10 List of scales",
    "text": "2.10 List of scales\nThere are also very many scales. Here are a few:\n\nxlab, ylab, xlim, ylim control labels and ranges of the axes.\nscale_alpha transparency of the points/shapes.\nscale_color (many options) colors of points and lines.\nscale_fill (many options) colors of boxes, bars and shapes.\nscale_shape shape of the points.\nscale_linetype type of lines.\nscale_size size of points and lines.\nscale_x, scale_y (many options) transformations of the axes."
  },
  {
    "objectID": "01-dataviz.html#themes",
    "href": "01-dataviz.html#themes",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.11 Themes",
    "text": "2.11 Themes\nThemes allow you to manipulate the look and feel of a graph with just one command. The package ggthemes extends the themes collection of ggplot2 considerably. For example:\n\n# to install, type install.packages(\"ggthemes\") in the console\nlibrary(ggthemes)\npl <- ggplot(data = dti) + aes(x = cases, y = deaths) +\n    geom_point() + scale_x_log10() + scale_y_log10()\npl + theme_bw() # white background\npl + theme_economist() # like in the magazine \"The Economist\"\npl + theme_wsj() # like \"The Wall Street Journal\""
  },
  {
    "objectID": "01-dataviz.html#faceting",
    "href": "01-dataviz.html#faceting",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.12 Faceting",
    "text": "2.12 Faceting\nIn many cases, we would like to produce a multi-panel graph, in which each panel shows the data for a certain combination of parameters. In ggplot2 this is called faceting: the command facet_grid is used when you want to produce a grid of panels, in which all the panels in the same row (or column) have axes-ranges in common; facet_wrap is used when the different panels do not necessarily have axes-ranges in common.\nFor example:\n\npl <- ggplot(data = dt[dt$state %in% c(\"Illinois\", \"Missouri\", \"Wisconsin\", \"Indiana\"), ]) + \n  aes(x = cases, y = deaths, colour = state) + geom_point() + scale_x_log10() + scale_y_log10()\npl <- pl + facet_wrap(~state)\npl\n\n\n\n\nLet’s add a line separating showing the best-fit line:\n\npl <- pl + geom_smooth()\npl\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nMake ranges on x and y axes equal, and add the 1:1 line:\n\npl <- pl + coord_equal() + geom_abline(slope = 1, intercept = 0)\npl\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'"
  },
  {
    "objectID": "01-dataviz.html#setting-features",
    "href": "01-dataviz.html#setting-features",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.13 Setting features",
    "text": "2.13 Setting features\nOften, you want to simply set a feature (e.g., the color of the points, or their shape), rather than using it to display information (i.e., mapping some aestethic). In such cases, simply declare the feature outside the aes:\n\npl <- ggplot(data = dt) + \n  aes(x = cases, y = deaths) + \n  scale_x_log10() + \n  scale_y_log10()\npl + geom_point()\n\n\n\npl + geom_point(colour = \"red\")\n\n\n\npl + geom_point(shape = 3)\n\n\n\npl + geom_point(alpha = 0.5)"
  },
  {
    "objectID": "01-dataviz.html#saving-graphs",
    "href": "01-dataviz.html#saving-graphs",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.14 Saving graphs",
    "text": "2.14 Saving graphs\nYou can either save graphs as done normally in R:\n\n# save to pdf format\npdf(\"my_output.pdf\", width = 6, height = 4)\nprint(my_plot)\ndev.off()\n# save to svg format\nsvg(\"my_output.svg\", width = 6, height = 4)\nprint(my_plot)\ndev.off()\n\nor use the function ggsave\n\n# save current graph\nggsave(\"my_output.pdf\")\n# save a graph stored in ggplot object\nggsave(plot = my_plot, filename = \"my_output.svg\")"
  },
  {
    "objectID": "01-dataviz.html#multiple-layers",
    "href": "01-dataviz.html#multiple-layers",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.15 Multiple layers",
    "text": "2.15 Multiple layers\nYou can overlay different plots. To do so, however, they must share some of the aesthetic mappings. The simplest case is that in which you have only one dataset:\n\nggplot(data = dt) + \n  geom_point(aes(y = state, x = cases), color = \"black\") + \n  geom_point(aes(y = state, x = deaths), color = \"red\") +\n  scale_x_log10() + \n  xlab(\"cases (black), deaths (red)\")"
  },
  {
    "objectID": "01-dataviz.html#try-on-your-own-data",
    "href": "01-dataviz.html#try-on-your-own-data",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.16 Try on your own data!",
    "text": "2.16 Try on your own data!\nNow that you’re familiar with ggplot2, try producing some meaningful plots for your own data."
  },
  {
    "objectID": "01-dataviz.html#resources",
    "href": "01-dataviz.html#resources",
    "title": "2  Visualizing data using ggplot2",
    "section": "2.17 Resources",
    "text": "2.17 Resources\n\nR for Data Science\nTidyverse reference website\nData Visualization Cheat Sheet"
  },
  {
    "objectID": "02-probdist.html#sample-spaces-and-random-variables",
    "href": "02-probdist.html#sample-spaces-and-random-variables",
    "title": "3  Fundamentals of probability",
    "section": "3.1 Sample spaces and random variables",
    "text": "3.1 Sample spaces and random variables\nNo observation or measurement in our world is perfectly reproducible, no matter how carefully planned and executed. The level of uncertainly varies, but randomness always finds a way to creep into a data set. Where does the “random” factor come from? From the classical physics perspective, as articulated by Laplace, most natural phenomena are theoretically deterministic for an omniscient being with an unlimited computational power. Quantum mechanical phenomena are (theoretically) truly random, but the randomness is not observable on the scales of biology or social science. The lack of predictability in the data we work with is usually due either to its intrinsic complexity (e.g., bio-molecular systems, prediction of animal behavior), which essentially makes it impossible to know every detail of the system, or to some external source of noise (e.g., measurement error, weather affecting food availability) that is outside of our control.\nIn probability terminology, a random experiment produces outcomes and the collection of all outcomes of an experiment is called its sample space.\nExample: The specifics of the experiment can affect the degree of uncertainty in the outcome; the same measurement may be random or not, depending on context. For example, measuring the height of a person should be deterministic, if one measures the height of the same person within a short amount of time. So unless you’re interested in studying the error in stadiometer results, you probably won’t consider this a random experiment. However, measuring the heights of different people is a random experiment, where the source of randomness is primarily due to the selection of people for your study, called sampling error, rather than due to the measurement noise of any one person.\nThe measurement of interest from a random experiment is called a random variable. Sometimes the measurement is simply the outcome, but usually it reports some aspect of the outcome and so several outcomes can have the same value of the random variable. The random variable can then be seen as condensing the sample space into a smaller range of values. Random variables can be numeric or categorical, with the difference that categorical variables cannot be assigned meaningful numbers. For instance, one may report an individual by phenotype (e.g., white or purple flowers), or having a nucleotide A, T, G, C in a particular position, and although one could assign numbers to these categories (e.g., 1, 2, 3, 4) they could not be used in a sensible way—one can compare and do arithmetic with numbers, but A is not less than T and A + T does not equal G. Thus there are different tools for describing and working with numeric and categorical random variables.\nExample: In a DNA sequence a codon triplet represents a specific amino acid, but there is redundancy (several triplets may code for the same amino acid). One may think of a coding DNA sequence as an outcome, but the amino acid (sequence or single one) as a random variable. Extending this framework, one may think of genotype as an outcome, but a phenotype (e.g., eye color) as a random variable—although this is not correct for any phenotype that is not strictly determined by the genotype, because then there are other factors (e.g., environmental or epigenetic) that influence the value of the random variable besides the outcome (genotype).\nExercise: The package palmerpenguins contains multiple variables measured in populations of three different species of penguins over three years on three different islands. Identify numeric and categorical variables, and specify whether numeric variables are discrete and continuous.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nstr(penguins)\n\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ..."
  },
  {
    "objectID": "02-probdist.html#probability-axioms",
    "href": "02-probdist.html#probability-axioms",
    "title": "3  Fundamentals of probability",
    "section": "3.2 Probability axioms",
    "text": "3.2 Probability axioms\nAn outcome in sample space can be assigned a probability depending on its frequency of occurrence out of many trials, each is a number between 0 and 1. Combinations of outcomes (events) can be assigned probabilities by building them out of individual outcomes. These probabilities have a few rules, called the axioms of probability, expressed using set theory notation.\n\nThe total probability of all outcomes in sample space is 1. \\(P(\\Omega) = 1\\)\nThe probability of nothing (empty set) is 0. \\(P(\\emptyset) = 0\\)\nThe probability of an event made up of the union of two events is the sum of the two probabilities minus the probability of the overlap (intersection.) \\(P(A \\cup B) = P(A) + P(B) - P(A \\cap B)\\)\n\nExample: Let’s assign a probability to every possible three-letter codon. There are \\(4^3 = 64\\) codons, so if one assumes that each one has equal probability, then they they all equal \\(1/64\\) (by axiom 1.) The probability of a codon having A as the first letter is 1/4, and so is the probability of A as the second letter. Axiom 3 allows us to calculate the probability of A in either the first or the second letter:\n\\[ P(AXX \\cup \\ XAX ) =  P(AXX) + P(XAX) - P(AAX) = 1/4 + 1/4 - 1/16 = 7/16\\]"
  },
  {
    "objectID": "02-probdist.html#probability-distributions",
    "href": "02-probdist.html#probability-distributions",
    "title": "3  Fundamentals of probability",
    "section": "3.3 Probability distributions",
    "text": "3.3 Probability distributions\nThe probability of each value of a random variable can be calculated from the probability of the event that corresponds to each value of the random variable. The collection of the probabilities of all of the values of the random variable is called the probability distribution function of the random variable, more formally the mass function for a discrete random variable or the density function for a continuous random variable.\nFor a discrete random variable (let’s call it \\(X\\)) with a probability mass function \\(f\\), the probability of \\(X\\) taking the value of \\(a\\) can be written either as \\(f(X=a)\\) or \\(f(a)\\), as long as it’s clear that \\(f\\) is the probability distribution function of \\(X\\). The one ironclad rule of probability is that all values of the mass function have to add up to 1. To state this mathematically, if all the possible values of \\(X\\) can be written as \\(a_1, a_2, ...\\) (there may be finitely or infinitely many of them, as long as it’s a countable infinity), this sum has to be equal to 1: \\[ \\sum_i f(a_i) = 1 \\]\nA continuous random variable (let’s call it \\(Y\\)) with a probability density function \\(g\\) is a bit more complicated. The continuous part means that the random variable has uncountably many values, even if the range is finite (for example, there are uncountably many real numbers between 0 and 1). Thus, the probability of any single value must be vanishingly small (zero), otherwise it would be impossible to add up (integrate) all of the values and get a finite result (let alone 1). We can only measure the probability of a range of values of \\(Y\\) and it is defined by the integral of the density function overall that range:\n\\[ P( a< Y < b) = \\int_a ^b g(y) dy \\]\nThe total probability over the entire range of \\(Y\\) has to be 1, but it’s similarly calculated by integration instead of summation (\\(R\\) represents the range of values of \\(Y\\)):\n\\[ \\int_R g(y) dy = 1\\]\nExample: As codons (DNA triplets) code for amino acids, we can consider the genetic code a random variable on the sample space. Assuming all codons have equal probabilities, the probability of each amino acid is the number of triplets that code for it divided by 64. For example, the probabilities of leucine and arginine are \\(6/64 = 3/32\\), the probability of threonine is \\(4/64 = 1/16\\) and the probabilities of methionine and tryptophan are \\(1/64\\). This defines a probability distribution function of the random variable of the genetic code. Note that the sum of all the probabilities of amino acids has to be 1. Of course there is no inherent reason why each triplet should be equally probable, so a different probability structure on the sample space would result in a different probability distribution (mass) function."
  },
  {
    "objectID": "02-probdist.html#measures-of-center-medians-and-means",
    "href": "02-probdist.html#measures-of-center-medians-and-means",
    "title": "3  Fundamentals of probability",
    "section": "3.4 Measures of center: medians and means",
    "text": "3.4 Measures of center: medians and means\nThe standard measures described here are applicable only numeric random variables. Some measures of center and spread for categorical variables exist as well.\nThe median of a random variable is the value which is in the middle of the distribution, specifically, that the probability of the random variable being no greater than that value is 0.5.\nThe mean or expectation of a random variable is the center of mass of the probability distribution. Specifically, it is defined for a mass function to be:\n\\[ E(X) = \\sum_i a_i\\, f(a_i)\\]\nAnd for a density function it is defined using the integral: \\[ E(Y) =  \\int_R y\\, g(y) dy \\]\nExample: Let us examine the factors (categorical variables) in the penguins data set. They cannot be described using means and medians, but can be plotted by counts in each category as you learned in the introduction to ggplot2:\n\nggplot(data = penguins) +\n  aes(x = species, fill = sex) + \n  geom_bar(position = \"fill\")\n\n\n\nggplot(data = penguins) +\n  aes(x = year, fill = species) + \n  geom_bar(position = \"fill\")\n\n\n\n\nOne can plot the distributions of numeric variables like body mass for different penguin species using box plots:\n\nggplot(data = penguins) + aes(x = as.factor(species), y=body_mass_g) + geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nThe following code chunk uses dplyr functions that we will learn in the next chapter to calculate the mean and median values of these variables aggregated by species:\n\npenguins %>% drop_na() %>% group_by(species) %>% summarise(mean = mean(body_mass_g))\n\n# A tibble: 3 × 2\n  species    mean\n  <fct>     <dbl>\n1 Adelie    3706.\n2 Chinstrap 3733.\n3 Gentoo    5092.\n\npenguins %>% drop_na()  %>% group_by(species) %>% summarise(median = median(body_mass_g))\n\n# A tibble: 3 × 2\n  species   median\n  <fct>      <dbl>\n1 Adelie      3700\n2 Chinstrap   3700\n3 Gentoo      5050\n\n\nComment on how the descriptive statistics correspond to the box plots."
  },
  {
    "objectID": "02-probdist.html#measures-of-spread-quartiles-and-variances",
    "href": "02-probdist.html#measures-of-spread-quartiles-and-variances",
    "title": "3  Fundamentals of probability",
    "section": "3.5 Measures of spread: quartiles and variances",
    "text": "3.5 Measures of spread: quartiles and variances\nAll random variables have spread in their values. The simplest way to describe it is by stating its range (the interval between the minimum and maximum values) and the quartiles (the medians of the two halves of the distribution).\nA more standard measure of the spread of a distribution is the variance, defined as the expected value of the squared differences from the mean:\n\\[\\text{Var}(X) = E [X - E(X)]^2 = \\sum_i (a_i- E(X))^2 f(a_i)\\]\nAnd for a density function it is defined using the integral: \\[\\text{Var}(Y) =  E[ Y - E(Y)]^2 = \\int_R (y-E(Y))^2 g(y) dy \\]\nVariances have squared units so they are not directly comparable to the values of the random variable. Taking the square root of the variance converts it into the same units and is called the standard deviation of the distribution: \\[ \\sigma_X = \\sqrt{\\text{Var}(X)}\\] Example: Let’s go back to the penguins data set and calculate the measures of spread for the variable body mass for different penguin species\n\nggplot(data = penguins) + aes(x = as.factor(species), y=body_mass_g) + geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\npenguins %>% drop_na() %>% group_by(species) %>% summarise(var = var(body_mass_g))\n\n# A tibble: 3 × 2\n  species       var\n  <fct>       <dbl>\n1 Adelie    210332.\n2 Chinstrap 147713.\n3 Gentoo    251478.\n\npenguins %>% drop_na() %>% group_by(species) %>% summarise(first_quart = quantile(body_mass_g,0.25))\n\n# A tibble: 3 × 2\n  species   first_quart\n  <fct>           <dbl>\n1 Adelie          3362.\n2 Chinstrap       3488.\n3 Gentoo          4700 \n\npenguins %>% drop_na() %>% group_by(species) %>% summarise(third_quart = quantile(body_mass_g,0.75))\n\n# A tibble: 3 × 2\n  species   third_quart\n  <fct>           <dbl>\n1 Adelie           4000\n2 Chinstrap        3950\n3 Gentoo           5500\n\n\nWhich species has a wider spread in its body mass? How do the descriptive stats and the box plots correspond?"
  },
  {
    "objectID": "02-probdist.html#data-as-samples-from-distributions-statistics",
    "href": "02-probdist.html#data-as-samples-from-distributions-statistics",
    "title": "3  Fundamentals of probability",
    "section": "3.6 Data as samples from distributions: statistics",
    "text": "3.6 Data as samples from distributions: statistics\nIn scientific practice, we collect data from one or more random variables, called a sample, and then try to make sense of it. One of the basic goals is statistical inference: using the data set to describe the population distribution from which the sample was drawn. Data sets can be plotted as histograms and the frequency/fraction of each value should be an approximation of the underlying probability distribution. In addition, descriptive statistics of the sample data (means, variances, medians, etc.) can be used to estimate the true parameters such as the mean and the variance of the population distribution.\nSome of the fundamental questions about the population include:\n\nWhat type of distribution is it?\nEstimate the parameters of that distribution.\nTest a hypothesis, e.g., whether two samples were drawn from the same distribution.\nDescribe and test a relationship between two or more variables.\n\n\n3.6.1 Law of large numbers\nFirst, the sample has to be unbiased, that is, no outcomes should be systematically over- or under-represented. But even an unbiased sample will differ from the population due to the inherent randomness of selection (sampling error). The law of large numbers states that as the sample size increases, the mean of the sample converges to the true mean of the population. Formally, for a set of \\(n\\) independent, identically distributed random variables (the sample) \\(\\{X_i\\}\\) the sample mean \\(\\overline{X}_n\\) converges to the mean of the distribution \\(\\mu\\):\n\\[\n\\lim _{n \\to \\infty} \\frac{\\sum_{i=1}^n {X_i}}{n} = \\lim _{n \\to \\infty} \\overline{X}_n = \\mu\n\\]\n\n\n3.6.2 Central Limit Theorem\nThat is nice to know, but doesn’t say exactly how large a sample is needed to estimate, for example, the mean of the population to a given precision. For that, we have the Central Limit Theorem, which states that the distribution of sample means (from samples of independent, identically distributed random variables) as sample size increases, approaches the normal (Gaussian) distribution with mean equal to the population mean and standard deviation equal to the standard deviation of the population divided by the square root of the sample size. Formally, it states that for a set of \\(n\\) independent, identically distributed random variables (the sample) \\(\\{X_i\\}\\) with distribution mean \\(\\mu\\) and variance \\(\\sigma^2\\), the probability density function of the sample mean \\(\\overline{X}_n\\) converges for large sample size \\(n\\) to the normal distribution:\n\\[\nP(\\overline{X}_n) \\to N(\\mu, \\sigma^2/n)\n\\]\nwhere \\(N(\\mu, \\sigma^2/n\\)) stands for the normal distribution with mean \\(\\mu\\) and variance \\(\\sigma^2/n\\). One extremely useful consequence of this theorem is that the variance of the sample mean is reciprocally related to the sample size \\(n\\). More precisely, it allows the calculation of confidence intervals by using the normal distribution to generate an interval around the observed sample mean in which the true mean \\(\\mu\\) lies with a given likelihood.\nThis is an amazing result because it applies to any distribution, so it allows for the estimation of means for any situation, as long as the condition of independent, identically distributed variables in the sample is satisfied (the identical distributed condition can actually be relaxed). There are other central limit theorems that apply to other situations, including cases where the random variables in the sample are not independent (e.g., Markov models). The bottom line is that an unbiased sample contains a reflection of the true population, but it is always distorted by uncertainty. Larger sample sizes decrease the uncertainty but are more difficult and expensive to obtain.\nDiscussion: Suggest examples of biological data sets which are not made up of independent identically distributed random variables."
  },
  {
    "objectID": "02-probdist.html#exploration-misleading-means",
    "href": "02-probdist.html#exploration-misleading-means",
    "title": "3  Fundamentals of probability",
    "section": "3.7 Exploration: misleading means",
    "text": "3.7 Exploration: misleading means\nMeans are the most common type of descriptive statistic and are sometimes the only numeric quantity used to compare two data sets, e.g. “the average GPA at school A is 3.5 vs 3.8 at school B”. However, means can be misleading measures in multiple ways.\nFirst, means are highly sensitive to outliers, or points that are very different from other values. They can skew the mean value, even pulling it completely away from the bulk of the values, in which case the mean ceases to be a measure of a “typical” value.\nSecond, there can be funny business with combining means of different subsets of data. Normally, you might expect if you have group A and group B, and each group has two subgroups divided by another variable (e.g. we are comparing the GPAs of students in school A and school B, and we split up the students in each school by gender), then if the means of each subgroup of A and larger than the means of the same subgroup of B (e.g. the GPA of girls and boys in school A are higher than those of their counterparts in school B), then the same relationship should be true for the combined mean of group A and group B (that is, the overall GPA in school A is higher than school B). That is not necessarily true!\nThis apparent contradiction is called Simpson’s paradox. It can be illustrated in the data set of all the passengers and crew on the doomed ocean liner Titanic. The data set is found in the library stablelearner and is loaded by the chunk below:\n\nlibrary(stablelearner)\ndata(titanic)\nstr(titanic)\n\n'data.frame':   2207 obs. of  11 variables:\n $ name    : chr  \"Abbing, Mr. Anthony\" \"Abbott, Mr. Eugene Joseph\" \"Abbott, Mr. Rossmore Edward\" \"Abbott, Mrs. Rhoda Mary 'Rosa'\" ...\n $ gender  : Factor w/ 2 levels \"female\",\"male\": 2 2 2 1 1 2 2 1 2 2 ...\n $ age     : num  42 13 16 39 16 25 30 28 27 20 ...\n $ class   : Factor w/ 7 levels \"1st\",\"2nd\",\"3rd\",..: 3 3 3 3 3 3 2 2 3 3 ...\n $ embarked: Factor w/ 4 levels \"B\",\"C\",\"Q\",\"S\": 4 4 4 4 4 4 2 2 2 4 ...\n $ country : Factor w/ 48 levels \"Argentina\",\"Australia\",..: 44 44 44 15 30 44 17 17 26 16 ...\n $ ticketno: int  5547 2673 2673 2673 348125 348122 3381 3381 2699 3101284 ...\n $ fare    : num  7.11 20.05 20.05 20.05 7.13 ...\n $ sibsp   : Ord.factor w/ 9 levels \"0\"<\"1\"<\"2\"<\"3\"<..: 1 1 2 2 1 1 2 2 1 1 ...\n $ parch   : Ord.factor w/ 10 levels \"0\"<\"1\"<\"2\"<\"3\"<..: 1 3 2 2 1 1 1 1 1 1 ...\n $ survived: Factor w/ 2 levels \"no\",\"yes\": 1 1 1 2 2 2 1 2 2 2 ...\n\n\nThe chunk below calculated the survival probability of passengers of all classes compared to the crew (of all types:\n\ntitanic %>% group_by(Passenger = class %in% c('1st', '2nd', '3rd'), survived) %>% summarise(num = n()) %>% mutate(fraction = num/sum(num)) \n\n`summarise()` has grouped output by 'Passenger'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 4\n# Groups:   Passenger [2]\n  Passenger survived   num fraction\n  <lgl>     <fct>    <int>    <dbl>\n1 FALSE     no         679    0.763\n2 FALSE     yes        211    0.237\n3 TRUE      no         817    0.620\n4 TRUE      yes        500    0.380\n\n\nYou can see that about 24% of the crew survived and almost 38% of the passengers survived. In this week’s assignment you will calculate and explain what happens when you divide the people in each group by gender."
  },
  {
    "objectID": "02-probdist.html#references",
    "href": "02-probdist.html#references",
    "title": "3  Fundamentals of probability",
    "section": "3.8 References",
    "text": "3.8 References\n\nLaplace’s views on probability and determinism\nCentral Limit Theorem in R\nExploration of the Central Limit Theorem\nSimpson’s paradox"
  },
  {
    "objectID": "03-wrangling.html#goal",
    "href": "03-wrangling.html#goal",
    "title": "4  Data wrangling",
    "section": "4.1 Goal",
    "text": "4.1 Goal\nLearn how to manipulate large data sets by writing efficient, consistent, and compact code. Introduce the use of dplyr, tidyr, and the “pipe” operator %>%. Effortlessly produce statistics for grouped data. Massage data into “tidy” form."
  },
  {
    "objectID": "03-wrangling.html#what-is-data-wrangling",
    "href": "03-wrangling.html#what-is-data-wrangling",
    "title": "4  Data wrangling",
    "section": "4.2 What is data wrangling?",
    "text": "4.2 What is data wrangling?\nAs biologists living in the XXI century, we are often faced with tons of data, possibly replicated over several organisms, treatments, or locations. We would like to streamline and automate our analysis as much as possible, writing scripts that are easy to read, fast to run, and easy to debug. Base R can get the job done, but often the code contains complicated operations, and a lot of $ signs and brackets.\nWe’re going to learn about the packages dplyr and tidyr, which are part of tidyverse and can be used to manipulate large data frames in a simple and straightforward way. These tools are also much faster than the corresponding base R commands, are very compact, and can be concatenated into “pipelines”.\nTo start, we need to import the libraries:\n\nlibrary(tidyverse) # this loads both dplyr and tidyr, along with other packages\nlibrary(palmerpenguins) # a nice data set to play with\n\n\n# make sure function select is the right one...\nselect <- dplyr::select\n\nWe are going to use the data set penguins from the package palmerpenguins, which we have already seen last week."
  },
  {
    "objectID": "03-wrangling.html#a-new-data-type-tibble",
    "href": "03-wrangling.html#a-new-data-type-tibble",
    "title": "4  Data wrangling",
    "section": "4.3 A new data type, tibble",
    "text": "4.3 A new data type, tibble\nThe data is stored in a “tibble”:\n\nclass(penguins)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nIn fact, dplyr ships with a new data type, called a tibble. To convert a data.frame into a tibble, use as_tibble:\n\n# load a data frame\ndata(\"trees\")\nclass(trees)\ntrees <- as_tibble(trees)\nclass(trees)\n\nThe nice feature of tbl objects is that they will print only what fits on the screen, and also give you useful information on the size of the data, as well as the type of data in each column. Other than that, a tbl object behaves very much like a data.frame. In some rare cases, you want to transform the tbl back into a data.frame. For this, use the function as.data.frame(tbl_object).\nWe can take a look at the data using one of several functions:\n\nhead(dt) shows the first few rows\ntail(dt) shows the last few rows\nglimpse(dt) a summary of the data (similar to str in base R)\nView(dt) open in spreadsheet-like window"
  },
  {
    "objectID": "03-wrangling.html#selecting-rows-and-columns",
    "href": "03-wrangling.html#selecting-rows-and-columns",
    "title": "4  Data wrangling",
    "section": "4.4 Selecting rows and columns",
    "text": "4.4 Selecting rows and columns\nThere are many ways to subset the data, either by row (subsetting the observations), or by column (subsetting the variables). For example, let’s select only the rows with observations from the island Torgersen:\n\nfilter(penguins, island == \"Torgersen\")\n\n# A tibble: 52 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 42 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n\n\nWe have 52 observations. We have used the command filter(tbl, conditions) to select certain observations. We can combine several conditions, by listing them side by side, possibly using logical operators.\n\nExercise: what does this do? filter(penguins,  bill_length_mm > 40,  bill_depth_mm > 20, sex == male)\n\nWe can also select particular variables (columns) using the function select(tbl, cols to select). For example, select species and island:\n\nselect(penguins, species, island)\n\n# A tibble: 344 × 2\n   species island   \n   <fct>   <fct>    \n 1 Adelie  Torgersen\n 2 Adelie  Torgersen\n 3 Adelie  Torgersen\n 4 Adelie  Torgersen\n 5 Adelie  Torgersen\n 6 Adelie  Torgersen\n 7 Adelie  Torgersen\n 8 Adelie  Torgersen\n 9 Adelie  Torgersen\n10 Adelie  Torgersen\n# ℹ 334 more rows\n\n\nHow many species are represented in the data set? We can use the function distinct(tbl, cols to select) to retain only the rows that differ from each other:\n\ndistinct(select(penguins, species))\n\n# A tibble: 3 × 1\n  species  \n  <fct>    \n1 Adelie   \n2 Gentoo   \n3 Chinstrap\n\n\nShowing that there are three species, once we removed the duplicates. There are many other ways to subset observations:\n\nslice_sample(tbl, howmany, replace = TRUE) sample howmany rows at random (with replacement)\nsample_sample(tbl, proportion, replace = FALSE) sample a certain proportion (e.g. 0.2 for 20%) of rows at random without replacement\nslice(tbl, 5:20) extract the rows 5 to 20\nslice_max(penguins, 10, body_mass_g) extract the first 10 rows, once ordered by body_mass_g\n\nMore ways to select columns:\n\nselect(penguins, contains(\"mm\")) select all columns containing the string mm\nselect(penguins, -year, -body_mass_g) exclude the columns year and body_mass_g\nselect(penguins, matches(\"length|bill\")) select all columns whose names match a regular expression"
  },
  {
    "objectID": "03-wrangling.html#creating-pipelines-using",
    "href": "03-wrangling.html#creating-pipelines-using",
    "title": "4  Data wrangling",
    "section": "4.5 Creating pipelines using %>%",
    "text": "4.5 Creating pipelines using %>%\nWe’ve been calling nested functions, such as distinct(select(penguins, species)). If you have to add another layer or two, the code would become unreadable. dplyr allows you to “un-nest” these functions and create a “pipeline” in which you concatenate commands separated by a special operator, %>%. For example:\n\npenguins %>% # take a data table\n  select(species) %>% # select a column\n  distinct() # remove duplicates\n\n# A tibble: 3 × 1\n  species  \n  <fct>    \n1 Adelie   \n2 Gentoo   \n3 Chinstrap\n\n\ndoes exactly the same operations as the command above, but is much more readable. By concatenating many commands, you can create incredibly complex pipelines while retaining readability. It is also quite easy to add another piece of the pipeline in between commands, or to comment some of the pipeline out.\nAnother advantage of pipelines is that they help with name completion. In fact, RStudio is running in the background your pipeline while you type it. Try typing dt %>% filter( and then start typing bill and press Tab: you will see the options to complete the column name; choose it with your arrows and hit Return. The back tick-marks will be added automatically if needed (e.g., column names containing spaces, or starting with a digit)."
  },
  {
    "objectID": "03-wrangling.html#producing-summaries",
    "href": "03-wrangling.html#producing-summaries",
    "title": "4  Data wrangling",
    "section": "4.6 Producing summaries",
    "text": "4.6 Producing summaries\nSometimes we need to calculate statistics on certain columns. For example, calculate the average body mass of the penguins. We can do this using summarise (you can use British or American spelling):\n\npenguins %>% \n  summarise(avg = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 1\n    avg\n  <dbl>\n1 4202.\n\n# alternatively, drop_na(body_mass_g) removes all the observations for which\n# body_mass_g is NA\npenguins %>% \n  drop_na(body_mass_g) %>% \n  summarise(avg = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 1\n    avg\n  <dbl>\n1 4202.\n\n\nwhere we used na.rm = TRUE to ignore missing values. This command returns a tbl object with just the average body mass. You can combine multiple statistics (use first, last, min, max, n [count the number of rows], n_distinct [count the number of distinct rows], mean, median, var, sd, etc.):\n\npenguins %>% \n  summarise(avg = mean(body_mass_g, na.rm = TRUE), \n            sd = sd(body_mass_g, na.rm = TRUE), \n            median = median(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 3\n    avg    sd median\n  <dbl> <dbl>  <dbl>\n1 4202.  802.   4050"
  },
  {
    "objectID": "03-wrangling.html#summaries-by-group",
    "href": "03-wrangling.html#summaries-by-group",
    "title": "4  Data wrangling",
    "section": "4.7 Summaries by group",
    "text": "4.7 Summaries by group\nOne of the most useful features of dplyr is the ability to produce statistics for the data once subsetted by groups. For example, we would like to compute the average body mass by species and sex:\n\npenguins %>% \n  drop_na() %>% \n  group_by(sex, species) %>% \n  summarise(mean = mean(body_mass_g, na.rm = TRUE))\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 6 × 3\n# Groups:   sex [2]\n  sex    species    mean\n  <fct>  <fct>     <dbl>\n1 female Adelie    3369.\n2 female Chinstrap 3527.\n3 female Gentoo    4680.\n4 male   Adelie    4043.\n5 male   Chinstrap 3939.\n6 male   Gentoo    5485.\n\n\nshowing that male penguins are heavier for the three species considered.\n\nExercise: find the average bill_depth_mm and bill_length_mm by species and sex. Filter the data to consider only observations for the year 2008."
  },
  {
    "objectID": "03-wrangling.html#ordering-the-data",
    "href": "03-wrangling.html#ordering-the-data",
    "title": "4  Data wrangling",
    "section": "4.8 Ordering the data",
    "text": "4.8 Ordering the data\nTo order the data according to one or more variables, use arrange():\n\npenguins %>% \n  arrange(body_mass_g) # ascending\n\n# A tibble: 344 × 8\n   species   island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>     <fct>             <dbl>         <dbl>             <int>       <int>\n 1 Chinstrap Dream              46.9          16.6               192        2700\n 2 Adelie    Biscoe             36.5          16.6               181        2850\n 3 Adelie    Biscoe             36.4          17.1               184        2850\n 4 Adelie    Biscoe             34.5          18.1               187        2900\n 5 Adelie    Dream              33.1          16.1               178        2900\n 6 Adelie    Torgers…           38.6          17                 188        2900\n 7 Chinstrap Dream              43.2          16.6               187        2900\n 8 Adelie    Biscoe             37.9          18.6               193        2925\n 9 Adelie    Dream              37.5          18.9               179        2975\n10 Adelie    Dream              37            16.9               185        3000\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n\npenguins %>% \n  arrange(desc(body_mass_g)) # descending\n\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Gentoo  Biscoe           49.2          15.2               221        6300\n 2 Gentoo  Biscoe           59.6          17                 230        6050\n 3 Gentoo  Biscoe           51.1          16.3               220        6000\n 4 Gentoo  Biscoe           48.8          16.2               222        6000\n 5 Gentoo  Biscoe           45.2          16.4               223        5950\n 6 Gentoo  Biscoe           49.8          15.9               229        5950\n 7 Gentoo  Biscoe           48.4          14.6               213        5850\n 8 Gentoo  Biscoe           49.3          15.7               217        5850\n 9 Gentoo  Biscoe           55.1          16                 230        5850\n10 Gentoo  Biscoe           49.5          16.2               229        5800\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>"
  },
  {
    "objectID": "03-wrangling.html#renaming-columns",
    "href": "03-wrangling.html#renaming-columns",
    "title": "4  Data wrangling",
    "section": "4.9 Renaming columns",
    "text": "4.9 Renaming columns\nTo rename one or more columns, use rename():\n\npenguins %>% \n  rename(bm = body_mass_g)\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm    bm sex   \n   <fct>   <fct>              <dbl>         <dbl>             <int> <int> <fct> \n 1 Adelie  Torgersen           39.1          18.7               181  3750 male  \n 2 Adelie  Torgersen           39.5          17.4               186  3800 female\n 3 Adelie  Torgersen           40.3          18                 195  3250 female\n 4 Adelie  Torgersen           NA            NA                  NA    NA <NA>  \n 5 Adelie  Torgersen           36.7          19.3               193  3450 female\n 6 Adelie  Torgersen           39.3          20.6               190  3650 male  \n 7 Adelie  Torgersen           38.9          17.8               181  3625 female\n 8 Adelie  Torgersen           39.2          19.6               195  4675 male  \n 9 Adelie  Torgersen           34.1          18.1               193  3475 <NA>  \n10 Adelie  Torgersen           42            20.2               190  4250 <NA>  \n# ℹ 334 more rows\n# ℹ 1 more variable: year <int>"
  },
  {
    "objectID": "03-wrangling.html#adding-new-variables-using-mutate",
    "href": "03-wrangling.html#adding-new-variables-using-mutate",
    "title": "4  Data wrangling",
    "section": "4.10 Adding new variables using mutate",
    "text": "4.10 Adding new variables using mutate\nIf you want to add one or more new columns, with the content being a function of other columns, use the function mutate. For example, we are going to add a new column showing the z-score for the body mass of each individual:\n\npenguins %>% \n  mutate(zscore_bm = scale(body_mass_g)) %>% \n  select(species, sex, body_mass_g, zscore_bm)\n\n# A tibble: 344 × 4\n   species sex    body_mass_g zscore_bm[,1]\n   <fct>   <fct>        <int>         <dbl>\n 1 Adelie  male          3750       -0.563 \n 2 Adelie  female        3800       -0.501 \n 3 Adelie  female        3250       -1.19  \n 4 Adelie  <NA>            NA       NA     \n 5 Adelie  female        3450       -0.937 \n 6 Adelie  male          3650       -0.688 \n 7 Adelie  female        3625       -0.719 \n 8 Adelie  male          4675        0.590 \n 9 Adelie  <NA>          3475       -0.906 \n10 Adelie  <NA>          4250        0.0602\n# ℹ 334 more rows\n\n\nWe can pipe the results to ggplot for plotting!\n\npenguins %>% \n  mutate(zscore_bm = scale(body_mass_g)) %>% \n  select(species, sex, body_mass_g, zscore_bm) %>% \n  ggplot() + aes(x = species, y = zscore_bm, colour = sex) + \n    geom_jitter()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nYou can use the function transmute() to create a new column and drop the original columns.\nMost importantly, you can use mutate and transmute on grouped data. For example, let’s recompute the z-score of the body_mass_g once the data is grouped by species and sex:\n\npenguins %>% \n  drop_na() %>% \n  select(species, sex, body_mass_g) %>% \n  group_by(species, sex) %>% \n  mutate(zscore_bm = scale(body_mass_g)) %>% \n  arrange(body_mass_g)\n\n# A tibble: 333 × 4\n# Groups:   species, sex [6]\n   species   sex    body_mass_g zscore_bm[,1]\n   <fct>     <fct>        <int>         <dbl>\n 1 Chinstrap female        2700         -2.90\n 2 Adelie    female        2850         -1.93\n 3 Adelie    female        2850         -1.93\n 4 Adelie    female        2900         -1.74\n 5 Adelie    female        2900         -1.74\n 6 Adelie    female        2900         -1.74\n 7 Chinstrap female        2900         -2.20\n 8 Adelie    female        2925         -1.65\n 9 Adelie    female        3000         -1.37\n10 Adelie    female        3000         -1.37\n# ℹ 323 more rows"
  },
  {
    "objectID": "03-wrangling.html#data-wrangling",
    "href": "03-wrangling.html#data-wrangling",
    "title": "4  Data wrangling",
    "section": "4.11 Data wrangling",
    "text": "4.11 Data wrangling\nData is rarely in a format that is good for computing, and much effort goes into reading the data and wrestling with it to make it into a good format. As the name implies, tidyverse strongly advocates for the use of data in tidy form. What does this mean?\n\nEach variable forms a column\nEach observation forms a row\nEach type of observational unit forms a table\n\nThis is often called narrow table format. Any other form of data (e.g., wide table format) is considered messy. However, often data are not organized in tidy form, or we want to produce tables for human consumption rather than computer consumption. The package tidyr allows to accomplish just that. It contains only a few, very powerful functions. To explore this issue, we build a data set containing the average body mass by species and sex:\n\npenguin_bm <- penguins %>% \n  drop_na() %>% \n  group_by(sex, species) %>% \n  summarise(body_mass = mean(body_mass_g), .groups = \"drop\") # remove groups after calculation\n\npenguin_bm\n\n# A tibble: 6 × 3\n  sex    species   body_mass\n  <fct>  <fct>         <dbl>\n1 female Adelie        3369.\n2 female Chinstrap     3527.\n3 female Gentoo        4680.\n4 male   Adelie        4043.\n5 male   Chinstrap     3939.\n6 male   Gentoo        5485."
  },
  {
    "objectID": "03-wrangling.html#from-narrow-to-wide",
    "href": "03-wrangling.html#from-narrow-to-wide",
    "title": "4  Data wrangling",
    "section": "4.12 From narrow to wide",
    "text": "4.12 From narrow to wide\nOur data is in tidy form. For a paper, we want to show the difference between males and females in a table:\n\npenguin_bm %>% \n  pivot_wider(names_from = sex, values_from = body_mass)\n\n# A tibble: 3 × 3\n  species   female  male\n  <fct>      <dbl> <dbl>\n1 Adelie     3369. 4043.\n2 Chinstrap  3527. 3939.\n3 Gentoo     4680. 5485.\n\n\nwhere we have created new column names using the values found in sex (hence, names_from), and filled each cell with the corresponding value found in body_mass (hence, values_from). Similarly, if we want to show the data with species as column names, and sex as rows, we can use:\n\npenguin_bm %>% \n  pivot_wider(names_from = species, values_from = body_mass)\n\n# A tibble: 2 × 4\n  sex    Adelie Chinstrap Gentoo\n  <fct>   <dbl>     <dbl>  <dbl>\n1 female  3369.     3527.  4680.\n2 male    4043.     3939.  5485."
  },
  {
    "objectID": "03-wrangling.html#from-wide-to-narrow",
    "href": "03-wrangling.html#from-wide-to-narrow",
    "title": "4  Data wrangling",
    "section": "4.13 From wide to narrow",
    "text": "4.13 From wide to narrow\nFor a real-world example, we will make data from:\n\nTree-ring analysis for sustainable harvest of Millettia stuhlmannii in Mozambique, I.A.D.Remane M.D.Therrell, South African Journal of Botany Volume 125, September 2019, Pages 120-125\n\nYou can read a tab-separated file from:\n\ndt <- read_tsv(\"data/annual_increment.txt\") %>% \n  select(Age, contains(\"CAT\"))\n\nNew names:\nRows: 172 Columns: 55\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \"\\t\" dbl\n(37): Age, CAT01, CAT03, CAT04A, CAT05B, CAT06, CAT07, CAT08A, CAT09C, C... lgl\n(18): ...38, ...39, ...40, ...41, ...42, ...43, ...44, ...45, ...46, ......\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `Mean` -> `Mean...32`\n• `Mean` -> `Mean...35`\n• `` -> `...37`\n• `` -> `...38`\n• `` -> `...39`\n• `` -> `...40`\n• `` -> `...41`\n• `` -> `...42`\n• `` -> `...43`\n• `` -> `...44`\n• `` -> `...45`\n• `` -> `...46`\n• `` -> `...47`\n• `` -> `...48`\n• `` -> `...49`\n• `` -> `...50`\n• `` -> `...51`\n• `` -> `...52`\n• `` -> `...53`\n• `` -> `...54`\n• `` -> `...55`\n\n# selecting only age and samples\n\nEach column besides YEAR represents a single tree, and each cell contains the diameter (in cm) of the tree when it was at a given age. To make this in tidy form, we first create the columns tree and diameter:\n\ndt <- dt %>% \n  pivot_longer(-Age, names_to = \"tree\", values_to = \"diameter\")\n\nand then remove the NAs:\n\ndt <- dt %>% filter(!is.na(diameter))\n\nNow it is easy to plot the growth trajectory of each tree (as in Fig. 3 of the original paper):\n\ndt %>% \n  ggplot() + \n  aes(x = Age, y = diameter) + \n  geom_line(aes(group = tree)) + # note---this makes a line for each tree\n  geom_smooth(method = \"loess\") # while the smoothing function considers all trees\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "03-wrangling.html#separate-split-a-column-into-two-or-more",
    "href": "03-wrangling.html#separate-split-a-column-into-two-or-more",
    "title": "4  Data wrangling",
    "section": "4.14 Separate: split a column into two or more",
    "text": "4.14 Separate: split a column into two or more\n\ntest <- tibble(name = c(\"Allesina, Stefano\", \"Kondrashov, Dmitry\", \"Mir, Amatullah\"))\ntest\n\n# A tibble: 3 × 1\n  name              \n  <chr>             \n1 Allesina, Stefano \n2 Kondrashov, Dmitry\n3 Mir, Amatullah    \n\n\n\ntest %>% separate(name, into = c(\"last_name\", \"first_name\"), sep = \", \")\n\n# A tibble: 3 × 2\n  last_name  first_name\n  <chr>      <chr>     \n1 Allesina   Stefano   \n2 Kondrashov Dmitry    \n3 Mir        Amatullah \n\n\nThe complement of separate is called unite."
  },
  {
    "objectID": "03-wrangling.html#separate-rows-from-one-row-to-many",
    "href": "03-wrangling.html#separate-rows-from-one-row-to-many",
    "title": "4  Data wrangling",
    "section": "4.15 Separate rows: from one row to many",
    "text": "4.15 Separate rows: from one row to many\n\ntest <- tibble(id = c(1, 2, 3, 4), records = c(\"a;b;c\", \"c;d\", \"a;e\", \"f\"))\ntest\n\n# A tibble: 4 × 2\n     id records\n  <dbl> <chr>  \n1     1 a;b;c  \n2     2 c;d    \n3     3 a;e    \n4     4 f      \n\n\nTo make it into tidy form, only one record per row:\n\ntest %>% separate_rows(records, sep = \";\")\n\n# A tibble: 8 × 2\n     id records\n  <dbl> <chr>  \n1     1 a      \n2     1 b      \n3     1 c      \n4     2 c      \n5     2 d      \n6     3 a      \n7     3 e      \n8     4 f"
  },
  {
    "objectID": "03-wrangling.html#example-brown-bear-brown-bear-what-do-you-see",
    "href": "03-wrangling.html#example-brown-bear-brown-bear-what-do-you-see",
    "title": "4  Data wrangling",
    "section": "4.16 Example: brown bear, brown bear, what do you see?",
    "text": "4.16 Example: brown bear, brown bear, what do you see?\nThis exercise uses a dataset from GBIF, the Global Biodiversity Information Facility. You can download the latest version yourself by doing the following (but just skip ahead if you want to use the data provided by us).\n\nGo to GBIF and click on Occurrences.\nUnder Scientific Name type in Ursus arctos (brown bear), and hit enter.\nTo download the data, create an account on GBIF\nThen click on Download, and select Simple (which should have a tab-delimited .csv file)\nSave to the data folder in your working folder.\n\nIf you don’t want to go through all this, you can use the downloaded file called Ursus_GBIF.csv that should be in the data folder for this week. The following command loads and displays the contents of the tibble:\n\n# you will need ggmap!\nlibrary(ggmap)\nUrsus_data <- read_tsv(\"data/Ursus_GBIF.csv\")\nglimpse(Ursus_data)\n\nRows: 23,498\nColumns: 50\n$ gbifID                           <dbl> 2382421192, 2382420986, 2382420916, 2…\n$ datasetKey                       <chr> \"88d8974c-f762-11e1-a439-00145eb45e9a…\n$ occurrenceID                     <chr> \"http://arctos.database.museum/guid/U…\n$ kingdom                          <chr> \"Animalia\", \"Animalia\", \"Animalia\", \"…\n$ phylum                           <chr> \"Chordata\", \"Chordata\", \"Chordata\", \"…\n$ class                            <chr> \"Mammalia\", \"Mammalia\", \"Mammalia\", \"…\n$ order                            <chr> \"Carnivora\", \"Carnivora\", \"Carnivora\"…\n$ family                           <chr> \"Ursidae\", \"Ursidae\", \"Ursidae\", \"Urs…\n$ genus                            <chr> \"Ursus\", \"Ursus\", \"Ursus\", \"Ursus\", \"…\n$ species                          <chr> \"Ursus arctos\", \"Ursus arctos\", \"Ursu…\n$ infraspecificEpithet             <chr> NA, NA, NA, \"horribilis\", NA, NA, NA,…\n$ taxonRank                        <chr> \"SPECIES\", \"SPECIES\", \"SPECIES\", \"SUB…\n$ scientificName                   <chr> \"Ursus arctos Linnaeus, 1758\", \"Ursus…\n$ verbatimScientificName           <chr> \"Ursus arctos\", \"Ursus arctos\", \"Ursu…\n$ verbatimScientificNameAuthorship <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ countryCode                      <chr> NA, \"US\", NA, NA, \"US\", NA, NA, \"US\",…\n$ locality                         <chr> \"no specific locality recorded\", \"no …\n$ stateProvince                    <chr> NA, \"Alaska\", NA, NA, \"Colorado\", NA,…\n$ occurrenceStatus                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ individualCount                  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ publishingOrgKey                 <chr> \"4cadac10-3e7b-11d9-8439-b8a03c50a862…\n$ decimalLatitude                  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ decimalLongitude                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ coordinateUncertaintyInMeters    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ coordinatePrecision              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ elevation                        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ elevationAccuracy                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ depth                            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ depthAccuracy                    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ eventDate                        <dttm> 1800-01-01, 1800-01-01, 1800-01-01, …\n$ day                              <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ month                            <dbl> 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1…\n$ year                             <dbl> 1800, 1800, 1800, 1800, 1914, 1938, 1…\n$ taxonKey                         <dbl> 2433433, 2433433, 2433433, 6163845, 2…\n$ speciesKey                       <dbl> 2433433, 2433433, 2433433, 2433433, 2…\n$ basisOfRecord                    <chr> \"PRESERVED_SPECIMEN\", \"PRESERVED_SPEC…\n$ institutionCode                  <chr> \"UCM\", \"UCM\", \"UCM\", \"UCM\", \"UCM\", \"U…\n$ collectionCode                   <chr> \"Mammal specimens\", \"Mammal specimens…\n$ catalogNumber                    <chr> \"UCM:Mamm:5003\", \"UCM:Mamm:3329\", \"UC…\n$ recordNumber                     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ identifiedBy                     <chr> \"T. C. Hart\", \"unknown\", \"unknown\", \"…\n$ dateIdentified                   <dttm> 2013-01-01, 1936-01-01, NA, 2015-10-…\n$ license                          <chr> \"CC0_1_0\", \"CC0_1_0\", \"CC0_1_0\", \"CC0…\n$ rightsHolder                     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ recordedBy                       <chr> \"Collector(s): T. C. Hart\", \"Collecto…\n$ typeStatus                       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ establishmentMeans               <chr> NA, NA, NA, NA, NA, NA, \"MANAGED\", NA…\n$ lastInterpreted                  <dttm> 2019-09-03 22:11:14, 2019-09-03 22:1…\n$ mediaType                        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ issue                            <chr> NA, NA, NA, NA, \"TAXON_MATCH_HIGHERRA…\n\n\nYou see there are 50 variables in the data set, so it may be useful to remove the ones we don’t need. For this exercise, our objective is to plot the occurrences of this species on the world map, so we need two variables for certain: decimalLatitude and decimalLongitude, as well as the BasisofRecord for additional information. Use your tidyverse skills to create a new tibble with only those variables. In addition, remove duplicate records from the tibble.\n\n# your code goes here!\n\nNow we can plot this data set on the world map, using the useful package maps. To plot, use the ggplot() syntax with the following addition:\n\nmapWorld <- borders(\"world\", colour=\"gray50\", fill=\"gray50\") # create a layer of borders\n# now you can call \n# ggplot() + mapWorld + ...\n\nNote the warning message generated by ggplot. Then consider the map with the locations of the brown bear specimens. Do any of them seem strange to you? What may be the explanation behind these strange data point? Now filter out the points that you identified as suspicious and print out their BasisofRecord. Does this suggest an explanation for the strangeness?\n\n# your code goes here!"
  },
  {
    "objectID": "03-wrangling.html#resources",
    "href": "03-wrangling.html#resources",
    "title": "4  Data wrangling",
    "section": "4.17 Resources",
    "text": "4.17 Resources\n\nR for Data Science\nA cool class at U of C in Social Sciences\nData transformation cheat sheet\nDealing with dates cheat sheet\nData import cheat sheet"
  },
  {
    "objectID": "04-distributions.html#objectives",
    "href": "04-distributions.html#objectives",
    "title": "5  Distributions and their properties",
    "section": "5.1 Objectives:",
    "text": "5.1 Objectives:\n\nApply concepts of conditional probability to practical scenarios and questions\nDescribe independence as a concept and apply to data sets\nUse random number generators to simulate various distributions\nBe familiar with the shape of several common distributions and describe the role of their parameters"
  },
  {
    "objectID": "04-distributions.html#independence",
    "href": "04-distributions.html#independence",
    "title": "5  Distributions and their properties",
    "section": "5.2 Independence",
    "text": "5.2 Independence\n\n5.2.1 Conditional probability\nIn the basic definitions of probability, we considered the probabilities of each outcome and events separately. Let us consider how information about one event affects the probability of another event. The concept is that if one event (let’s call it \\(B\\)) is true, unless the event is the entire space, it rules out some other outcomes. This may affect the probability of other events (e.g., \\(A\\)) in the sample space, because knowledge of \\(B\\) may rule out some of the outcomes in \\(A\\) as well. Here is the formal definition:\n\nDefinition: For two events \\(A\\) and \\(B\\) in a sample space \\(\\Omega\\) with a probability measure \\(P\\), the probability of \\(A\\) given \\(B\\), called the conditional probability, defined as:\n\n\\(P(A \\vert B) = \\frac{P(A \\cap B)}{P(B)}\\)\n\nwhere \\(A \\cap B\\) or \\(A, B\\) is the intersection of events \\(A\\) and \\(B\\), also known as “\\(A\\) and \\(B\\)”—the event consisting of all outcomes that are in both \\(A\\) and \\(B\\).\n\nIn words, given the knowledge that an event \\(B\\) occurs, the sample space is restricted to the subset \\(B\\), which is why the denominator in the definition is \\(P(B)\\). The numerator encompasses all the outcomes we are interested in, (i.e., \\(A\\)), but since we are now restricted to \\(B\\), the numerator consists of all the outcomes of \\(A\\) which are also in \\(B\\), or \\(A \\cap B\\). The definition makes sense in two extreme cases: if \\(A = B\\) and if \\(A\\) and \\(B\\) are mutually exclusive:\n\\(P(B\\vert B) = P(B \\cap B) /P(B) = P(B)/P(B) = 1\\)\nIf \\(P(A\\cap B) = 0\\), then \\(P(A\\vert B) = 0/P(B) = 0\\)\nImportant note: one common source of confusion about conditional probability is the difference between the probability of \\(A\\) and \\(B\\) and the probability of \\(A\\) given \\(B\\). This is a result of the discrepancy between everyday word usage and mathematical terminology, because the statement “what are the odds of finding a tall person who also likes tea?” is hard to distinguish from “what are the odds that a person who is tall likes tea?” The critical difference between these two statements is that in the former you start out with no information and are picking out a person from the entire population, while is in the latter you start out with the knowledge that a person is tall.\nExample: In the classic Mendelian pea experiment, each diploid organism carries two alleles. The allele \\(A\\) is dominant and results in pink flowers, while \\(a\\) is recessive and results in white flowers. There are three possible genotypes (\\(AA\\), \\(Aa\\), \\(aa\\)) and two phenotypes (Pink or White). For the questions below, assume that two heterozygous pea plants (each having genotype \\(Aa\\)) are crossed, producing the following table of genotypes with equal probabilities in each cell:\n\n\n\nparent\nA\na\n\n\n\n\nA\nAA (pink)\nAa (pink)\n\n\na\nAa (pink)\naa (white)\n\n\n\n\nWhat is the probability that a plant with pink flowers has genotype \\(AA\\)? Write this down in terms of conditional probability and explain how it’s different from the probability of a plant having both pink flower and genotype \\(AA\\).\nWhat is the probability that a plant with genotype \\(AA\\) has pink flowers? Again, write down the conditional probability and explain how it’s different from the probability of a plant having both pink flower and genotype \\(AA\\).\n\nLesson: in general, \\[P(X \\vert  Y ) \\neq P(Y \\vert  X)\\]\n\n\n5.2.2 Independence\nIndependence is a fundamental concept in probability that may be misinterpreted without careful thinking. Intuitively, two events (or random variables) are independent if one does not influence the other. More precisely, it means that the probability of one event is the same regardless of whether the other one happens or not. This is expressed precisely using conditional probabilities:\n\nDefinition: Two events \\(A\\) and \\(B\\) in a sample space \\(\\Omega\\) with a probability measure \\(P\\) are independent if \\(P(A\\vert B) = P(A)\\), or equivalently if \\(P(B\\vert A) = P(B)\\).\n\nIndependence is not a straightforward concept. It may be confused with mutual exclusivity, as one might surmise that if \\(A\\) and \\(B\\) have no overlap, then they are independent. That however, is false by definition, since \\(P(A\\vert B)\\) is 0 for two mutually exclusive events. The confusion stems from thinking that if \\(A\\) and \\(B\\) are non-overlapping, then they do not influence each other. But the notion of influence in this definition is about information; so if \\(A\\) and \\(B\\) are mutually exclusive, the knowledge that one of them occurs has an influence of the probability of the other one occurring, specifically it rules the other one out.\nExample: In the sample space of weather phenomena, are the events of snowing and hot weather independent?\nExample: A slightly more subtle example, the lifetime risk of breast cancer is about 1 in 8 for women and about 1 in 1000 for men. Are sex and breast cancer independent?\n\n\n5.2.3 Usefulness of independence\nIndependence is a mathematical abstraction, and reality rarely provides us with perfectly independent variables. But it’s a very useful abstraction in that it enables calculations that would be difficult or impossible to carry out without this assumption.\nFirst, independence allows for calculating the probability of two events or two random variables simultaneously. This is a straightforward consequence of the definition conditional probability (first equality) and independence (second equality):\n\\[\\frac{P(A \\cap B)}{P(B)}= P(A\\vert B) = P(A)\\] Multiplying both sides by \\(P(B)\\), we get the product rule of independence, perhaps the most widely used formula in applied probability:\n\\[P(A \\cap B) = P(A)P(B)\\]\nExample: The probability that two randomly selected individuals have red hair–assuming that the occurrence of this trait is independent–is the square of the probability of red hair in one individual. (Note that this is never exactly the case for a finite population—why?)\nExample: The probability of two alleles of two separate genes (call them A and B) occurring on the same gamete may be independent or may be linked. In population genetics, the concept of linkage disequilibrium describes the extent of such linkage; for example, alleles that are located on separate chromosomes (in eukaryotes) are usually not linked and their occurrence is independent. The coefficient of linkage disequilibrium is defined as the difference between what is expected from independence and the actual probability of both alleles being present: \\[D_{AB} = P(A \\cap B) - P(A)P(B) \\] \\(P(A)\\) and \\(P(B)\\) are the frequencies of the two respective alleles (haplotypes) in the population, while \\(P(A \\cap B)\\) is the frequency of the haplotypes occurring together in the same copy of the genome (that is, on the same gamete). For two independent loci, \\(D_{AB} = 0\\), while for loci that usually occur together the coefficient will be positive, and its magnitude is influenced both by physical proximity of the loci on a chromosome, the evolutionary history of the species, and other factors.\nAnother important consequence of independence has to do with the sum of two independent random variables. The expectation of the sum of any random variables is linear, which can be demonstrated using some work with sums, starting from the definition of expectation (the same can be shown for continuous random variables, using integrals instead of sums):\n\\[E(X + Y) = \\sum_i \\sum_j (x_i + y_j) P(x_i, y_j) =\\]\n\\[= \\sum_i \\sum_j x_iP(x_i, y_j) + \\sum_i \\sum_j y_j P(x_i, y_j) = \\sum_i x_i \\sum_j P(x_i, y_j) + \\sum_j y_j \\sum_i  P(x_i, y_j) = \\] Summing up a joint probability distribution over all values of one variable removes that variable, \\(\\sum_j P(x_i, y_j) = P(x_i)\\) \\(\\sum_i P(x_i, y_j) = P(y_j)\\), so this leave us with the two separate expected values:\n\\[= \\sum_i x_i P(x_i) + \\sum_j y_j P(y_j) = E(X) + E(Y)\\] However, this is not the case for the variance in general (using \\(E_X\\) and \\(E_Y\\) to indicate the expected values of \\(X\\) and \\(Y\\) to reduce the number of parentheses):\n\\[\\text{Var}(X+Y) = E \\left[ (X+Y)-(E_X+E_Y) \\right]^2 = \\] \\[=E[ (X-E_X)^2 +(Y-E_Y)^2 - 2(X-E_X)(Y-E_Y)] =  \\] \\[=E (X-E_X)^2 +  E(Y-E_Y)^2 - 2 E[(X-E_X)(Y-E_Y)]  = \\] The first two terms are the respective variances, while the third term is called the covariance of \\(X\\) and \\(Y\\):\n\\[= \\text{Var}(X) + \\text{Var}(Y) - 2 \\text{Cov}(X,Y) \\] Covariance describes how much two random variables vary together, or more precisely, how much they deviate from their respective means in the same direction. Thus it should be reasonable to think that two independent random variables have covariance 0, which is demonstrated as follows:\n\\[E[(X-E_X)(Y-E_Y)] = E(XY) - E_Y E_X - E_YE_X + E_XE_Y = E(XY) - E_X E_Y  \\]\nWe can write the expression for the expectation of the random variable comprised of all pairs of values of \\(X\\) and \\(Y\\), using the fact that for two independent random variables, \\(P(x_i,y_j) = P(x_i)P(y_j)\\) for all values \\(x_i\\) and \\(y_j\\):\n\\[E(XY) = \\sum_i \\sum_j x_iy_j P(x_i,y_j) = \\sum_i x_i P(x_i) \\sum_j y_j P(y_j) = E_X E_Y\\] The calculation for two continuous random variables is analogous, only with integrals instead of sums.\nThis demonstrates that the covariance of two independent random variables is 0, and thus that the variance of a sum of two independent random variables is the sum of the two separate variables.\nExample: This property of variance is often used in analysis of noise or error in data. It is commonly assumed in least squares fitting that noise in data is independent of the signal or model underlying the data. This is the foundation for statements like “this linear regression explains 80% of the variance in the data.”"
  },
  {
    "objectID": "04-distributions.html#probability-distribution-examples-discrete",
    "href": "04-distributions.html#probability-distribution-examples-discrete",
    "title": "5  Distributions and their properties",
    "section": "5.3 Probability distribution examples (discrete)",
    "text": "5.3 Probability distribution examples (discrete)\nThe following are examples of distributions of random variables with discrete values. The first two have finite support (finitely many values) while the second two have infinite support.\n\n5.3.1 Uniform\nThe simplest probability distribution in which every value has the same probability (and one which is sometimes called “purely random” even though any random variable with any distribution is just as random). The probability distribution for a uniform random variable with \\(n\\) values is \\(P(x) = 1/n\\) for any value \\(x\\).\n\nlow <- 0 # minimum value\nhigh <- 10 # maximum value\nvalues <- low:high # vector of discrete values of the RV\nnum <- length(values)\nprobs <- rep(1 / num, num) # uniform mass function vector\nbarplot(probs, names.arg = values, xlab = 'values', ylab = 'probability',\n        main = paste(\"uniform  distribution on integers from \", low, \"to \", high))\n\n\n\n\n\nunif.exp <- sum(values*probs)\npaste(\"The expected value of uniform distribution is\", unif.exp)\n\n[1] \"The expected value of uniform distribution is 5\"\n\nunif.var <- sum((unif.exp - values)^2*probs)\npaste(\"The variance of uniform distribution is\", unif.var)\n\n[1] \"The variance of uniform distribution is 10\"\n\n\nExercise: experiment with the low and high values to see how the expectation and variance depend on them. Can you postulate a relationship without looking it up?\n\n\n5.3.2 Binomial\nBinary or Bernoulli trials have two discrete outcomes (mutant/wild-type, win/lose, etc.). The number of “successes” out of a sequence of \\(n\\) independent binary trials with probability of success \\(p\\) is described by the binomial distribution.\n\nn <- 10 # the number of trials\np <- 0.3 # the probability of success in one trial\nvalues <- 0:n # vector of discrete values of the binomial\nprobs <- dbinom(values, n, p)\nbarplot(probs, names.arg = values, xlab = 'values', ylab = 'probability',\n        main = paste(\"binomial distribution with n=\", n, \"and p=\", p))\n\n\n\n\n\nbin.exp <- sum(values*probs)\npaste(\"The expected value of binomial distribution is\", bin.exp)\n\n[1] \"The expected value of binomial distribution is 3\"\n\nbin.var <- sum((bin.exp - values)^2*probs)\npaste(\"The variance of binomial distribution is\", bin.var)\n\n[1] \"The variance of binomial distribution is 2.1\"\n\n\nExercise: Try different values of \\(n\\) and \\(p\\) and postulate a relationship with the expectation and variance.\n\n\n5.3.3 Geometric\nThe random variable is the first “success” in a string of independent binary trials and the distribution describes the probability of any non-negative value. It may be pretty intuitive that since all the trials have the same probability of success, the distribution with have a geometric (exponential) form—try to figure out the exact formula for the probability density without looking it up!\n\np <- 0.3 # the probability of success\nlow <- 0 # minimum value\nhigh <- 20 # maximum value\nvalues <- low:high # vector of discrete values of the RV\nprobs <- dgeom(values, p)\nbarplot(probs, names.arg = values, xlab = 'values', ylab = 'probability', main = paste(\"geometric distribution with p=\", p))\n\n\n\n\n\ngeom.exp <- sum(values*probs)\npaste(\"The expected value of geometric distribution is\", geom.exp)\n\n[1] \"The expected value of geometric distribution is 2.32030059650472\"\n\ngeom.var <- sum((geom.exp - values)^2*probs)\npaste(\"The variance of geometric distribution is\", geom.var)\n\n[1] \"The variance of geometric distribution is 7.52697882945385\"\n\n\nExercise: Calculate the expectations and variances for different values of \\(p\\) and report how they are related.\n\n\n5.3.4 Poisson\nSuppose that there is a discrete process that occurs with some average rate \\(\\lambda\\), which describes the expected number of occurrences of these events in a unit of time. The Poisson random variable is the number of such occurrences, and the distribution describes the probability of any non-negative value.\n\nlow <- 0 # minimum value\nhigh <- 20 # maximum value\nlambda <- 10 # Poisson rate\nvalues <- low:high # vector of discrete values of the RV\nprobs <- dpois(values, lambda)\nbarplot(probs, names.arg = values, xlab = 'values', ylab = 'probability',\n        main = paste(\"Poisson distribution with lambda=\", lambda))\n\n\n\n\n\npois.exp <- sum(values*probs)\npaste(\"The expected value of Poisson distribution is\", pois.exp)\n\n[1] \"The expected value of Poisson distribution is 9.96545658024143\"\n\npois.var <- sum((pois.exp - values)^2*probs)\npaste(\"The variance of Poisson distribution is\", pois.var)\n\n[1] \"The variance of Poisson distribution is 9.77875058489889\"\n\n\nExercise: Calculate the expectations and variances for different values of \\(\\lambda\\) and report how they are related."
  },
  {
    "objectID": "04-distributions.html#probability-distribution-examples-continuous",
    "href": "04-distributions.html#probability-distribution-examples-continuous",
    "title": "5  Distributions and their properties",
    "section": "5.4 Probability distribution examples (continuous)",
    "text": "5.4 Probability distribution examples (continuous)\nIn the following examples with continuous variables we cannot calculate the means and variances directly from the density function. One way to do it is to produce a sample using the random number generator and calculate the mean and variance of that sample.\n\n5.4.1 Uniform\nThe continuous equivalent of the discrete uniform distribution.\n\nlow <- 0 # minimum value\nhigh <- 10 # maximum values\nnumber <- 100\nvalues <- seq(low, high, length.out = number) # vector of discrete values of the RV\nprobs <- dunif(values, min=low, max = high)\nplot(values, probs, t='l', xlab = 'values', ylab = 'density',\n        main = paste(\"Uniform distribution on interval from \", low, \"to \", high))\n\n\n\n\n\nn <- 1000 # sample size\nunif.sample <- runif(n, low, high) # generate sample\nunif.exp <- mean(unif.sample)\npaste(\"The expected value of uniform distribution is\", unif.exp)\n\n[1] \"The expected value of uniform distribution is 5.06700132340891\"\n\nunif.var <- var(unif.sample)\npaste(\"The variance of uniform distribution is\", unif.var)\n\n[1] \"The variance of uniform distribution is 8.15401106748224\"\n\n\nExercise: experiment with the width of the interval to see how it affects the expectation and variance.\n\n\n5.4.2 exponential\nThe random variable describes the length of time between independent discrete events occurring with a certain rate, like we saw in the Poisson distribution.\n\nlow <- 0 # minimum value\nhigh <- 20 # maximum values\nnumber <- 100\nr <- 0.5\nvalues <- seq(low,high,length.out = number) # vector of discrete values of the RV\nprobs <- dexp(values, r)\nplot(values, probs, t='l', xlab = 'values', ylab = 'density',\n        main = paste(\"Exponential distribution with rate=\", r))\n\n\n\n\n\nn <- 1000 # sample size\nexp.sample <- rexp(n, r) # generate sample\nexp.exp <- mean(exp.sample)\npaste(\"The expected value of exponential distribution is\", exp.exp)\n\n[1] \"The expected value of exponential distribution is 2.04473717863248\"\n\nexp.var <- var(exp.sample)\npaste(\"The variance of exponential distribution is\", exp.var)\n\n[1] \"The variance of exponential distribution is 4.01811758498252\"\n\n\nExercise: What is the relationship between the rate and the expectation and variance?\n\n\n5.4.3 normal distribution\nThe normal distribution, sometimes written \\(N(\\mu, \\sigma)\\) comes up everywhere (e.g., in the limit of the Poisson distribution for large \\(n\\)). The two parameters are simply the mean and the standard deviation. The reason for its ubiquity is that it is that any sum of a large number of independent random variables converges to the normal, formalized by the Central Limit Theorem:\n\nFor a set of \\(n\\) IID random variables \\(\\{X_i\\}\\) with mean \\(\\mu\\) and standard deviation \\(\\sigma\\), the sample mean \\(\\bar X_n\\) has the property: \\[\n\\lim_{n \\to \\infty} = \\frac{\\bar X_n - \\mu}{\\sigma} = N(0,1)\n\\] where \\(N(0,1)\\) stands for the normal distribution with mean 0 and standard deviation 1.\n\n\nlow <- 0 # minimum value\nhigh <- 10 # maximum values\nnumber <- 100\nmu <- 5\nsigma <- 0.5 \nvalues <- seq(low,high,length.out = number) # vector of discrete values of the RV\nprobs <- dnorm(values, mu, sigma)\nplot(values, probs, t='l',xlab = 'values', ylab = 'density',\n        main = paste(\"Normal distribution with mean=\", mu, \"and sigma=\", sigma))\n\n\n\n\n\nn <- 1000 # sample size\nnorm.sample <- rnorm(n, mu, sigma) # generate sample\nnorm.exp <- mean(norm.sample)\npaste(\"The expected value of normal distribution is\", norm.exp)\n\n[1] \"The expected value of normal distribution is 5.01025667633093\"\n\nnorm.var <- var(norm.sample)\npaste(\"The variance of normal distribution is\", norm.var)\n\n[1] \"The variance of normal distribution is 0.239890850293582\""
  },
  {
    "objectID": "04-distributions.html#application-of-normal-distribution-confidence-intervals",
    "href": "04-distributions.html#application-of-normal-distribution-confidence-intervals",
    "title": "5  Distributions and their properties",
    "section": "5.5 Application of normal distribution: confidence intervals",
    "text": "5.5 Application of normal distribution: confidence intervals\nThe most important use of the normal distribution has to do with estimation of means, because the normal distribution describes the sampling distributions of means of IID samples. The mean of that sampling distribution is the mean of the population distribution that is being sampled, and the standard deviation is called the standard error and is related to the standard deviation of the population \\(\\sigma_X\\) as follows: \\(\\sigma_{SE} = \\sigma/n\\), where \\(n\\) is the sample size.\n\nnumsamples <- 1000\nsize <- 100\n# compute mean for different samples\nsamplemeans <- replicate(n = numsamples, mean(sample(0:10, size, replace = TRUE)))\nbreak_points <- seq(min(samplemeans), max(samplemeans), \n                    (max(samplemeans) - min(samplemeans)) / 20)\nhist(samplemeans, breaks = break_points, freq = FALSE, \n     cex.axis = 1.5, cex.lab = 1.5,\n     main= '1000 means of samples of size 100')\nsigma <- 10 / sqrt(12) / sqrt(size)\nmu <- 5\nrange <- seq(min(samplemeans), max(samplemeans), sigma / 100)\nlines(range, \n      dnorm(range, mu, sigma),\n      t = 'l', lwd = 3, col = 2, lty = 1, cex.axis = 1.5, cex.lab = 1.5)\n\n\n\n\nExercise: Try using different distributions from above and see if the sample means still converge to the normal distribution.\nThe following script calculates a confidence interval based on a sample.\n\n# Computing confidence intervals\nqnorm(0.5) # the value that divides the density function in two\n\n[1] 0\n\nqnorm(0.95) # the value such that 95% of density is to its left \n\n[1] 1.644854\n\nsize <- 100 # sample size\nalpha <- 0.95 # significance level\nsample <- runif(size)\ns <- sd(sample) / sqrt(size) # standard error\nz <- qnorm((1 - alpha) / 2) # z-value\nleft <- mean(sample) + s * z\nright <- mean(sample) - s * z\nprint(right)\n\n[1] 0.5438645\n\nprint(left)\n\n[1] 0.425083\n\n\nExercise: Modify that script to report whether the confidence interval captures the true mean. Use a loop structure (as in the script above) to generate 1000 sample means and report how many of them are within the theoretical confidence interval. Does this match the fraction you expect from the significance level? Try different significance levels and sample sizes and report what you discover."
  },
  {
    "objectID": "04-distributions.html#identifying-type-of-distribution-in-real-data",
    "href": "04-distributions.html#identifying-type-of-distribution-in-real-data",
    "title": "5  Distributions and their properties",
    "section": "5.6 Identifying type of distribution in real data",
    "text": "5.6 Identifying type of distribution in real data\nLet us consider the penguin data set again:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nstr(penguins)\n\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\n\nA simple way to visualize a distribution is to plot a histogram: data are binned, and the height of the bin represents counts (or frequencies). Here are the histograms of distributions of flipper lengths of all the species of penguins separated by sex:\n\nggplot(penguins) +\n  aes(x = flipper_length_mm, color = sex, fill=sex) + geom_histogram(alpha = 0.5, position = \"identity\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nAnd here are the histograms of flipper lengths separated by species:\n\nggplot(penguins) +\n  aes(x = flipper_length_mm, color = species, fill=species) + geom_histogram(alpha = 0.5, position = \"identity\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nTo decide systematically which of these distributions are closer to a theoretical distribution is via a Quantile-Quantile (QQ) plot, which plots the quantile value from a sample against the quantiles from a given distribution with best-fit parameters. If the data were to follow the distribution closely, you should find all the points lying on the identity line. For example, here is how to compare a data set drawn from the normal random number generator with the normal distribution:\n\nlibrary(fitdistrplus)\n\nLoading required package: MASS\n\n\n\nAttaching package: 'MASS'\n\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\n\nLoading required package: survival\n\ntest_data <- tibble(x = rnorm(n = 500, mean = 3, sd = 1.5))\n# example: find best-fitting Normal\nmy_normal <- fitdistr(test_data$x, densfun = \"normal\")\n# note the slight discrepancies\nprint(my_normal)\n\n      mean          sd    \n  2.97208363   1.46255998 \n (0.06540767) (0.04625021)\n\nggplot(test_data, aes(sample = x)) +\n  stat_qq(distribution = qnorm, dparams = my_normal$estimate) +\n  stat_qq_line(distribution = qnorm, dparams = my_normal$estimate) +\n  geom_abline(intercept = 0, slope = 1, linetype = 2, col = \"red\") +\n  ggtitle(\"Q-Q plot assuming best-fitting Normal distribution\")\n\n\n\n\nNow let us assess the “normality” of the flipper length data separated by sex and separated by species:\n\ndataset <- penguins %>%  dplyr::filter(sex == 'female') %>% drop_na() %>%  dplyr::select(flipper_length_mm) \nmy_normal <- fitdistr(x = as_vector(dataset), densfun = \"normal\")\n# note the slight discrepancies\nprint(my_normal)\n\n      mean           sd     \n  197.3636364    12.4628373 \n (  0.9702306) (  0.6860566)\n\nggplot(dataset, aes(sample = flipper_length_mm)) +\n  stat_qq(distribution = qnorm, dparams = my_normal$estimate) +\n  stat_qq_line(distribution = qnorm, dparams = my_normal$estimate) +\n  geom_abline(intercept = 0, slope = 1, linetype = 2, col = \"red\") +\n  ggtitle(\"Q-Q plot assuming best-fitting Normal distribution of flipper lenth for female penguins\")\n\n\n\ndataset <- penguins %>%  dplyr::filter(sex == 'male') %>% drop_na() %>%  dplyr::select(flipper_length_mm) \nmy_normal <- fitdistr(x = as_vector(dataset), densfun = \"normal\")\n# note the slight discrepancies\nprint(my_normal)\n\n      mean           sd     \n  204.5059524    14.5045137 \n (  1.1190475) (  0.7912861)\n\nggplot(dataset, aes(sample = flipper_length_mm)) +\n  stat_qq(distribution = qnorm, dparams = my_normal$estimate) +\n  stat_qq_line(distribution = qnorm, dparams = my_normal$estimate) +\n  geom_abline(intercept = 0, slope = 1, linetype = 2, col = \"red\") +\n  ggtitle(\"Q-Q plot assuming best-fitting Normal distribution of flipper lenth for male penguins\")\n\n\n\n\nIn contrast with the simulated data, here the data points and the black line that attempts to capture them is quite different from the identity line (red). This means this distribution is for from normal, as can be seen from the histograms of the flipper lengths grouped by sex."
  },
  {
    "objectID": "05-hypothesis.html#test-results-vs.-the-truth",
    "href": "05-hypothesis.html#test-results-vs.-the-truth",
    "title": "6  Hypothesis testing",
    "section": "6.1 Test results vs. the truth",
    "text": "6.1 Test results vs. the truth\nA statistical test begins by stating the null hypothesis, usually one that is expected, or that shows no effect: for example, that two samples come from a distribution with the same mean, or that a rare allele has frequency of less than 0.1. One may state the alternative hypothesis explicitly, although it’s usually the logical converse of the null, i.e., the two samples have different population means, or the allele has frequency greater than 0.1.\nAfter the hypothesis is stated, the data are collected and are used to test the hypothesis. By default, the null hypothesis is assumed to be true, and the test assesses whether the data provide sufficient evidence against the null hypothesis—in which case the null hypothesis is rejected. There is an adversarial relationship: either the data knock off the hypothesis, or else they fail to do so. Standard terminology reflects this somewhat counter-intuitive setup: rejecting the null hypothesis is called a positive test result, while not rejecting it is called a negative result.\n\n\n\n\n\n\nThe fundamental assumption of this process is that the truth value of the hypothesis is set prior to the collection of data. For example, if one could observe all of the genomes, the frequency of the allele would be known exactly, so this truth exists prior to the hypothesis testing. Because we typically can only observe a sample (and not the entire universe of data), we might end up erroneously rejecting the null hypothesis when it is in fact true, or not rejecting it when it is in fact false. The possible outcomes of a test can be organized in the table:\n\n\n\nH0\nTrue\nFalse\n\n\n\n\nReject\nFalse Positive\nTrue Positive\n\n\nNot Reject\nTrue Negative\nFalse Negative\n\n\n\nThe values at the top describe the truth status of the hypothesis, while the decisions in the left column are the result of using data to test the hypothesis. Note: the words false and true in describing the test result do not refer to the hypothesis, but to whether the result is correct! For example, if the frequency of the allele were 0.09 but the test for the hypothesis that the frequency is less than 0.1 resulted in rejecting that hypothesis, that would be a false positive result (the null hypothesis is true but the test rejected it.)"
  },
  {
    "objectID": "05-hypothesis.html#types-of-errors",
    "href": "05-hypothesis.html#types-of-errors",
    "title": "6  Hypothesis testing",
    "section": "6.2 Types of errors",
    "text": "6.2 Types of errors\nAs mentioned above, sometimes a hypothesis test makes the wrong decision, which is called an error. There are two different kinds of errors: rejecting a true null hypothesis, called a Type I error, and not rejecting a false null hypothesis, called a Type II error.\nExample: In the case above of testing for the same mean: if the samples are taken from distributions with the same mean, but the hypothesis is rejected, this is called a false positive (Type I error). If the samples come from distributions with different means, but the hypothesis is not rejected, this is called a false negative (Type II error.)\nAs a scientist, would you rather make a Type I error (make an erroneous discovery), or a Type II error (fail to make a discovery)?"
  },
  {
    "objectID": "05-hypothesis.html#test-parameters-and-p-values",
    "href": "05-hypothesis.html#test-parameters-and-p-values",
    "title": "6  Hypothesis testing",
    "section": "6.3 Test parameters and p-values",
    "text": "6.3 Test parameters and p-values\nThe sensitivity of a test is the probability of obtaining the positive result, given a false hypothesis; and the specificity of a test is the probability of obtaining the negative result, given a true hypothesis. The Type I error rate is the probability of obtaining the positive result, given a true hypothesis (complementary to specificity), and the Type II error rate is the probability of obtaining the negative result, given a false hypothesis (complementary to sensitivity).\nAll four parameters (rates) of a binary test are summarized as follows: \\[\\text{Sen} = \\frac{TP}{TP+FN};  \\; \\text{Spec} = \\frac{TN}{TN+FP}\\] \\[\\text{FPR} = \\frac{FP}{TN+FP};  \\; \\text{FNR} = \\frac{FN}{TP+FN}\\] The notation TP, FP, etc. represents the frequency or count of true positives, false positives, etc., out of a large number of experiments with known truth status of the hypothesis.\nKnowledge of sensitivity and specificity determine the Type I and Type II error rates of a test since they are complementary events.\nOf course, it is desirable for a test to be both very sensitive (reject false null hypotheses, detect disease, convict guilty defendants) and very specific (not reject true null hypotheses, correctly identify healthy patients, acquit innocent defendants), but no test is perfect, and sometimes it makes the wrong decision. This is where statistical inference comes into play: given some information about these parameters, a statistician can calculate the error rate in making different decisions.\nThe probability that a given data set is produced from the model of the null hypothesis is called the p-value of a test. More precisely:\n\nFor a given data set \\(D\\) and a null hypothesis \\(H_0\\), the p-value is the probability of obtaining a result as far from expectation or farther than the observed data, given the null hypothesis.\n\nThe p-value is the most used, misused, and even abused quantity in statistics, so please think carefully about its definition. One reason this notion is frequently misused is because it is very tempting to conclude that the p-value is the probability of the null hypothesis being true, based on the data. That is not the case! The definition has the opposite direction of conditionality—we assume that the null hypothesis is true, and based on that calculate the probability of obtaining a pattern as extreme or more extreme than what observed in the data. There is no way (according to classical “frequentist” statistics) of assigning a probability to the truth of a hypothesis, because it is not the result of an experiment.\nTypically, one sets a critical threshold bounding the probability of making a Type I error in a test to a “small” number (often, \\(\\alpha = 0.05\\) or \\(0.01\\)), and calls the result of a test “significant” if the p-value is less than \\(\\alpha\\).\n\n\n\n\n\n\nFor example, consider samples of size \\(n\\) taken from two normal distributions (with unobserved means \\(\\mu_1\\), \\(\\mu_2\\)). We can generate the data:\n\ngenerate_samples <- function(n, mu1, mu2){\n  return(data.frame(sample1 = rnorm(n = n, mean = mu1, sd = 1),\n               sample2 = rnorm(n = n, mean = mu2, sd = 1)))\n}\n\nmy_sample <- generate_samples(1000, 1, 1.01)\n\nand use a Student’s t-test to probe whether the means differ:\n\n# two-tailed (diff in means = 0)\n# Student's (assumes equal variances)\n# (for Welch's t-test, var.equal = FALSE)\nt.test(my_sample$sample1, \n       my_sample$sample2,\n       var.equal = TRUE)\n\n\n    Two Sample t-test\n\ndata:  my_sample$sample1 and my_sample$sample2\nt = 1.5083, df = 1998, p-value = 0.1316\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.02026072  0.15522528\nsample estimates:\nmean of x mean of y \n1.0426856 0.9752034 \n\n\nExercise: Can you detect a “significant difference in means” (assuming \\(\\alpha = 0.05\\))? What if you take a much larger sample? What if the difference in means is more pronounced?"
  },
  {
    "objectID": "05-hypothesis.html#multiple-comparisons",
    "href": "05-hypothesis.html#multiple-comparisons",
    "title": "6  Hypothesis testing",
    "section": "6.4 Multiple comparisons",
    "text": "6.4 Multiple comparisons\nWhat if we were to produce several samples? E.g., measure difference between males and females reflectance in birds at several locations? Suppose that in fact the reflectance is the same for male and female (\\(\\mu_1 = \\mu_2 = 1\\)), that for each location we capture and measure 10 males and 10 females, and that we repeat this across 2500 locations.\nFirst, let’s write a little function that returns the p-values for the t-test\n\nget_p_value_t_test <- function(my_sample){\n  test_results <- t.test(my_sample$sample1, \n                         my_sample$sample2, \n                         var.equal = TRUE)\n  return(test_results$p.value)\n}\n\nand now simulate the data:\n\npvalues <- replicate(n = 2500, \n                     expr = get_p_value_t_test(generate_samples(10, 1, 1)))\n\nHow many times do we detect a “significant difference in reflectance” when setting \\(\\alpha = 0.05\\) (even though we know that males and females are sampled from the same distribution)?\n\nsum(pvalues < 0.05)\n\n[1] 123\n\n\nYou should get a number of “significant” tests that is about \\(2500 \\cdot 0.05 = 125\\). In fact, the distribution of p-values when the data are sampled from the null hypothesis is approximately uniform:\n\nhist(pvalues)\n\n\n\n\nThis means that when you are performing multiple tests, some will turn out to find “significant” differences even when there are none. Again, this is better summarized by xkcd:\n\n\n\n\n\n\nExercise: what happens to the distribution of p-values if the means are quite different (e.g., \\(\\mu_1 = 1\\), \\(\\mu_2 = 0.9\\))?"
  },
  {
    "objectID": "05-hypothesis.html#corrections-for-multiple-comparisons",
    "href": "05-hypothesis.html#corrections-for-multiple-comparisons",
    "title": "6  Hypothesis testing",
    "section": "6.5 Corrections for multiple comparisons",
    "text": "6.5 Corrections for multiple comparisons\nThe main approach to deal with the problem of multiple comparisons is to adjust the p-values. For example, in Bonferroni correction one consider as significant test results whose associated p-value is \\(\\leq \\alpha / n\\), where \\(n\\) is the number of tests performed (equivalently, redefine the p-values as \\(p' = \\min(p n, 1)\\). Clearly, this correction becomes overly conservative when the number of tests is large. For example, in biology:\n\nGene expression In a typical microarray experiment, we contrast the differential expression of tens of thousands of genes in treatment and control tissues.\nGWAS In Genomewide Association Studies we want to find SNPs associated with a given phenotype. It is common to test tens of thousands or even millions of SNPs for significant associations.\nIdentifying binding sites Identifying candidate binding sites for a transcriptional regulator requires scanning the whole genome, yielding tens of millions of tests.\n\nThe funniest example of this problem is the fMRI of the dead salmon: a dead salmon “was shown a series of photographs depicting human individuals in social situations with a specified emotional valence. The salmon was asked to determine what emotion the individual in the photo must have been experiencing.” The researchers showed that if multiple comparisons were not accounted for, one would detect a cluster of active voxels in the brain, with a cluster-level significance of p = 0.001.\nThe widespread use of GWAS and other techniques that are trying to find a needle in a haystack led to the development of many interesting techniques. Here an interesting account.\nAdjusting p-values in R:\n\noriginal_pvalues <- c(0.01, 0.07, 0.1, 0.44)\np.adjust(original_pvalues, method = \"bonferroni\")\n\n[1] 0.04 0.28 0.40 1.00"
  },
  {
    "objectID": "05-hypothesis.html#two-problems-with-science",
    "href": "05-hypothesis.html#two-problems-with-science",
    "title": "6  Hypothesis testing",
    "section": "6.6 Two problems with science",
    "text": "6.6 Two problems with science\n\n6.6.1 Selective reporting\nWe have seen above that setting \\(\\alpha = 0.05\\) means that we are going to make false discoveries at this rate. In science, we prefer publishing positive results—negative results are difficult to publish and attract little attention. Suppose that 20 research groups around the world set out to test the same hypothesis, which is false. Then there is a good chance at least one group will reject the null hypothesis, and pursue publication for their “discovery”. The tendency to put negative studies in the files drawer and forget about them causes the so called publication bias (aka selective reporting): by favoring positive results over negative ones, we greatly increase the chance that our conclusions are wrong. Note that these would cause the results of the paper to be largely impossible to reproduce, and the reproducibility crisis in the sciences is partially due to selective reporting.\n\n\n6.6.2 P-hacking\nOne big violation of good experimental design is known as p-value “fishing” (or p-hacking): repeating the experiment, or increasing the sample size, until the p-value is below the desired threshold, and then stopping the experiment. Using such defective design dramatically lowers the likelihood that the result is a true positive. And of course there is actual fraud, or fudging of data, which contributes to some bogus results.\nAn insidious cousin of p-hacking was dubbed by Andrew Gelman “the garden of forking paths” in this paper. The issue arises in complex problems with multi-variable noisy datasets (aren’t all interesting ones like that?) Essentially, with many choices and degrees of freedom in a problem, it is easy to convince yourself that the choice you made (data cleaning, parameter combinations, etc.) is the correct one because it gives the strongest results. Without a clearly stated hypothesis, experimental design, and data processing details prior to data collection, this enchanted garden can lead even a well-intentioned researcher astray."
  },
  {
    "objectID": "05-hypothesis.html#readings",
    "href": "05-hypothesis.html#readings",
    "title": "6  Hypothesis testing",
    "section": "6.7 Readings",
    "text": "6.7 Readings\nGood readings on these and related issues:\n\nWhy Most Published Research Findings Are False\nDecline effect\nThe truth wears off\nThe Extent and Consequences of P-Hacking in Science\nA manifesto for reproducible science\nSpoiled Science"
  },
  {
    "objectID": "05-hypothesis.html#how-to-fool-yourself-with-p-hacking-and-possibly-get-fired",
    "href": "05-hypothesis.html#how-to-fool-yourself-with-p-hacking-and-possibly-get-fired",
    "title": "6  Hypothesis testing",
    "section": "6.8 How to fool yourself with p-hacking (and possibly get fired!)",
    "text": "6.8 How to fool yourself with p-hacking (and possibly get fired!)\nWe are going to try our hand at p-hacking, to show how easy it is to get fooled when you have a sufficiently large and complex data set. The file data/medals.csv contains the total number of medals won at the Olympic games (Summer or Winter) by country, sport and gender. We have a simple, and reasonable (?) hypothesis: because the amount of money available to Olympic teams is finite, whenever a country invests in the male team, this will be at the detriment of the female team. To test this hypothesis, we measure whether the number of medals won by a national female team in a year is negatively correlated with the number of medals won by the male team.\nLet’s read the data, and take a peak:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\ndt <- read_csv(\"data/medals.csv\")\n\nRows: 6915 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): NOC, Sport\ndbl (3): Year, F, M\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndt\n\n# A tibble: 6,915 × 5\n   NOC    Year Sport         F     M\n   <chr> <dbl> <chr>     <dbl> <dbl>\n 1 AFG    2008 Taekwondo     0     1\n 2 AFG    2012 Taekwondo     0     1\n 3 AHO    1988 Sailing       0     1\n 4 ALG    1984 Boxing        0     2\n 5 ALG    1992 Athletics     1     0\n 6 ALG    1992 Boxing        0     1\n 7 ALG    1996 Athletics     0     1\n 8 ALG    1996 Boxing        0     2\n 9 ALG    2000 Athletics     1     3\n10 ALG    2000 Boxing        0     1\n# ℹ 6,905 more rows\n\n\nFirst, let’s see whether our hypothesis works for the whole data:\n\ncor(dt$F, dt$M)\n\n[1] 0.1651691\n\n\nThe correlation is positive: more medals for the men tend to correspond to more medals for the women. This correlation is not very strong, but is it “significant”? We can run a correlation test:\n\ncor.test(dt$F, dt$M)\n\n\n    Pearson's product-moment correlation\n\ndata:  dt$F and dt$M\nt = 13.924, df = 6913, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.1421521 0.1880075\nsample estimates:\n      cor \n0.1651691 \n\n\nIndeed! The confidence intervals are far from 0: the correlation is definitely positive. Should we give up? Of course not! Just as for the jelly beans, we can p-hack our way to glory by subsetting the data. We are going to test each discipline independently, and see whether we can get a robustly negative correlation for any discipline. Because we are serious scientists, we are going to consider only disciplines for which we have at least 50 data points, to avoid results that are due to small sample sizes. Let’s write a code:\n\ndt <- dt %>% group_by(Sport) %>% mutate(sample_size = n()) %>% ungroup()\ncorrelations <- dt %>% \n  filter(sample_size >= 50) %>% \n  group_by(Sport) %>% \n  summarise(cor = cor(`M`, `F`), \n            pvalue = cor.test(`M`, `F`)$p.value) %>% \n  ungroup() \n\nNow let’s see whether there are highly significant negative correlations:\n\nmy_results <- correlations %>% filter(pvalue < 0.05, cor < 0)\nmy_results\n\n# A tibble: 9 × 3\n  Sport                cor   pvalue\n  <chr>              <dbl>    <dbl>\n1 Basketball        -0.579 7.86e- 8\n2 Football          -0.796 6.75e-23\n3 Handball          -0.810 5.28e-16\n4 Hockey            -0.585 4.16e- 9\n5 Ice Hockey        -0.302 8.10e- 3\n6 Modern Pentathlon -0.561 3.57e- 8\n7 Volleyball        -0.545 2.18e- 6\n8 Water Polo        -0.688 3.41e-14\n9 Weightlifting     -0.138 2.33e- 2\n\n\nLet’s plot our results to convince ourselves that they are strong:\n\nggplot(dt %>% inner_join(my_results)) + \n  aes(x = `M`, y = `F`) + \n  geom_point() + \n  geom_smooth(method = \"lm\") + \n  facet_wrap(~Sport, scales = \"free\")\n\n\n\n\nThat’s it! Should we rush to publish our results? Not quite: we have p-hacked our way to some highly significant results, but we did not correct for the number of tests we’ve made, and what we would do is to selectively reporting our strong results. In fact, we can do something very simple to convince ourselves that our results do not make much sense: just run the code again, but reporting significant positive correlations…\n\nmy_results <- correlations %>% filter(pvalue < 0.05, cor > 0)\nggplot(dt %>% inner_join(my_results)) + \n  aes(x = `M`, y = `F`) + \n  geom_point() + \n  geom_smooth(method = \"lm\") + \n  facet_wrap(~Sport, scales = \"free\")\n\n\n\n\nYou can see that we’ve got about the same number of sports testing significant for positive correlation! Bonus question what about figure skating?"
  },
  {
    "objectID": "06-likelihood.html#likelihood-and-estimation",
    "href": "06-likelihood.html#likelihood-and-estimation",
    "title": "7  Likelihood and Bayes",
    "section": "7.1 Likelihood and estimation",
    "text": "7.1 Likelihood and estimation\n\n7.1.1 likelihood vs. probability\nIn everyday English, probability and likelihood are synonymous. In probability and statistics, however, the two are distinct, although related, concepts. The definition of likelihood is based on the notion of conditional probability that we defined in week 2, applied to a data set and a particular probability model \\(M\\):\n\\[\nL(M \\ \\ \\vert \\ \\ D) = P(D \\ \\ \\vert \\ \\ M)\n\\]\nThe model is based on a set of assumptions that allow us to calculate probabilities of outcomes of a random experiment, typically a random variable with a well-defined probability distribution function.\nExample. \\(M\\) may represent the binomial random variable, based on the assumptions that the data are strings of \\(n\\) independent binary outcomes with a set probability \\(p\\) of “success.” We then have the following formula for the probability of obtaining \\(k\\) successes:\n\\[\nP(k ; n , p) =  {n \\choose k} p^k (1-p)^{n-k}\n\\]\nSuppose we think we have a fair coin and we flip it ten times and obtain 4 heads and 6 tails. Then the likelihood of our model (a binomial random variable with \\(p=0.5\\) with \\(n=10\\)) based on our data (\\(k=4\\)) is:\n\\[\nL(p=0.5, n=10 \\ \\vert \\ k=4 ) = P(k =4 \\ \\vert \\ n=10 , p=0.5) = {10 \\choose 4} 0.5^4 (0.5)^{6}\n\\]\nTo calculate this precisely, it is easiest to use the R function dbinom():\n\nprint(dbinom(4,10,0.5))\n\n[1] 0.2050781\n\n\nSo the likelihood of this data set being produced by a fair coin is about 20.5%.\nThis certainly looks like a probability — in fact we calculated it from a probability distribution function, so why do we call it a likelihood? There are two fundamental differences between the two, one mostly abstract, the other more grounded.\nFirst, a model (or model parameters) is not a random variable, because it comes from an assumption we made in our heads, not from an outcome of a random process. This may seem to be an abstract, almost philosophical distinction, but how would you go about assigning probabilities to all the models one can come up with? Would they vary from person to person, because one may prefer to use the binomial random variable, and another prefers Poisson? You see how this can get dicey if we think of these in terms of the traditional “frequency of outcomes” framework of probability.\nSecond, and more quantitatively relevant, is that likelihoods do not satisfy the fundamental axiom of probability: they do not add up to one. Remember that probabilities were defined on a sample space of all outcomes of a random experiment. Likelihoods apply to models or their parameters, and there are usually uncountably many models - in fact it’s not possible to even describe all the possible models in vague terms! Even if we agree that we’re evaluating only one type of model, e.g. the binomial random variable, the likelihood parameter \\(p\\) does not work like a probability, because there is a non-zero likelihood for any value \\(p\\) (technically, the coin could have any degree of unfairness!) so adding up all of the likelihoods will results in infinity.\n\n\n7.1.2 maximizing likelihood\nOne of the most common applications of likelihood is to find the model or model parameters that give the highest likelihood based on the data, and call those the best statistical estimate. Here are the symbols we will use in this discussion:\n\n\\(D\\): the observed data\n\\(\\theta\\): the free parameter(s) of the statistical model\n\\(L(\\theta \\ \\vert \\ D)\\): the likelihood function, read “the likelihood of \\(\\theta\\) given the data”\n\\(\\hat{\\theta}\\): the maximum-likelihood estimates (m.l.e.) of the parameters\n\n\n\n7.1.3 discrete probability distributions\nThe simplest case is that of a probability distribution function that takes discrete values. Then, the likelihood of \\(\\theta\\) given the data is simply the probability of obtaining the data when parametrizing the model with parameters \\(\\theta\\):\n\\[L(\\theta \\ \\vert \\ D) = P(X = D \\ \\vert \\ \\theta)\\]\nFinding the m.l.e. of \\(\\theta\\) simply means finding the value(s) maximizing the probability of obtaining the given data under the model. In cases when this likelihood function has a simple algebraic form, we can find the maximum value using the classic method of taking its derivative and setting it to zero.\nExample. Let’s go back to the binomial example. Based on the data set of 4 heads out of 10 coin tosses, what is the maximum likelihood estimate of the probability of a head \\(p\\)? The range of values of \\(p\\) is between 0 and 1, and since we have a functional expression for \\(P(k=4 ; n=10, p)\\) (see above) we can plot it using the dbinom() function:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nn <- 10\nk <- 4\npl <- ggplot(data = data.frame(x = 0, y = 0)) + xlim(c(0,1))\nlike_fun <- function(p) {\n  lik <- dbinom(k, n, p)\n  return(lik)\n}\npl <- pl + stat_function(fun = like_fun) + \n  xlab('probability of success (p)') + \n  ylab('likelihood') +\n  geom_vline(xintercept = 0.4, linetype='dotted', color = 'red')\nshow(pl)\n\n\n\n\nIt’s probably not surprising that the maximum of the likelihood function occurs at \\(p=0.4\\), that is the observed fraction of heads! Using the magic of derivatives, we can show that for a data set with \\(k\\) success out of \\(n\\) trials, the maximum likelihood value of \\(p\\) is \\(\\hat p = k/n\\):\n\\[\n\\begin{aligned}\nL(p  \\ \\vert \\ n, k) &= {n \\choose k} p^k (1-p)^{n-k} \\\\ \\hline\nL'(p | n, k ) &= {n \\choose k}\\left [ kp^{k-1}(1-p)^{n-k} - (n-k) (1-p)^{n-k-1}p^k \\right] \\\\\n&={n \\choose k} p^{k-1} (1-p)^{n-k-1} \\left [ k(1-p) - (n-k)p \\right] = 0 \\\\\n\\hline\nk(1-p) &= (n-k)p \\\\\n\\hat p &= k/n\n\\end{aligned}\n\\]\n\n\n7.1.4 continuous probability distributions\nThe definition is more complex for continuous variables (because \\(P(X = x; \\theta) = 0\\) as there are infinitely many values…). What is commonly done is to use the density function \\(f(x; \\theta)\\) and considering the probability of obtaining a value \\(x \\in [x_j, x_j + h]\\), where \\(x_j\\) is our observed data point, and \\(h\\) is small. Then:\n\\[\nL(\\theta \\ \\vert \\ x_j) = \\lim_{h \\to 0^+} \\frac{1}{h} \\int_{x_j}^{x_j + h} f(x ; \\theta) dx = f(x_j ; \\theta)\n\\]\nNote that, contrary to probabilities, density values can take values greater than 1. As such, when the dispersion is small, one could end up with values of likelihood greater than 1 (or positive log-likelihoods). In fact, the likelihood function is proportional to but not necessarily equal to the probability of generating the data given the parameters: \\(L(\\theta\\vert X) \\propto P(X; \\theta)\\).\nMost classical statistical estimations are based on maximizing a likelihood function. For example, linear regression estimates of slope and intercept are based on minimizing the sum of squares, or more generally, the \\(\\chi\\)-squared statistic. This amounts to maximizing the likelihood of the underlying model, which is based on the assumptions of normally distributed independent residuals."
  },
  {
    "objectID": "06-likelihood.html#bayesian-thinking",
    "href": "06-likelihood.html#bayesian-thinking",
    "title": "7  Likelihood and Bayes",
    "section": "7.2 Bayesian thinking",
    "text": "7.2 Bayesian thinking\nWe will formalize the process of incorporation of prior knowledge into probabilistic inference by going back to the notion of conditional probability introduced in week 2. First, if you multiply both sides of the definition by \\(P(B)\\), then we obtain the probability of the intersection of events \\(A\\) and \\(B\\):\n\\[P(A \\cap B) = P(A \\ \\vert \\ B) P(B); \\;  P(A \\cap B) = P(B \\ \\vert \\ A) P(A) \\]\nSecond, we can partition a sample space into two complementary sets, \\(A\\) and \\(\\bar A\\), and then the set of \\(B\\) can be partitioned into two parts, that intersect with \\(A\\) and \\(\\bar A\\), respectively, so that the probability of \\(B\\) is\n\\[P(B) = P(A \\cap B) + P( \\bar A\\cap B)\\]\nThe two formulas together lead to a very important result called the law of total probability:\n\\[\nP(B) =  P(B \\ \\vert \\ A) P(A) + P(B \\ \\vert \\ \\bar A)P(\\bar A)\n\\]\nIt may not be clear at first glance why this is useful: after all, we replaced something simple (\\(P(B)\\)) with something much more complex on the right hand side. You will see how this formula enables us to calculate quantities that are not otherwise accessible.\nExample: Suppose we know that the probability of a patient having a disease is 1% (called the prevalence of the disease in a population), and the sensitivity and specificity of the test are both 80%. What is the probability of obtaining a negative test result for a randomly selected patient? Let us call \\(P(H) = 0.99\\) the probability of a healthy patient and \\(P(D) = 0.01\\) the probability of a diseased patient. Then: \\[ P(Neg) =  P(Neg  \\ \\vert \\  H) P(H) + P(Neg  \\ \\vert \\  D)P(D)  = \\] \\[ = 0.8 \\times 0.99 + 0.2 \\times 0.01 = 0.794\\]\n\n7.2.1 Bayes’ formula\nTake the first formula in this section, which expresses the probability \\(P(A \\cap B)\\) in two different ways. Since the expressions are equal, we can combine them into one equation, and by dividing both sides by \\(P(B)\\), we obtain what’s known as Bayes’ formula: \\[ P(A \\ \\vert \\ B) = \\frac{P(B \\ \\vert \\ A) P(A)}{P(B) }\\]\nAnother version of Bayes’ formula re-writes the denominator using the Law of total probability above: \\[\nP(A \\ \\vert \\ B) = \\frac{P(B \\ \\vert \\ A)P(A)}{P(B \\ \\vert \\ A) P(A) + P(B \\ \\vert \\ \\bar A)P( \\bar A)}\n\\]\nBayes’ formula gives us the probability of \\(A\\) given \\(B\\) from probabilities of \\(B\\) given \\(A\\) and given \\(-A\\), and the prior (baseline) probability of \\(P(A)\\). This is enormously useful when it is easy to calculate the conditionals one way and not the other. Among its many applications, it computes the effect of a test result with given sensitivity and specificity (conditional probabilities) on the probability of the hypothesis being true.\n\n\n\n\n\n\n\n\n7.2.2 positive predictive value\nIn reality, a doctor doesn’t have the true information about the patient’s health, but rather the information from the test and hopefully some information about the population where she is working. Let us assume we know the rate of false positives \\(P(Pos \\ \\vert \\ H\\)) and the rate of false negatives \\(P(Neg \\ \\vert \\  D)\\), as well as the prevalence of the disease in the whole population \\(P(D)\\). Then we can use Bayes’ formula to answer the practical question, if the test result is positive, what is the probability the patient is actually sick? This is called the positive predictive value of a test. The deep Bayesian fact is that one cannot make inferences about the health of the patient after the test without some prior knowledge, specifically the prevalence of the disease in the population:\n\\[ P(D  \\ \\vert \\  Pos) =  \\frac{P(Pos \\ \\vert \\ D)P(D)}{P(Pos \\ \\vert \\ D) P(D) + P(Pos  \\ \\vert \\  H)P(H)}\\]\nExample. Suppose the test has a 0.01 probability of both false positive and false negatives, and the overall prevalence of the disease in the population 0.02. You may be surprised that from an epidemiological perspective, a positive result is far from definitive:\n\\[ P(D  \\ \\vert \\  Pos)  = \\frac{0.99 \\times 0.02}{0.99 \\times 0.02 + 0.01 \\times 0.98} = 0.67 \\]\nThis is because the disease is so rare, that even though the test is quite accurate, there are going to be a lot of false positives (about 1/3 of the time) since 98% of the patients are healthy.\nWe can also calculate the probability of a patient who tests negative of actually being healthy, which is called the negative predictive value. In this example, it is far more definitive:\n\\[ P(H  \\ \\vert \\  Neg)  = \\frac{P(Neg \\ \\vert \\ H)P(H)}{P(Neg \\ \\vert \\ H) P(H) + P(Neg  \\ \\vert \\  D)P(D)} = \\]\n\\[ = \\frac{0.99 \\times 0.98}{0.99 \\times 0.98 + 0.01 \\times 0.02} =  0.9998\\] This is again because this disease is quite rare in this population, so a negative test result is almost guaranteed to be correct. In another population, where disease is more prevalent, this may not be the case.\n\n\n\nBayesian hypothesis testing tree with prior probability 0.1\n\n\n\n\n\nBayesian hypothesis testing tree with prior probability 0.01\n\n\nExercise: Simulate medical testing by rolling dice for a rare disease (1/6 prevalence) and a common disease (1/2 prevalence), with both sensitivity and specificity of 5/6. Compare the positive predictive values for the two cases.\n\n\n7.2.3 prosecutor’s fallacy\n\n\n\n\n\n\nThe basic principle of Bayesian thinking is that one cannot interpret the reliability of a result, e.g. a hypothesis test, without factoring in the prior probability of it being true. This seems like a commonsensical concept, but it is often neglected when such results are interpreted in various contexts, which can lead to perilous mistakes.\nHere is a scenario called “the prosecutor’s fallacy”. Suppose that a defendant is accused of a crime, and physical evidence collected at the crime scene matches this person (e.g. a fingerprint or a DNA sample), but no other evidence exists to connect the defendant to the crime. The prosecutor calls an expert witness to testify that fewer than one out of a million randomly chosen people would match this sample. Therefore, she argues, there is overwhelming probability that the defendant is guilty and less than 1 in a million chance they are innocent.\nDo you spot the problem with the argument?\nIt’s the same fallacy as we saw in the medical testing scenario, or that is portrayed in the xkcd cartoon above. The prosecutor is conflating the probability of a match (positive result) given that the person is innocent, and the probability of the person being innocent, given the match. The probability of the former is one in a million, but we want to know the latter! And the latter depends on the prior probability of the person committing the crime, which should have been investigated by the detectives: did the defendant have a conflict with the victim or have they never met? did he have opportunity to commit the crime, or was he in a different city at the time? Without this information, it is impossible to decide whether it’s more likely that the DNA/fingerprint match is a false positive (in a country of 300 million, you can find 300 false matches if everyone is in the database!) or a true positive.\n\n\n7.2.4 reproducibility in science\nIn 2005 John Ioannidis published a paper entitled “Why most published research findings are false”. The paper, as you can see by its title, was intended to be provocative, but it is based solidly on the classic formula of Bayes. The motivation for the paper came from the observation that too often in modern science, big, splashy studies that were published could not be reproduced or verified by other researchers. What could be behind this epidemic of questionable scientific work?\nThe problem as described by Ioannidis and many others, in a nutshell, is that unthinking use of traditional hypothesis testing leads to a high probability of false positive results being published. The paper outlines several ways in which this can occur.\nToo often, a hypothesis is tested and if the resultant p-value is less than some arbitrary threshold (very often 0.05, an absurdly high number), then the results are published. However, if one is testing a hypothesis with low prior probability, a positive hypothesis test result is very likely a false positive. Very often, modern biomedical research involves digging through a large amount of information, like an entire human genome, in search for associations between different genes and a phenotype, like a disease. It is a priori unlikely that any specific gene is linked to a given phenotype, because most genes have very specific functions, and are expressed quite selectively, only at specific times or in specific types of cells. However, publishing such studies results in splashy headlines (“Scientists find a gene linked to autism!”) and so a lot of false positive results are reported, only to be refuted later, in much less publicized studies.\nIoannidis performed basic calculations of the probability that a published study is true (that is, that a positive reported result is a true positive), and how it is affected by pre-study (prior) probability, number of conducted studies on the same hypothesis, and the level of bias. His prediction is that for fairly typical scenario (e.g. pre-study probability of 10%, ten groups working simultaneously, and a reasonable amount of bias) the probability that a published result is correct is less than 50%. He then followed up with another paper [2] that investigated 49 top-cited medical research publications over a decade, and looked at whether follow-up studies could replicate the results, and found that a very significant fraction of their findings could not be replicated or were found to have weaker effects by subsequent investigations."
  },
  {
    "objectID": "06-likelihood.html#bayesian-inference",
    "href": "06-likelihood.html#bayesian-inference",
    "title": "7  Likelihood and Bayes",
    "section": "7.3 Bayesian inference",
    "text": "7.3 Bayesian inference\nAs an alternative to frequentist and maximum likelihood approaches to modeling biological data, Bayesian statistics has seen an impressive growth in recent years, due to the improved computational power.\nAt the heart of Bayesian inference is an application of Bayes’ theorem: take a model with parameters \\(\\theta\\), and some data \\(D\\). Bayes’ theorem gives us a disciplined way to “update” our belief in the distribution of \\(\\theta\\) once we’ve seen the data \\(D\\):\n\\[\nP(\\theta \\ \\vert \\ D) = \\frac{P(D \\ \\vert \\ \\theta) P(\\theta)}{P(D)}\n\\] where:\n\n\\(P(\\theta \\ \\vert \\ D)\\) is the posterior distribution of \\(\\theta\\), i.e., our updated belief in the values of \\(\\theta\\).\n\\(P(D \\ \\vert \\ \\theta)\\) is the likelihood function: \\(P(DX \\ \\vert \\ \\theta) = L(\\theta \\ \\vert \\ D)\\).\n\\(P(\\theta)\\) is the prior distribution, i.e. our belief on the distribution of \\(\\theta\\) before seeing the data.\n\\(P(D)\\) is called the evidence: \\(P(D) = \\int P(D \\ \\vert \\ \\theta) d \\theta\\) (in practice, this need not to be calculated).\n\n\n7.3.1 Example: capture-recapture\nThere is a well-established method in population ecology of estimating the size of a population by repeatedly capturing and tagging a number of individuals and later repeating the experiment to see how many are recaptured. Suppose that \\(n\\) were captured initially and \\(k\\) were recaptured later. We assume that the probability \\(p\\) of recapturing an individual is the same for all individuals. Then our likelihood function is once again, based on the binomial distribution.\n\\[\nL(p \\ \\vert \\ k, n) = \\binom{n}{k}p^k (1-p)^{n-k}\n\\] and our maximum likelihood estimate is \\(\\hat{p} = k /n\\). This allows for estimation of the total population size to be \\(P = n_2/\\hat p\\), where \\(n_2\\) is the total number of individuals captured in the second experiment. There are more sophisticated estimators, but this one is reasonable for large enough populations.\nLet us plot the likelihood as a function of \\(p\\) for the case in which \\(n = 100\\) and \\(k = 33\\)\n\nlibrary(tidyverse)\nn <- 100\nm <- 33\npl <- ggplot(data = data.frame(x = 0, y = 0)) + xlim(c(0,1))\nlikelihood_function <- function(p) {\n  lik <- choose(n, m) * p^m * (1-p)^(n - m)\n  # divide by the evidence to make into density function\n  return(lik * (n + 1))\n}\npl <- pl + stat_function(fun = likelihood_function)\nshow(pl)\n\n\n\n\nNow we choose a prior. For convenience, we choose a Beta distribution, \\(P(p) = \\text{Beta}(\\alpha, \\beta) = \\frac{p^{\\alpha - 1} (1-p)^{\\beta - 1}}{B(\\alpha, \\beta)}\\), where \\(B(\\alpha, \\beta)\\) is the Beta function, \\(B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha -1} (1-t)^{\\beta - 1} dt\\).\nTherefore:\n\\[\n\\begin{aligned}\nP(p \\ \\ \\vert \\ \\ m,n) & \\propto L(p \\ \\ \\vert \\ \\ m,n) P(p) \\\\\n&= \\left(\\binom{n}{m} p^m (1-p)^{n-m} \\right) \\left( \\frac{p^{\\alpha - 1} (1-p)^{\\beta - 1}}{B(\\alpha, \\beta)} \\right)\\\\\n& \\propto p^{m+\\alpha -1} (1-p)^{n-m + \\beta -1} \\\\\n& \\propto \\text{Beta}(m + \\alpha, \\beta + m - n)\n\\end{aligned}\n\\]\nWe can explore the effect of choosing a prior on the posterior. Suppose that in the past we have seen probabilities close to 50%. Then we could choose a prior \\(\\text{Beta}(10,10)\\) (this is what is called a “strong” or “informative” prior). Let’s see what happens to the posterior:\n\n# a strong prior\nalpha <- 10\nbeta <- 10\nprior_function <- function(p) dbeta(p, alpha, beta)\nposterior_function <- function(p) dbeta(p, alpha + m, beta + n - m)\npl + stat_function(fun = prior_function, colour = \"blue\") + \n  stat_function(fun = posterior_function, colour = \"red\")\n\n\n\n\nYou can see that the posterior “mediates” between the prior and the likelihood curve. When we use a weak prior, then our posterior will be closer to the likelihood function:\n\n# a weak prior\nalpha <- 1/2\nbeta <- 1/2\npl + stat_function(fun = prior_function, colour = \"blue\") + \n  stat_function(fun = posterior_function, colour = \"red\")\n\n\n\n\nThe fact that the posterior depends on the prior is the most controversial aspect of Bayesian inference. Different schools of thought treat this feature differently (e.g., “Subjective Bayes” interprets priors as beliefs before seeing the data; “Empirical Bayes” relies on previous experiments or on the data themselves to derive the prior; “Objective Bayes” tries to derive the least-informative prior given the data). In practice, the larger the data, the cleaner the signal, the lesser the influence of the prior on the resulting posterior.\n\n\n7.3.2 MCMC\nThe type of calculation performed above is feasible only for very simple models, and for appropriately chosen priors (called “conjugate priors”). For more complex models, we rely on simulations. In particular, one can use Markov-Chain Monte Carlo (MCMC) to sample from the posterior distribution of complex models. Very briefly, one builds a Markov-Chain in which the states represent sets of parameters; parameters are sampled from the prior, and the probability of moving to one state to another is proportional to the difference in their likelihood. When the MC converges, then one obtains the posterior distribution of the parameters.\nBayesian inference is used for many complex problems, including phylogenetic tree building [5]."
  },
  {
    "objectID": "06-likelihood.html#reading",
    "href": "06-likelihood.html#reading",
    "title": "7  Likelihood and Bayes",
    "section": "7.4 Reading:",
    "text": "7.4 Reading:\n\nMaximum likelihood estimation from scratch\nPhylogenetic Analysis by Maximum Likelihood\nWhy most published scientific studies are false\nContradicted and Initially Stronger Effects in Highly Cited Clinical Research\nMrBayes\nQuick and Dirty Tree Building in R\nMark and Recapture"
  },
  {
    "objectID": "07-linalg.html#solving-multivariate-linear-equations",
    "href": "07-linalg.html#solving-multivariate-linear-equations",
    "title": "8  Review of linear algebra",
    "section": "8.1 Solving multivariate linear equations",
    "text": "8.1 Solving multivariate linear equations\nLinear algebra is intimately tied to linear equations, that is, to equations where all variables are multiplied by constant terms and added together. Linear equations with one variable are easily solved by division, for example:\n\\[\n4x = 20\n\\]\nis solved by dividing both sides by 4, obtaining the unique solution \\(x=5\\).\nThe situation gets more interesting when multiple variables are involved, with multiple equations, for example:\n\\[\n\\begin{aligned}\n4x - 3y &= 5 \\\\\n-x + 2y &= 10\n\\end{aligned}\n\\]\nThere are multiple ways to solve this, for example solving one equation for one variable in terms of the other, then substituting it into the second equation to obtain a one-variable problem. A more general approach involves writing this problem in terms of a matrix \\(\\mathbf A\\) that contains the multiplicative constants of \\(x\\) and \\(y\\) and a vector \\(\\vec b\\) that contains the right-hand side constants:\n\\[\n\\begin{aligned}\n\\mathbf{A} = \\begin{pmatrix} 4 & -3 \\\\ -1 & 2 \\end{pmatrix} \\;\\;\\; \\vec{b} = \\begin{pmatrix}5 \\\\ 10 \\end{pmatrix} &\\;\\;\\;\n\\vec{x} = \\begin{pmatrix} x \\\\ y \\end{pmatrix} \\\\\n\\mathbf{A} \\vec x = \\vec b &\n\\end{aligned}\n\\]\nThis now looks analogous to the one-variable equation above, which we solved by dividing both sides by the multiple of \\(x\\). The difficulty is that matrix operations are more complicated than scalar multiplication and division. Matrix multiplication is used in the equation above to multiply all the coefficients in the matrix by their respective variables, which involves a relatively complicated procedure in general.\nThe “division” equivalent is called matrix inversion and it is even more complicated. First, we need to define the identity matrix, or the equivalent of the number 1 for matrix multiplication. The identity matrix is defined only for square matrices (equal number of rows and columns), so a size \\(n\\) by \\(n\\) identity matrix is define to have all 1s on the diagonal and all zeros on the off-diagonal: \\[\nI = \\begin{pmatrix} 1 & 0 & \\dots & 0 \\\\ 0 & 1  &\\dots & 0 \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &\\dots & 1\\end{pmatrix}\n\\] The identity matrix is special because multiplying any other matrix (of compatible size) by it results in the same exact matrix (this is easy to check on a couple of examples for \\(2 \\times 2\\) or \\(3 \\times 3\\) matrices):\n\\[\nI A = A I = A\n\\] Then for an \\(n\\) by \\(n\\) matrix \\(A\\) its inverse \\(A^{-1}\\) is defined to be the matrix multiplication by which results in the identity matrix, that is: \\[\nA^{-1} A = A A^{-1}  = I\n\\] Defining the inverse is one task, but calculating it for any given matrix, especially of large size, is quite laborious. We will not describe the algorithms here, but you can read about Gauss-Jordan elimination, which is one classic example. One important point is that not all matrices are invertible, and for some no inverse matrix exists, analogous to zero for real number division. The difference is that there are infinitely many matrices for which this is the case, called singular matrices.\nIn the cases in which the inverse matrix exists, the linear system of equations can be solved by multiplying both sides by the inverse matrix, like this: \\[\n\\vec x = \\mathbf{A}^{-1}\\vec b\n\\]\nExample: Take the linear \\(2 \\times 2\\) system of equations of above and solve it using matrix inversion.The R function solve() calculates the inverse and multiplies it by the constant vector b:\n\nA <- matrix(c(4,-1,-3,2), nrow = 2)\nb <- c(5,10)\nsolve(A,b)\n\n[1] 8 9"
  },
  {
    "objectID": "07-linalg.html#fitting-a-line-to-data",
    "href": "07-linalg.html#fitting-a-line-to-data",
    "title": "8  Review of linear algebra",
    "section": "8.2 Fitting a line to data",
    "text": "8.2 Fitting a line to data\nOne geometric application of solving multiple linear equations is to find the coefficients of a line that passes through two points in the 2-dimensional plane (or of a plane that passes through three points in three-dimensional space, but we won’t go there.) In that case, the coordinates of the points are the data, and the unknown variables are the parameters slope \\(m\\) and intercept \\(b\\) of the line that we want to find.\nExample: If the data set consists of two points \\((3,5), (6, 2)\\), then finding the best fit values of \\(m\\) and \\(b\\) means solving the following two equations:\n\\[\n\\begin{aligned}\n3m + b &= 5 \\\\\n6m + b &= 2\n\\end{aligned}\n\\]\nThese equations have a solution for the slope and intercept, which can be calculated in R using solve() and then plot the line with the parameters from the solution vector beta:\n\nxs <- c(3, 6)\nys <- c(5, 2)\nA <- matrix(c(xs[1], xs[2], 1, 1), nrow = 2)\nb <- c(ys[1], ys[2])\nbeta <- solve(A, b)\ndata1 <- tibble(xs, ys)\nggplot(data = data1) + \n  aes(x = xs, y = ys) + \n  geom_point() + \n  geom_abline(slope = beta[1], intercept = beta[2])\n\n\n\n\nHowever, a data set with two points is very small and nobody would accept these values as reasonable estimates. Let us add one more data point, to increase our sample size to three: \\((3,5), (6, 2), (9, 1)\\). How do you find the best fit slope and intercept?\nBad idea: take two points and find a line, that is the slope and the intercept, that passes through the two. It should be clear why this is a bad idea: we are arbitrarily ignoring some of the data, while perfectly fitting two points. So how do we use all the data? Let us write down the equations that a line with slope \\(m\\) and intercept \\(b\\) have to satisfy in order to fit our data points:\n\\[\n\\begin{aligned}\n3m + b = 5 \\\\\n6m + b = 2\\\\\n9m + b = 1\n\\end{aligned}\n\\]\nThis system has no exact solution, since there are three equations and only two unknowns. We need to find \\(m\\) and \\(b\\) such that they are a “best fit” to the data, not the perfect solution.\n\n8.2.1 Least-squares line\nLet us write the equation in matrix form as follows:\n\\[\n\\begin{aligned}\n\\mathbf{A} = \\begin{pmatrix} 3 & 1 \\\\ 6 & 1 \\\\ 9 & 1 \\end{pmatrix} \\;\\;\\; \\vec{b} = \\begin{pmatrix}5 \\\\ 2 \\\\ 1 \\end{pmatrix} \\;\\;\\;\n\\vec{\\beta} = \\begin{pmatrix} m \\\\ b \\end{pmatrix} \\\\\n\\mathbf{A} \\vec \\beta = \\vec b\n\\end{aligned}\n\\]\nMathematically, the problem is that one cannot invert a non-square matrix. However, there is a way of turning the matrix into a square one, by multiplying it by its own transpose (same matrix with rows and columns reversed):\n\\[\n\\mathbf{A}^T \\mathbf{A} \\vec \\beta = \\mathbf{A}^T \\vec b\n\\] Exercise: Carry out the matrix multiplications to verify that \\(\\mathbf{A}^T \\mathbf{A}\\) is a \\(2 \\times 2\\) matrix and \\(\\mathbf{A}^T \\vec b\\) is a vector of length 2.\nNow we can solve this equation with a square matrix \\(\\mathbf{A}^T \\mathbf{A}\\) by multiplying both sides by the inverse! In general, for an \\(n\\)-dimensional data set consisting of a bunch of values of \\(x\\) and \\(y\\), the process looks like this:\n\\[\n\\vec Y = \\begin{pmatrix} y_1\\\\ y_2\\\\ \\vdots \\\\ y_n \\end{pmatrix} \\;\\;\\;\n\\mathbf{X} = \\begin{pmatrix} 1 & x_1\\\\ 1 & x_2\\\\ \\vdots & \\vdots \\\\ 1 & x_n \\end{pmatrix}\n\\;\\;\\;\n\\mathbf{\\beta} = \\begin{pmatrix} m \\\\ b \\end{pmatrix} \\\\\n\\beta = (\\mathbf{X}^{T} \\mathbf{X})^{-1} \\mathbf{X}^{T}\\vec Y\n\\] Example: Let us see the best-fit line for the 3-point data set above:\n\nxs <- c(3, 6, 9)\nys <- c(5, 2, 1)\nA <- matrix(c(xs[1], xs[2], xs[3], 1, 1, 1), nrow = 3)\nb <- c(ys[1], ys[2], ys[3])\nbeta <- solve(t(A) %*% A, t(A) %*% b)\ndata1 <- tibble(xs, ys)\nggplot(data = data1) + \n  aes(x = xs, y = ys) + \n  geom_point() + \n  geom_abline(slope = beta[1], intercept = beta[2])\n\n\n\n\nLet us use the classic data set of Karl Pearson’s from 1903 containing the height of fathers and sons, which we will return to next week when we tackle linear regression properly:\n\nrequire(UsingR)\ndata(\"father.son\")\npl <- ggplot(data = father.son) + \n  aes(x = fheight, y = sheight) + \n  geom_point() + \n  coord_equal()\npl\n\n\n\n\nExercise: Let’s try to find the best fit line to this data set (the hard way) using the same process as above for the three - point data set:\n\n\n\nOf course, R can do this calculation for you with just one command:\n\nbest_beta_easy <- lm(sheight ~ fheight, data = father.son)\nbest_beta_easy\n\n\nCall:\nlm(formula = sheight ~ fheight, data = father.son)\n\nCoefficients:\n(Intercept)      fheight  \n    33.8866       0.5141  \n\n\nBut it feels good to know that this is not black magic! In fact, plotting it on top of the data does not even require computing the coefficients:\n\npl + geom_smooth(method = \"lm\") # lm stands for linear model\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "07-linalg.html#linearity-and-vector-spaces",
    "href": "07-linalg.html#linearity-and-vector-spaces",
    "title": "8  Review of linear algebra",
    "section": "8.3 Linearity and vector spaces",
    "text": "8.3 Linearity and vector spaces\nWe have dealt with linear models in various guises, so now would be a good time to define properly what linearity means. The word comes from the shape of graphs of linear functions of one variable, e.g. \\(f(x) = a x + b\\), but the algebraic meaning rests on the following two general properties:\nDefinition. A linear transformation or linear operator is a mapping \\(L\\) between two sets of vectors with the following properties:\n\n(scalar multiplication) \\(L(c \\vec v) = c L(\\vec v)\\); where \\(c\\) is a scalar and \\(\\vec v\\) is a vector\n(additive) \\(L(\\vec v_1 + \\vec v_2) = L(\\vec v_1) + L(\\vec v_2)\\); where \\(\\vec v_1\\) and \\(\\vec v_2\\) are vectors\n\nHere we have two types of objects: vectors and transformations/operators that act on those vectors. The basic example of this are vectors and matrices, because a matrix multiplied by a vector (on the right) results another vector, provided the number of columns in the matrix is the same as the number of rows in the vector. This can be interpreted as the matrix transforming the vector \\(\\vec v\\) into another one: \\(A \\times \\vec v = \\vec u\\).\nExample: Let us multiply the following matrix and vector (specially chosen to make a point):\n\nA <- matrix(c(2, 2, 1, 3), nrow = 2)\nvec1 <- c(1, -1)\nvec2 <- A %*% vec1\nprint(vec1)\n\n[1]  1 -1\n\nprint(vec2)\n\n     [,1]\n[1,]    1\n[2,]   -1\n\n\nWe see that this particular vector \\((1,-1)\\) is unchanged when multiplied by this matrix, or we can say that the matrix multiplication is equivalent to multiplication by 1. Here is another such vector for the same matrix:\n\nvec1 <- c(1, 2)\nvec2 <- A %*% vec1\nprint(vec1)\n\n[1] 1 2\n\nprint(vec2)\n\n     [,1]\n[1,]    4\n[2,]    8\n\n\nIn this case, the vector is changed, but only by multiplication by a constant (4). Thus the geometric direction of the vector remained unchanged.\nThe notion of linearity leads to the important idea of combining different vectors:\nDefinition: A linear combination of \\(n\\) vectors \\(\\{ \\vec v_i \\}\\) is a weighted sum of these vectors with any real numbers \\(\\{a_i\\}\\): \\[ a_1 \\vec v_1+ a_2 \\vec v_2... + a_n \\vec v_n\\]\nLinear combinations arise naturally from the notion of linearity, combining the additive property and the scalar multiplication property. Speaking intuitively, a linear combination of vectors produces a new vector that is related to the original set. Linear combinations give a simple way of generating new vectors, and thus invite the following definition for a collection of vectors closed under linear combinations:\nDefinition. A vector space is a collection of vectors such that a linear combination of any \\(n\\) vectors is contained in the vector space.\nThe most common examples are the spaces of all real-valued vectors of dimension \\(n\\), which are denoted by \\(\\mathbb{R}^n\\). For instance, \\(\\mathbb{R}^2\\) (pronounced “r two”) is the vector space of two dimensional real-valued vectors such as \\((1,3)\\) and \\((\\pi, -\\sqrt{17})\\); similarly, \\(\\mathbb{R}^3\\) is the vector space consisting of three dimensional real-valued vectors such as \\((0.1,0,-5.6)\\). You can convince yourself, by taking linear combinations of vectors, that these vector spaces contain all the points in the usual Euclidean plane and three-dimensional space. The real number line can also be thought of as the vector space \\(\\mathbb{R}^1\\).\n\n8.3.1 Linear independence and basis vectors\nHow can we describe a vector space without trying to list all of its elements? We know that one can generate an element by taking linear combinations of vectors. It turns out that it is possible to generate (or “span”) a vector space by taking linear combinations of a subset of its vectors. The challenge is to find a minimal subset of subset that is not redundant. In order to do this, we first introduce a new concept:\nDefinition: A set of vectors \\(\\{ \\vec v_i \\}\\) is called linearly independent if the only linear combination involving them that equals the zero vector is if all the coefficients are zero. ( \\(a_1 \\vec v_1 + a_2 \\vec v_2 + ... + a_n \\vec v_n = 0\\) only if \\(a_i = 0\\) for all \\(i\\).)\nIn the familiar Euclidean spaces, e.g. \\(\\mathbb{R}^2\\), linear independence has a geometric meaning: two vectors are linearly independent if the segments from the origin to the endpoint do not lie on the same line. But it can be shown that any set of three vectors in the plane is linearly dependent, because there are only two dimensions in the vector space. This brings us to the key definition of this section:\nDefinition: A basis of a vector space is a linearly independent set of vectors that generate (or span) the vector space. The number of vectors (cardinality) in such a set is called the dimension of the vector space.\nA vector space generally has many possible bases, as illustrated in figure. In the case of \\(\\mathbb{R}^2\\), the usual (canonical) basis set is \\(\\{(1,0); (0,1)\\}\\) which obviously generates any point on the plane and is linearly independent. But any two linearly independent vectors can generate any vector in the plane.\nExample: The vector \\(\\vec r = (2,1)\\) can be represented as a linear combination of the two canonical vectors: \\(\\vec r = 2\\times (1,0)+1\\times (0,1)\\). Let us choose another basis set, say \\(\\{(1,1); (-1,1)\\}\\) (this is the canonical basis vectors rotated by \\(\\pi/2\\).) The same vector can be represented by a linear combination of these two vectors, with coefficients \\(1.5\\) and \\(-0.5\\): \\(\\vec r = 1.5\\times (1,1) - 0.5 \\times (-1,1)\\). If we call the first basis \\(C\\) for canonical and the second basis \\(D\\) for different, we can write the same vector using different sets of coordinates for each basis:\n\\[\n\\vec r_{C} = (2,1); \\; \\vec r_D = (1.5, -0.5)\n\\]\n\n\n8.3.2 Projections and changes of basis\nThe representation of an arbitrary vector (point) in a vector space as a linear combination of a given basis set is called the decomposition of the point in terms of the basis, which gives the coordinates for the vector in terms of each basis vector. The decomposition of a point in terms of a particular basis is very useful in high-dimensional spaces, where a clever choice of a basis can allow a description of a set of points (such as a data set) in terms of contributions of only a few basis vectors, if the data set primarily extends only in a few dimensions.\nTo obtain the coefficients of the basis vectors in a decomposition of a vector \\(\\vec r\\), we need to perform what is termed a projection of the vector onto the basis vectors. Think of shining a light perpendicular to the basis vector, and measuring the length of the shadow cast by the vector \\(\\vec r\\) onto \\(\\vec v_i\\). If the vectors are parallel, the shadow is equal to the length of \\(\\vec r\\); if they are orthogonal, the shadow is nonexistent. To find the length of the shadow, use the inner product of \\(\\vec r\\) and \\(\\vec v\\), which as you recall corresponds to the cosine of the angle between the two vectors multiplied by their norms: \\(\\left\\langle \\vec r, \\vec v\\right \\rangle =\\vert\\vec r\\vert \\vert\\vec v\\vert\\cos(\\theta)\\). We do not care about the length of the vector \\(\\vec v\\) we are projecting onto, thus we divide the inner product by the square norm of \\(\\vec v\\), and then multiply the vector \\(\\vec v\\) by this projection coefficient:\n\\[\nProj(\\vec r ; \\vec v) = \\frac{ \\langle \\vec r , \\vec v \\rangle  } {\\langle \\vec v , \\vec v \\rangle } \\vec v = \\frac{ \\langle \\vec r ,  \\vec v \\rangle  } {\\vert \\vec v \\vert^2} \\vec v= \\frac{  \\vert\\vec r\\vert \\cos(\\theta) } {\\vert \\vec v \\vert}\\vec v\n\\]\nThis formula gives the projection of the vector \\(\\vec r\\) onto \\(\\vec v\\), the result is a new vector in the direction of \\(\\vec v\\), with the scalar coefficient \\(a = \\ \\langle \\vec r , \\vec v \\rangle /\\vert \\vec v \\vert^2\\).\nExample: Here is how one might calculate the projection of the point \\((2,1)\\) onto the basis set \\(\\{(1,1); (-1,1)\\}\\):\n\nv1 <- c(1, 1)\nv2 <- c(-1, 1)\nu <- c(2, 1)\nProjMat <- matrix(cbind(v1, v2), \n                  byrow = T, nrow = 2)\nprint(ProjMat)\n\n     [,1] [,2]\n[1,]    1    1\n[2,]   -1    1\n\nProjMat %*% u\n\n     [,1]\n[1,]    3\n[2,]   -1\n\n\nThis is not quite right: the projection coefficients are off by a factor of two compared to the correct values in the example above. This is because we have neglected to normalize the basis vectors, so we should modify the script as follows:\n\nv1 <- c(1, 1)\nv1 <- v1 / (sum(v1^2))\nv2 <- c(-1, 1)\nv2 <- v2 / (sum(v2^2))\nu <- c(2, 1)\nProjMat <- matrix(cbind(v1, v2), \n                  byrow = T, nrow = 2)\nprint(ProjMat)\n\n     [,1] [,2]\n[1,]  0.5  0.5\n[2,] -0.5  0.5\n\nprint(ProjMat %*% u)\n\n     [,1]\n[1,]  1.5\n[2,] -0.5\n\n\nThis is an example of how to convert a vector/point from representation in one basis set to another. The new basis vectors, expressed in the original basis set, are arranged in a matrix by row, scaled by their norm squared, and multiplied by the vector that one wants to express in the new basis. The resulting vector contains the coordinates in the new basis."
  },
  {
    "objectID": "07-linalg.html#matrices-as-linear-operators",
    "href": "07-linalg.html#matrices-as-linear-operators",
    "title": "8  Review of linear algebra",
    "section": "8.4 Matrices as linear operators",
    "text": "8.4 Matrices as linear operators\n\n8.4.1 Matrices transform vectors\nIn this section we will learn to characterize square matrices by finding special numbers and vectors associated with them. At the core of this analysis lies the concept of a matrix as an operator that transforms vectors by multiplication. To be clear, in this section we take as default that the matrices \\(A\\) are square, and that vectors \\(\\vec v\\) are column vectors, and thus will multiply the matrix on the right: \\(A \\times \\vec v\\).\nA matrix multiplied by a vector produces another vector, provided the number of columns in the matrix is the same as the number of rows in the vector. This can be interpreted as the matrix transforming the vector \\(\\vec v\\) into another one: \\(A \\times \\vec v = \\vec u\\). The resultant vector \\(\\vec u\\) may or may not resemble \\(\\vec v\\), but there are special vectors for which the transformation is very simple.\nExample. Let us multiply the following matrix and vector (specially chosen to make a point):\n\\[\n\\left(\\begin{array}{cc}2 & 1 \\\\ 2& 3\\end{array}\\right)\\left(\\begin{array}{c}1 \\\\ -1 \\end{array}\\right) = \\left(\\begin{array}{c}2 -1 \\\\ 2 - 3 \\end{array}\\right) =  \\left(\\begin{array}{c} 1 \\\\ -1 \\end{array}\\right)\n\\]\nWe see that this particular vector is unchanged when multiplied by this matrix, or we can say that the matrix multiplication is equivalent to multiplication by 1. Here is another such vector for the same matrix:\n\\[\n\\left(\\begin{array}{cc}2 & 1 \\\\ 2& 3\\end{array}\\right)\\left(\\begin{array}{c}1 \\\\ 2 \\end{array}\\right) = \\left(\\begin{array}{c}2 +2 \\\\ 2 + 6 \\end{array}\\right) =  \\left(\\begin{array}{c} 4 \\\\ 8 \\end{array}\\right)\n\\]\nIn this case, the vector is changed, but only by multiplication by a constant (4). Thus the geometric direction of the vector remained unchanged.\nGenerally, a square matrix has an associated set of vectors for which multiplication by the matrix is equivalent to multiplication by a constant. This can be written down as a definition:\nDefinition. An eigenvector of a square matrix \\(A\\) is a vector \\(\\vec v\\) for which matrix multiplication by \\(A\\) is equivalent to multiplication by a constant. This constant \\(\\lambda\\) is called its eigenvalue of \\(A\\) corresponding the the eigenvector \\(\\vec v\\). The relationship is summarized in the following equation:\n\\[\nA  \\times  \\vec v = \\lambda \\vec v\n\\]\nNote that this equation combines a matrix (\\(A\\)), a vector (\\(\\vec v\\)) and a scalar \\(\\lambda\\), and that both sides of the equation are column vectors.\nThe definition does not specify how many such eigenvectors and eigenvalues can exist for a given matrix \\(A\\). There are usually as many such vectors \\(\\vec v\\) and corresponding numbers \\(\\lambda\\) as the number of rows or columns of the square matrix \\(A\\), so a 2 by 2 matrix has two eigenvectors and two eigenvalues, a 5x5 matrix has 5 of each, etc. One ironclad rule is that there cannot be more distinct eigenvalues than the matrix dimension. Some matrices possess fewer eigenvalues than the matrix dimension, those are said to have a degenerate set of eigenvalues, and at least two of the eigenvectors share the same eigenvalue.\nThe situation with eigenvectors is trickier. There are some matrices for which any vector is an eigenvector, and others which have a limited set of eigenvectors. What is difficult about counting eigenvectors is that an eigenvector is still an eigenvector when multiplied by a constant. You can show that for any matrix, multiplication by a constant is commutative: \\(cA = Ac\\), where \\(A\\) is a matrix and \\(c\\) is a constant. This leads us to the important result that if \\(\\vec v\\) is an eigenvector with eigenvalue \\(\\lambda\\), then any scalar multiple \\(c \\vec v\\) is also an eigenvector with the same eigenvalue. The following demonstrates this algebraically:\n\\[\nA  \\times  (c \\vec v) = c A  \\times  \\vec v = c \\lambda \\vec v =  \\lambda (c \\vec v)\n\\]\nThis shows that when the vector \\(c \\vec v\\) is multiplied by the matrix \\(A\\), it results in its being multiplied by the same number \\(\\lambda\\), so by definition it is an eigenvector. Therefore, an eigenvector \\(\\vec v\\) is not unique, as any constant multiple \\(c \\vec v\\) is also an eigenvector. It is more useful to think not of a single eigenvector \\(\\vec v\\), but of a collection of vectors that can be inter-converted by scalar multiplication that are all essentially the same eigenvector. Another way to represent this, if the eigenvector is real, is that an eigenvector as a direction that remains unchanged by multiplication by the matrix, such as direction of the vector \\(v\\) in the figure below. As mentioned above, this is true only for real eigenvalues and eigenvectors, since complex eigenvectors cannot be used to define a direction in a real space.\n\n\n\nIllustration of the geometry of a matrix \\(A\\) multiplying its eigenvector \\(v\\), resulting in a vector in the same direction \\(\\lambda v\\)\n\n\nTo summarize, eigenvalues and eigenvectors of a matrix are a set of numbers and a set of vectors (up to scalar multiple) that describe the action of the matrix as a multiplicative operator on vectors. “Well-behaved” square \\(n \\times n\\) matrices have \\(n\\) distinct eigenvalues and \\(n\\) eigenvectors pointing in distinct directions. In a deep sense, the collection of eigenvectors and eigenvalues defines a matrix \\(A\\), which is why an older name for them is characteristic vectors and values.\n\n\n8.4.2 calculating eigenvalues\nFinding the eigenvalues and eigenvectors analytically, that is on paper, is quite laborious even for 3 by 3 or 4 by 4 matrices and for larger ones there is no analytical solution. In practice, the task is outsourced to a computer, and MATLAB has a number of functions for this purpose. Nevertheless, it is useful to go through the process in 2 dimensions in order to gain an understanding of what is involved. From the definition of eigenvalues and eigenvectors, the condition can be written in terms of the four elements of a 2 by 2 matrix:\n\\[\n\\left(\\begin{array}{cc}a & b \\\\c & d\\end{array}\\right)\\left(\\begin{array}{c}v_1 \\\\ v_2 \\end{array}\\right) = \\left(\\begin{array}{c}av_1 +b v_2\\\\ cv_1+ dv_2 \\end{array}\\right) = \\lambda \\left(\\begin{array}{c}v_1 \\\\ v_2 \\end{array}\\right)\n\\]\nThis is now a system of two linear algebraic equations, which we can solve by substitution. First, let us solve for \\(v_1\\) in the first row, to get \\[v_1 = \\frac{-bv_2}{a-\\lambda}\\] Then we substitute this into the second equation and get:\n\\[\n\\frac{-bcv_2}{a-\\lambda} +(d-\\lambda)v_2 = 0\n\\]\nSince \\(v_2\\) multiplies both terms, and is not necessarily zero, we require that its multiplicative factor be zero. Doing a little algebra, we obtain the following, known as the characteristic equation of the matrix:\n\\[\n-bc +(a-\\lambda)(d-\\lambda) = \\lambda^2-(a+d)\\lambda +ad-bc = 0\n\\]\nThis equation can be simplified by using two quantities we defined at the beginning of the section: the sum of the diagonal elements called the trace \\(\\tau = a+d\\), and the determinant \\(\\Delta = ad-bc\\). The quadratic equation has two solutions, dependent solely on \\(\\tau\\) and \\(\\Delta\\):\n\\[\n\\lambda = \\frac{\\tau \\pm \\sqrt{\\tau^2-4\\Delta}}{2}\n\\]\nThis is the general expression for a 2 by 2 matrix, showing there are two possible eigenvalues. Note that if \\(\\tau^2-4\\Delta>0\\), the eigenvalues are real, if \\(\\tau^2-4\\Delta<0\\), they are complex (have real and imaginary parts), and if \\(\\tau^2-4\\Delta=0\\), there is only one eigenvalue. This situation is known as degenerate, because two eigenvectors share the same eigenvalue.\nExample. Let us take the same matrix we looked at in the previous subsection:\n\\[\nA = \\left(\\begin{array}{cc}2 & 1 \\\\ 2& 3\\end{array}\\right)\n\\]\nThe trace of this matrix is \\(\\tau = 2+3 =5\\) and the determinant is \\(\\Delta = 6 - 2 = 4\\). Then by our formula, the eigenvalues are:\n\\[\n\\lambda = \\frac{5 \\pm \\sqrt{5^2-4 \\times 4}}{2}  =  \\frac{5 \\pm 3}{2}  = 4, 1\n\\]\nThese are the multiples we found in the example above, as expected. Of course R has functions to calculate this instead of doing this by hand:\n\nA <- matrix(c(2, 2, 1, 3), nrow =2)\neigs <- eigen(A)\neigs$values\n\n[1] 4 1\n\neigs$vectors\n\n           [,1]       [,2]\n[1,] -0.4472136 -0.7071068\n[2,] -0.8944272  0.7071068\n\n\nNote: a real-valued matrix can have complex eigenvalues and eigenvectors, but whenever it acts on a real vector, the result is still real. This is because the complex numbers cancel each others imaginary parts."
  },
  {
    "objectID": "08-linearreg.html#regression-toward-the-mean",
    "href": "08-linearreg.html#regression-toward-the-mean",
    "title": "9  Linear models",
    "section": "9.1 Regression toward the mean",
    "text": "9.1 Regression toward the mean\nFrancis Galton (Darwin’s half-cousin) was a biologist interested in evolution, and one of the main proponents of eugenics (he coined the term himself). To advance his research program, he set out to measure several features in human populations, and started trying to explain the variation he observed, incidentally becoming one of the founding fathers of modern statistics.\nIn his “Regression towards mediocrity in hereditary stature” he showed an interesting pattern: children of tall parents tended to be shorter than their parents, while children of short parents tended to be taller than their parents. He called this phenomenon “regression toward mediocrity” (now called regression toward [to] the mean).\nWe’re going to explore this phenomenon using Karl Pearson’s (another founding father of statistics) data from 1903, recording the height of fathers and sons:\n\nrequire(UsingR)\ndata(\"father.son\")\npl <- ggplot(data = father.son) + aes(x = fheight, y = sheight) + geom_point() + coord_equal()\npl\n\n\n\n\nLet’s add the 1:1 line for comparison:\n\npl + geom_abline(slope = 1, intercept = 0, linetype = 2, color = \"red\")\n\n\n\n\nYou can see that the sons tend to be taller than their fathers. Let’s see of how much:\n\nmean(father.son$fheight)\n\n[1] 67.6871\n\nmean(father.son$sheight)\n\n[1] 68.68407\n\n# difference\nmean(father.son$sheight) - mean(father.son$fheight)\n\n[1] 0.9969728\n\n\nSo let’s add a line with an intercept of 1:\n\npl <- pl + geom_abline(slope = 1, intercept = 1, linetype = 2, color = \"blue\")\npl\n\n\n\n\nYou can see that the line does not divide the cloud of points evenly: even though tall fathers tend to produce tall sons, and short fathers short sons, the sons of short fathers tend to be taller than their fathers (for example, look at the sons of fathers less than 60 inches tall), while the sons of tall fathers tend to be shorter than their fathers (for example, the sons of fathers taller than 75 inches).\nThis phenomenon is called “regression toward the mean”: when you take two measurement on the same sample (or related samples, as here), if a variable is extreme on its first measurement, it will tend to be closer to the average on its second measurement; if it is extreme on its second measurement, it will tend to have been closer to the average on its first.\n\nRegression to the mean: dangers of interpretation\n\n\nA city sees an unusual growth of crime in a given neighborhood, and they decide to patrol the neighborhood more heavily. The next year, crime rates are close to normal. Was this due to heavy presence of police?\nA teacher sees that scolding students who’ve had a very low score in a test makes them perform better in the next test. (But would praising those with unusually high scores lead to slacking off in the next test?)\nA huge problem in science: effect sizes tend to decrease through time. Problem of selective reporting?\n\nThis phenomenon gave the name to one of the simplest statistical models: the linear regression."
  },
  {
    "objectID": "08-linearreg.html#finding-the-best-fitting-line-linear-regression",
    "href": "08-linearreg.html#finding-the-best-fitting-line-linear-regression",
    "title": "9  Linear models",
    "section": "9.2 Finding the best fitting line: Linear Regression",
    "text": "9.2 Finding the best fitting line: Linear Regression\nHow can we explain the relationship between the height of the fathers and those of their sons? One of the simplest models we can use is called a “Linear Model”. Basically, we want to express the height of the son as a function of the height of the father:\n\\[\ny_i = \\beta_0 + \\beta_1 x_i + \\epsilon_i\n\\]\nwhere \\(y_i\\) is the height of the son (response variable), \\(x_i\\) is the height of the father (explanatory variable), \\(\\beta_0\\) and \\(\\beta_1\\) are two numbers (intercept and slope of the line) that do not vary within the population (these are the parameters we want to fit). Finally, the term \\(\\epsilon_i\\) measures the “error” we are making for the \\(i^{th}\\) son. For simplicity, we assume the \\(\\epsilon_i \\overset{\\text{iid}}{\\sim} \\mathcal N(0, \\sigma^2)\\) (and \\(\\sigma\\) is therefore another parameter we want to fit).\nWhen we have multiple explanatory variables (for example, if we had recorded also the height of the mother, whether the son was born at full term or premature, the average caloric intake for the family, etc.), we speak of Multiple Linear Regression:\n\\[\ny_i = \\beta_0 + \\sum_{k=1}^n \\beta_k x_{ik} + \\epsilon_i\n\\]\n\n9.2.1 Solving a linear model — some linear algebra\nIn this section, we’re going to look at the mechanics of linear regression. Suppose that for simplicity we have a single explanatory variable, then we can write the linear model in compact form as:\n\\[\n\\mathbf{Y} = \\mathbf{X} \\mathbf{\\beta} + \\mathbf{\\epsilon}\n\\]\nwhere:\n\\[\n\\mathbf{Y} = \\begin{pmatrix} y_1\\\\ y_2\\\\ \\vdots \\\\ y_n \\end{pmatrix} \\;\\;\\;\n\\mathbf{X} = \\begin{pmatrix} 1 & x_1\\\\ 1 & x_2\\\\ \\vdots & \\vdots \\\\ 1 & x_n \\end{pmatrix}\n\\;\\;\\;\n\\mathbf{\\beta} = \\begin{pmatrix} \\beta_0 \\\\ \\beta_1\\end{pmatrix} \\;\\;\\; \\mathbf{\\epsilon} = \\begin{pmatrix} \\epsilon_1 \\\\ \\epsilon_2 \\\\ \\vdots \\\\ \\epsilon_n \\end{pmatrix}\n\\]\nSolving the linear regression means finding the best-fitting \\(\\beta_0\\), \\(\\beta_1\\) and \\(\\sigma\\) (controlling the spread of the distribution of the \\(\\epsilon_i\\)). Our goal is to find the values of \\(\\beta\\) that minimize \\(\\sigma\\) (meaning that the points fall closer to the line). Rearranging:\n\\[\n\\sum_i \\epsilon_i^2 = \\sum_i (y_i - \\beta_0 - \\beta_1 x_i)^2 =  \\Vert \\mathbf{Y} - \\mathbf{X} \\mathbf{\\beta} \\Vert\n\\]\nAs such, we want to find the vector \\(\\beta\\) that minimizes the norm \\(\\Vert \\mathbf{Y} - \\mathbf{X} \\mathbf{\\beta} \\Vert\\). One can prove that this is accomplished using:\n\\[\n\\hat{\\mathbf{\\beta}} = \\left( \\mathbf{X}^T \\mathbf{X} \\right)^{-1} \\mathbf{X}^T \\mathbf{Y}\n\\]\nWhere the matrix \\(\\left( \\mathbf{X}^T \\mathbf{X} \\right)^{-1} \\mathbf{X}^T\\) is known as the (left) Moore-Penrose pseudo-inverse of \\(\\mathbf{X}\\). Let’s try to do this in R (the “hard” way):\n\nX <- cbind(1, father.son$fheight)\nY <- cbind(father.son$sheight)\nbest_beta <- solve(t(X) %*% X) %*% t(X) %*% Y\nbest_beta\n\n          [,1]\n[1,] 33.886604\n[2,]  0.514093\n\n\nWe find that the best fitting line has an intercept of about 34 inches, and a slope of 0.51. Of course, R can do this calculation for you with just one command:\n\nbest_beta_easy <- lm(sheight ~ fheight, data = father.son)\nbest_beta_easy\n\n\nCall:\nlm(formula = sheight ~ fheight, data = father.son)\n\nCoefficients:\n(Intercept)      fheight  \n    33.8866       0.5141  \n\n\nBut it feels good to know that this is not black magic! In fact, plotting it on top of the data does not even require computing the coefficients:\n\npl + geom_smooth(method = \"lm\") # lm stands for linear model\n\n\n\n\n\n\n9.2.2 Minimizing the sum of squares\nWhat we just did is called “ordinary least-squares”: we are trying to minimize the distance from the data points to their projection on the best-fitting line. We can compute the “predicted” heights as:\n\\[\n\\hat{\\mathbf{Y}} = \\mathbf{X}\\hat{\\mathbf{\\beta}}\n\\]\nThen, we’re minimizing \\(\\Vert \\mathbf{Y} - \\hat{\\mathbf{Y}}\\Vert\\). We call \\(\\hat{\\mathbf{\\epsilon}} = \\mathbf{Y} - \\hat{\\mathbf{Y}}\\) the vector of residuals. From this, we can estimate the final parameter, \\(\\sigma\\):\n\\[\n\\sigma = \\sqrt{\\frac{\\sum_i \\hat{\\epsilon_i}^2}{n -  p}}\n\\]\nwhere \\(n\\) is the number of data points, and \\(p\\) is the number of parameters in \\(\\mathbf{\\beta}\\) (2 in this case); this measures the number of degrees of freedom. Let’s try to compute it:\n\ndegrees_of_freedom <- length(Y) - 2\ndegrees_of_freedom\n\n[1] 1076\n\nepsilon_hat <- X %*% best_beta - Y\nsigma <- sqrt(sum(epsilon_hat^2) / degrees_of_freedom)\nsigma\n\n[1] 2.436556\n\n\nIn R, you will find this reported as the Residual standard error when you call summary on your model:\n\nsummary(best_beta_easy)\n\n\nCall:\nlm(formula = sheight ~ fheight, data = father.son)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.8772 -1.5144 -0.0079  1.6285  8.9685 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 33.88660    1.83235   18.49   <2e-16 ***\nfheight      0.51409    0.02705   19.01   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.437 on 1076 degrees of freedom\nMultiple R-squared:  0.2513,    Adjusted R-squared:  0.2506 \nF-statistic: 361.2 on 1 and 1076 DF,  p-value: < 2.2e-16\n\n\nFinally, the coefficient of determination \\(R^2\\) is computed as:\n\\[\nR^2 = \\frac{\\sum_i (\\hat{y}_i - \\bar{y})^2}{\\sum_i ({y}_i - \\bar{y})^2}\n\\]\nwhere \\(\\bar{y}\\) is the mean of \\(y_i\\). If the regression has an intercept, then the \\(R^2\\) can vary between 0 and 1, with values close to 1 indicating a good fit to the data. Again, let’s compute it the hard way and then the easy way:\n\ny_bar <- mean(Y)\nR_2 <- sum((X %*% best_beta - y_bar)^2) / sum((Y - y_bar)^2)\nR_2\n\n[1] 0.2513401\n\n\n\n# look for Multiple R-squared:\nsummary(best_beta_easy)\n\n\nCall:\nlm(formula = sheight ~ fheight, data = father.son)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.8772 -1.5144 -0.0079  1.6285  8.9685 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 33.88660    1.83235   18.49   <2e-16 ***\nfheight      0.51409    0.02705   19.01   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.437 on 1076 degrees of freedom\nMultiple R-squared:  0.2513,    Adjusted R-squared:  0.2506 \nF-statistic: 361.2 on 1 and 1076 DF,  p-value: < 2.2e-16\n\n\n\n\n9.2.3 Assumptions of linear regression\nIn practice, when we are performing a linear regression, we are making a number of assumptions about the data. Here are the main ones:\n\nModel structure: we assume that the process generating the data is linear.\nExplanatory variable: we assume that this is measured without errors (!).\nResiduals: we assume that residuals are i.i.d. Normal.\nStrict exogeneity: the residuals should have conditional mean of 0.\n\n\\[\n\\mathbb E[\\epsilon_i | x_i] = 0\n\\]\n\nNo linear dependence: the columns of \\(\\mathbf{X}\\) should be linearly independent.\nHomoscedasticity: the variance of the residuals is independent of \\(x_i\\).\n\n\\[\n\\mathbb V[\\epsilon_i | x_i] =  \\sigma^2\n\\]\n\nErrors are uncorrelated between observations.\n\n\\[\n\\mathbb E[\\epsilon_i \\epsilon_j | x] = 0 \\; \\forall j \\neq i\n\\]"
  },
  {
    "objectID": "08-linearreg.html#linear-regression-in-action",
    "href": "08-linearreg.html#linear-regression-in-action",
    "title": "9  Linear models",
    "section": "9.3 Linear regression in action",
    "text": "9.3 Linear regression in action\nTo perform a slightly more complicated linear regression, we take the data from:\n\nPiwowar HA, Day RS, Fridsma DB (2007) Sharing detailed research data is associated with increased citation rate. PLoS ONE 2(3): e308.\n\nThe authors set out to demonstrate that sharing data accompanying papers tends to increase the number of citations received by the paper.\n\n# original URL \n# https://datadryad.org/stash/dataset/doi:10.5061/dryad.j2c4g\ndat <- read_csv(\"data/Piwowar_2011.csv\") \n# rename variables for easier handling\ndat <- dat %>% rename(IF = `Impact factor of journal`, \n                      NCIT = `Number of Citations in first 24 months after publication`, \n                      SHARE = `Is the microarray data publicly available`) %>% \n      dplyr::select(NCIT, IF, SHARE)\n\nFirst, let’s run a model in which the logarithm of the number of citations + 1 is regressed against the “Impact Factor” of the journal (which is a measure of “prestige” based on the average number of citations per paper received):\n\nmy_model <- lm(log(NCIT + 1) ~ log(IF + 1), data = dat)\nsummary(my_model)\n\n\nCall:\nlm(formula = log(NCIT + 1) ~ log(IF + 1), data = dat)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.65443 -0.44272 -0.00769  0.43414  1.62817 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   0.1046     0.2951   0.355    0.724    \nlog(IF + 1)   1.2920     0.1196  10.802   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.6887 on 83 degrees of freedom\nMultiple R-squared:  0.5844,    Adjusted R-squared:  0.5794 \nF-statistic: 116.7 on 1 and 83 DF,  p-value: < 2.2e-16\n\n\nYou can see that the higher the impact factor, the higher the number of citations received (unsurprisingly!). Now let’s add another variable, detailing whether publicly available data accompany the paper:\n\nmy_model2 <- lm(log(NCIT + 1) ~ log(IF + 1) + SHARE, data = dat)\nsummary(my_model2)\n\n\nCall:\nlm(formula = log(NCIT + 1) ~ log(IF + 1) + SHARE, data = dat)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.98741 -0.43768  0.08726  0.41847  1.35634 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   0.4839     0.3073   1.575  0.11918    \nlog(IF + 1)   1.0215     0.1442   7.084  4.4e-10 ***\nSHARE         0.5519     0.1802   3.062  0.00297 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.6564 on 82 degrees of freedom\nMultiple R-squared:  0.627, Adjusted R-squared:  0.6179 \nF-statistic: 68.92 on 2 and 82 DF,  p-value: < 2.2e-16\n\n\nWe find that sharing data is associated with a larger number of citations."
  },
  {
    "objectID": "08-linearreg.html#a-regression-gone-wild",
    "href": "08-linearreg.html#a-regression-gone-wild",
    "title": "9  Linear models",
    "section": "9.4 A regression gone wild",
    "text": "9.4 A regression gone wild\nEven when the fit is good, and assumptions are met, one can still end up with a fantastic blunder. To show this, we are going to repeat a study published in Nature (no less!) by Tatem et al. You can find the study here. Briefly, the Authors gathered data on the 100m sprint at the Olympics from 1900 to 2004, for both men and women. We can do the same:\n\nolympics <- read_csv(\"data/100m_dash.csv\")\n\nThen, they fitted a linear regression through the points, for both men and women. So far, so good:\n\nggplot(data = olympics %>% filter(Year > 1899, Year < 2005)) + \n  aes(x = Year, y = Result, colour = Gender) + \n  geom_point() + geom_smooth(method = \"lm\")\n\n\n\n\nThe fit is quite good:\n\nsummary(lm(Result ~ Year*Gender,\n  data = olympics %>% filter(Year > 1899, Year < 2005)))\n\n\nCall:\nlm(formula = Result ~ Year * Gender, data = olympics %>% filter(Year > \n    1899, Year < 2005))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.38617 -0.05428 -0.00071  0.08239  0.32174 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  31.808278   2.179491  14.594  < 2e-16 ***\nYear         -0.010997   0.001116  -9.855 1.24e-11 ***\nGenderW      10.952646   4.371678   2.505   0.0170 *  \nYear:GenderW -0.005011   0.002228  -2.249   0.0309 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1707 on 35 degrees of freedom\nMultiple R-squared:  0.9304,    Adjusted R-squared:  0.9244 \nF-statistic: 155.9 on 3 and 35 DF,  p-value: < 2.2e-16\n\n\nAn \\(R^2\\) of 0.93, the pinnacle of a good linear regression. Now however, comes the problem. The Authors noticed that the times recorded for women are falling faster than those for men, meaning that the gender gap is reducing. Will it ever disappear? Just extend the regression and project forward:\n\nggplot(data = olympics %>% filter(Year > 1899, Year < 2005)) + \n  aes(x = Year, y = Result, colour = Gender) + \n  geom_point() + geom_smooth(method = \"lm\", fullrange = TRUE, se = FALSE) +\n  xlim(c(1890, 2200)) + ylim(c(0, 13))\n\n\n\n\nYou can see that the lines are touching in sometimes before 2200! Then women will overrun men.\nThere are a number of things that are wrong with this result. First, by the same logic, computers will soon go faster than the speed of light, the number of people on planet Earth will be in the hundreds of billions, and the price of sequencing will drop so much that we will be paid instead of paying to get our samples sequenced…\nSecond, if we extend backwards, rather than forward, we would find that Roman women would take more than a minute to run 100m (possibly, because of the uncomfortable tunics and sandals…).\n\nggplot(data = olympics %>% filter(Year > 1899, Year < 2005)) + \n  aes(x = Year, y = Result, colour = Gender) + \n  geom_point() + geom_smooth(method = \"lm\", fullrange = TRUE, se = FALSE) +\n  xlim(c(-2000, 2200)) + ylim(c(0, 75))\n\n\n\n\nAs Neil Bohr allegedly said (but this is disputed), “Prediction is very difficult, especially about the future”. The fact is that any non-linear curve looks quite linear if we are only considering a small range of values on the x-axis. To prove this point, let’s add the data from 2004 to today:\n\nggplot(data = olympics %>% filter(Year > 1899)) + \n  aes(x = Year, y = Result, colour = Gender) + \n  geom_point() + geom_smooth(method = \"lm\", fullrange = TRUE, se = FALSE) +\n  xlim(c(1890, 2400)) + ylim(c(0, 13))\n\n\n\n\nYou can see that the process has already slowed down: now it would take an extra century before the “momentous sprint”.\nSo many things were wrong with this short paper, that Nature was showered with replies. My favorite is from a Cambridge statistician (the Authors were from Oxford, ça va sans dire); it is perfectly short and venomous—a good candidate for the Nobel prize in Literature!\n\nSir — A. J. Tatem and colleagues calculate that women may outsprint men by the middle of the twenty-second century (Nature 431, 525; 2004). They omit to mention, however, that (according to their analysis) a far more interesting race should occur in about 2636, when times of less than zero seconds will be recorded. In the intervening 600 years, the authors may wish to address the obvious challenges raised for both time-keeping and the teaching of basic statistics. — Kenneth Rice"
  },
  {
    "objectID": "08-linearreg.html#more-advanced-topics",
    "href": "08-linearreg.html#more-advanced-topics",
    "title": "9  Linear models",
    "section": "9.5 More advanced topics",
    "text": "9.5 More advanced topics\n\n9.5.1 Categorical variables in linear models\nIn the example above, we have built the model:\n\\[\n\\log(\\text{NCIT} + 1) = \\beta_0 + \\beta_1 (\\log(\\text{IF} + 1))_i + \\beta_2 (\\text{SHARE})_i + \\epsilon_i\n\\]\nIn this case, the variable SHARE takes values of 1 or 0. As such, when the data were not shared (SHARE = 0) the model reduces to the previous one, in which \\(\\beta_2\\) was absent. The coefficient \\(\\beta_2\\) measures the increase in the log of citation count when data are shared.\nThe same approach can be taken whenever you have categorical values: R will automatically create dummy variables each encoding whether the ith data point belongs to a particular category. For example, suppose you want to predict the height of a child based on the height of the father, and that you also collected the gender, in three categories: F for female, M for male, U for unknown. Then you could use this information to build the model:\n\\[\n\\text{height}_i = \\beta_0 + \\beta_1 \\text{(height of father)}_i + \\beta_2 (\\text{gender is M})_i + \\beta_3 (\\text{gender is U})_i + \\epsilon_i\n\\]\nwhere the variable gender is M takes value 1 when the gender is M and 0 otherwise, and gender is U takes value 1 when the gender is unknown and 0 otherwise. As such, when the gender is F both variables will be zero, and \\(\\beta_2\\) and \\(\\beta_3\\) measure the increase (or decrease) in height for males and those with unspecified gender, respectively. While R does this for you automatically, understanding what is going on “under the hood” is essential for interpreting the results.\n\n\n9.5.2 Interactions in linear models\nSometimes we think that our explanatory variables could “interact”. For example, suppose you want to predict the BMI of people. What we have available is the average caloric intake, the height, gender, and whether they are vegetarian, vegan, or omnivores. A simple model could be:\n\\[\n\\text{BMI}_i = \\beta_0 + \\beta_h \\text{height}_i + \\beta_c \\text{calories}_i + \\beta_g \\text{gender}_i + \\epsilon_i\n\\]\nWe could add the type of diet as a factor:\n\\[\n\\text{BMI}_i = \\beta_0 + \\beta_h \\text{height}_i + \\beta_c \\text{calories}_i + \\beta_g \\text{gender}_i + \\beta_d \\text{diet}_i + \\epsilon_i\n\\]\nHowever, suppose that we believe the type of diet to affect differentially men and women. Then, we would like to create an “interaction” (e.g., paleo-female, vegan-male):\n\\[\n\\text{BMI}_i = \\beta_0 + \\beta_h \\text{height}_i + \\beta_c \\text{calories}_i + \\beta_g \\text{gender}_i + \\beta_d \\text{diet}_i + \\beta_{gd} \\text{gender:diet}_i + \\epsilon_i\n\\]\nwhere the colon signals “interaction”. In R, this would be coded as lm(BMI ~ height + calories + gender * diet). A simpler model is one in which we only account for the gender:diet interaction, but not for the separate effects of gender and diet:\n\\[\n\\text{BMI}_i = \\beta_0 + \\beta_h \\text{height}_i + \\beta_c \\text{calories}_i + \\beta_{gd}\\text{gender:diet}_i + \\epsilon_i\n\\]\nwhich in R can be coded as lm(BMI ~ height + calories + gender:diet). Finally, for some models you believe the intercept should be 0 (note that this makes the \\(R^2\\) statistics uninterpretable!). In R, just put -1 at the end of the definition of the model (e.g., lm(BMI ~ height + calories + gender:diet - 1)).\n\n\n9.5.3 Regression diagnostics\nNow that we know the mechanics of linear regression, we turn to diagnostics: how can we make sure that the model fits the data “well”? We start by analyzing a data set assembled by Anscombe (The American Statistician, 1973)\n\ndat <- read_csv(\"data/Anscombe_1973.csv\")\n\nThe file comprised four data sets. We perform a linear regression using each data set separately:\n\nlm(Y ~ X, data = dat %>% filter(Data_set == \"Data_1\"))\n\n\nCall:\nlm(formula = Y ~ X, data = dat %>% filter(Data_set == \"Data_1\"))\n\nCoefficients:\n(Intercept)            X  \n     3.0001       0.5001  \n\nlm(Y ~ X, data = dat %>% filter(Data_set == \"Data_2\"))\n\n\nCall:\nlm(formula = Y ~ X, data = dat %>% filter(Data_set == \"Data_2\"))\n\nCoefficients:\n(Intercept)            X  \n      3.001        0.500  \n\nlm(Y ~ X, data = dat %>% filter(Data_set == \"Data_3\"))\n\n\nCall:\nlm(formula = Y ~ X, data = dat %>% filter(Data_set == \"Data_3\"))\n\nCoefficients:\n(Intercept)            X  \n     3.0025       0.4997  \n\nlm(Y ~ X, data = dat %>% filter(Data_set == \"Data_4\"))\n\n\nCall:\nlm(formula = Y ~ X, data = dat %>% filter(Data_set == \"Data_4\"))\n\nCoefficients:\n(Intercept)            X  \n     3.0017       0.4999  \n\n\nAs you can see, each data set is best fit by the same line, with intercept 3 and slope \\(\\frac{1}{2}\\). Plotting the data, however, shows that the situation is more complicated:\n\nggplot(data = dat) + aes(x = X, y = Y, colour = Data_set) + \n  geom_point() + geom_smooth(method = \"lm\", se = FALSE) + \n  facet_wrap(~Data_set)\n\n\n\n\nData_1 is fitted quite well; Data_2 shows a marked nonlinearity; all points but one in Data_3 are on the same line, but a single outlier shifts the line considerably; finally, in Data_4 a single point is responsible for the fitting line: all other values of X are exactly the same. Inspecting the graphs, we would conclude that we can trust our model only in the first case. When you are performing a multiple regression, however, it is hard to see whether we’re in case 1, or one of the other cases. R provides a number of diagnostic tools which can help you decide whether the fit to the data is good.\n\n\n9.5.4 Plotting the residuals\nThe first thing you want to do is to plot the residuals as a function of the fitted values. This plot should make it apparent whether the data was linear or not. The package lindia (linear regression diagnostics) makes it easy to produce this type of plot using ggplot2:\n\ngg_resfitted(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_1\"))) + geom_smooth(method = \"loess\")\n\n\n\n\nWhat you are looking for is an approximately flat line, meaning that the residuals are approximately normally distributed with mean zero for each fitted value. This is not the case in the other data sets:\n\ngg_resfitted(lm(Y ~ X, data = dat %>% \n                  filter(Data_set == \"Data_2\"))) + \n  geom_smooth(method = \"loess\")\n\n\n\ngg_resfitted(lm(Y ~ X, data = dat %>% \n                  filter(Data_set == \"Data_3\"))) + \n  geom_smooth(method = \"loess\")\n\n\n\ngg_resfitted(lm(Y ~ X, data = dat %>% \n                  filter(Data_set == \"Data_4\"))) + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n9.5.5 Q-Q Plot\nWe can take this further, and test whether the residuals follow a normal distribution. In particular, we can estimate the density of the residuals, and plot it against the density of a normal distribution:\n\ngg_qqplot(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_1\")))\n\n\n\ngg_qqplot(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_2\")))\n\n\n\ngg_qqplot(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_3\")))\n\n\n\ngg_qqplot(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_4\")))\n\n\n\n\nHere, you are looking for a good match to the 1:1 line; outliers will be found far from the line (e.g., case 3).\n\n\n9.5.6 Cook’s distance\nAnother way to detect outliers is to compute the Cook’s distance for every point. Briefly, this statistic measures the effect on the regression we would obtain if we were to remove a point.\n\ngg_cooksd(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_1\")))\n\n\n\ngg_cooksd(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_2\")))\n\n\n\ngg_cooksd(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_3\")))\n\n\n\ngg_cooksd(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_4\")))\n\n\n\n\n\n\n9.5.7 Leverage\nPoints that strongly influence the regression are said to have much “leverage”:\n\ngg_resleverage(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_1\")))\n\n\n\ngg_resleverage(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_2\")))\n\n\n\ngg_resleverage(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_3\")))\n\n\n\ngg_resleverage(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_4\")))\n\n\n\n\n\n\n9.5.8 Running all diagnostics\nThese are but a few of the diagnostics available. To run all diagnostics on a given model, call\n\ngg_diagnose(lm(Y ~ X, data = dat %>% filter(Data_set == \"Data_2\")))"
  },
  {
    "objectID": "08-linearreg.html#transforming-the-data",
    "href": "08-linearreg.html#transforming-the-data",
    "title": "9  Linear models",
    "section": "9.6 Transforming the data",
    "text": "9.6 Transforming the data\nOften, one needs to transform the data before running a linear regression, in order to fulfill the assumptions. We’re going to look at the salary of professors at the University of California to show how this is done.\n\n# read the data\n# Original URL\ndt <- read_csv(\"https://raw.githubusercontent.com/dailybruin/uc-salaries/master/data/uc_salaries.csv\", \n               col_names = c(\"first_name\", \"last_name\", \"title\", \"a\", \"pay\", \"loc\", \"year\", \"b\", \"c\", \"d\")) %>% \n      dplyr::select(first_name, last_name, title, loc, pay)\n# get only profs\ndt <- dt %>% filter(title %in% c(\"PROF-AY\", \"ASSOC PROF-AY\", \"ASST PROF-AY\", \n                                 \"PROF-AY-B/E/E\", \"PROF-HCOMP\", \"ASST PROF-AY-B/E/E\", \n                                 \"ASSOC PROF-AY-B/E/E\", \"ASSOC PROF-HCOMP\", \"ASST PROF-HCOMP\"))\n# remove those making less than 30k (probably there only for a period)\ndt <- dt %>% filter(pay > 30000)\ndt\n\n# A tibble: 4,915 × 5\n   first_name       last_name     title           loc               pay\n   <chr>            <chr>         <chr>           <chr>           <dbl>\n 1 CHRISTOPHER U    ABANI         PROF-AY         Riverside     151200 \n 2 HENRY DON ISAAC  ABARBANEL     PROF-AY         San Diego     160450.\n 3 ADAM R           ABATE         ASST PROF-HCOMP San Francisco  85305.\n 4 KEVORK N.        ABAZAJIAN     ASST PROF-AY    Irvine         82400.\n 5 M. ACKBAR        ABBAS         PROF-AY         Irvine        168700.\n 6 ABUL K           ABBAS         PROF-HCOMP      San Francisco 286824.\n 7 LEONARD J        ABBEDUTO      PROF-HCOMP      Davis         200385.\n 8 DON P            ABBOTT        PROF-AY         Davis         106400.\n 9 GEOFFREY WINSTON ABBOTT        PROF-HCOMP      Irvine        125001.\n10 KHALED A.S.      ABDEL-GHAFFAR PROF-AY-B/E/E   Davis         120100.\n# ℹ 4,905 more rows\n\n\nThe distribution of salaries is very skewed — it looks like a log-normal distribution:\n\ndt %>% ggplot() + aes(x = pay) + geom_histogram(binwidth = 10000)\n\n\n\n\nIf we set consider the log of pay, we get closer to a normal:\n\ndt %>% ggplot() + aes(x = log2(pay)) + geom_histogram(binwidth = 0.5)\n\n\n\n\nWe can try to explain the pay as a combination of title and location:\n\nunscaled <- lm(pay ~ title + loc, data = dt)\nsummary(unscaled)\n\n\nCall:\nlm(formula = pay ~ title + loc, data = dt)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-149483  -25197   -1679   18305  213684 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                 98397       2003  49.133  < 2e-16 ***\ntitleASSOC PROF-AY-B/E/E    46898       3402  13.786  < 2e-16 ***\ntitleASSOC PROF-HCOMP       25428       3955   6.430 1.40e-10 ***\ntitleASST PROF-AY          -15060       2370  -6.356 2.26e-10 ***\ntitleASST PROF-AY-B/E/E     17405       3949   4.407 1.07e-05 ***\ntitleASST PROF-HCOMP         5545       4800   1.155  0.24805    \ntitlePROF-AY                46095       1719  26.815  < 2e-16 ***\ntitlePROF-AY-B/E/E          73586       2283  32.233  < 2e-16 ***\ntitlePROF-HCOMP            115094       2356  48.855  < 2e-16 ***\nlocDavis                   -19101       2304  -8.291  < 2e-16 ***\nlocIrvine                  -12240       2351  -5.206 2.01e-07 ***\nlocLos Angeles               7699       2082   3.697  0.00022 ***\nlocMerced                  -20940       4484  -4.669 3.10e-06 ***\nlocRiverside               -18333       2893  -6.337 2.56e-10 ***\nlocSan Diego               -11851       2227  -5.322 1.07e-07 ***\nlocSan Francisco           -15808       3493  -4.525 6.17e-06 ***\nlocSanta Barbara           -16579       2411  -6.877 6.89e-12 ***\nlocSanta Cruz              -24973       2930  -8.523  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 40970 on 4897 degrees of freedom\nMultiple R-squared:  0.5058,    Adjusted R-squared:  0.504 \nF-statistic: 294.8 on 17 and 4897 DF,  p-value: < 2.2e-16\n\ngg_diagnose(lm(pay ~ title + loc, data = dt))\n\n\n\n\nTo note: Berkeley has been taken as the baseline location. Similarly, ASSOC-PROF AY has been taken as the baseline title.\nThe Q-Q plot shows that this is a terrible model! Now let’s try with the transformed data:\n\nscaled <- lm(log2(pay) ~ title + loc, data = dt)\nsummary(scaled)\n\n\nCall:\nlm(formula = log2(pay) ~ title + loc, data = dt)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.23150 -0.22355  0.01801  0.25702  1.24529 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              16.52889    0.02037 811.287  < 2e-16 ***\ntitleASSOC PROF-AY-B/E/E  0.52397    0.03461  15.141  < 2e-16 ***\ntitleASSOC PROF-HCOMP     0.34517    0.04023   8.579  < 2e-16 ***\ntitleASST PROF-AY        -0.29772    0.02411 -12.351  < 2e-16 ***\ntitleASST PROF-AY-B/E/E   0.18997    0.04017   4.729 2.32e-06 ***\ntitleASST PROF-HCOMP      0.06826    0.04883   1.398  0.16220    \ntitlePROF-AY              0.56942    0.01749  32.562  < 2e-16 ***\ntitlePROF-AY-B/E/E        0.81217    0.02322  34.971  < 2e-16 ***\ntitlePROF-HCOMP           1.12262    0.02397  46.841  < 2e-16 ***\nlocDavis                 -0.20826    0.02344  -8.886  < 2e-16 ***\nlocIrvine                -0.14533    0.02392  -6.075 1.33e-09 ***\nlocLos Angeles            0.06309    0.02118   2.979  0.00291 ** \nlocMerced                -0.24781    0.04562  -5.432 5.84e-08 ***\nlocRiverside             -0.22030    0.02943  -7.485 8.43e-14 ***\nlocSan Diego             -0.14584    0.02266  -6.437 1.33e-10 ***\nlocSan Francisco         -0.11260    0.03554  -3.168  0.00154 ** \nlocSanta Barbara         -0.20706    0.02453  -8.442  < 2e-16 ***\nlocSanta Cruz            -0.29716    0.02981  -9.969  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4168 on 4897 degrees of freedom\nMultiple R-squared:  0.5372,    Adjusted R-squared:  0.5356 \nF-statistic: 334.3 on 17 and 4897 DF,  p-value: < 2.2e-16\n\ngg_diagnose(lm(log2(pay) ~ title + loc, data = dt))\n\n\n\n\nMuch better! Remember to inspect your explanatory and response variables. Ideally, you want the response to be normally distributed. Sometimes one or many covariates can have a nonlinear relationship with the response variable, and you should transform them prior to analysis."
  },
  {
    "objectID": "09-ANOVA.html#analysis-of-variance",
    "href": "09-ANOVA.html#analysis-of-variance",
    "title": "10  ANOVA",
    "section": "10.1 Analysis of variance",
    "text": "10.1 Analysis of variance\nANOVA is a method for testing the hypothesis that there is no difference in means of subsets of measurements grouped by factors. Essentially, this is a generalization of linear regression to categorical explanatory variables instead of numeric variables, and it is based on very similar assumptions.\nANOVA perform at its best when we have a particular experimental design: a) we divide the population into groups of equal size (balanced design); b) we assign “treatments” to the subjects at random (randomized design); in case of multiple treatment combinations, we perform an experiment for each combination (factorial design); in most cases, we have a “null” treatment (e.g., placebo).\nWe speak of one-way ANOVA when there is a single axis of variation to our treatment (e.g., no intervention, option A, option B), two-way ANOVA when we apply two treatments for each group (e.g., no treatment, Ab, AB, aB), and so forth. Extensions include ANCOVA (ANalysis of COVAriance) and MANOVA (Multivariate ANalysis Of VAriance).\nFor example, we want to test whether a COVID vaccine protects against infection. We can assign at random a population of volunteers to two classes (vaccine/placebo) and contrast the number of people who got sick within 3 months from treatment in the two classes. Of course, we can simply perform a t-test. But what if we assign people to different classes (e.g., M/F, under/over 65 y/o), and want to contrast the mean infection rate across all classes?\n\n10.1.1 ANOVA assumptions\nANOVA tests whether samples are taken from distributions with the same mean:\n\nNull hypothesis: the means of the different groups are the same.\nAlternative hypothesis: At least one sample mean is not equal to the others.\n\nLet \\(Y\\) indicate the response variable, and study the simplest case of one-way ANOVA. We have divided the samples in \\(k\\) classes of size \\(J_1, \\ldots, J_k\\) such that \\(n=\\sum_i J_i\\). We write an equation for \\(Y_{ij}\\) (the \\(j\\)th observation in group \\(i\\)):\n\\[\nY_{ij} = \\mu + \\alpha_i + \\epsilon_{ij}\n\\]\nwhere \\(\\mu\\) is the overall mean; \\(\\mu + \\alpha_i\\) is the mean of group \\(i\\)—we can always choose the parameters such that \\(\\sum_i \\alpha_i = 0\\); and, finally, \\(\\epsilon_{ij}\\) is the deviation from the group mean. Practically, we are testing whether at least one of the \\(\\alpha_i \\neq 0\\).\nNote that we are making the same assumptions as for linear regression:\n\nThe observations are obtained independently (and randomly) from the population defined by the factor levels (groups)\nThe measurements for each factor level are independent and normally distributed\nThese normal distributions have the same variance\n\n\n\n10.1.2 How one-way ANOVA works\nWe have \\(k\\) groups, and define the overall mean \\(\\bar{y} = \\sum_i \\sum_j Y_{ij} / J_{i}\\), where \\(J_i\\) is the sample size for group \\(i\\). Then the total sum of squared deviations (SSD) is simply:\n\\[\nSSD = \\sum_{i = 1}^k \\sum_{j = 1}^{J_{i}} \\left(Y_{ij} - \\bar{y}\\right)^2\n\\]\nand the associated degrees of freedom \\(n-1\\). We car rewrite this as:\n\\[\nSSD = \\sum_{i = 1}^k J_{i} \\left(\\bar{y}_i - \\bar{y} \\right)^2 + \\sum_{j = 1}^{J_{i}} \\left(Y_{ij} - \\bar{y}_i \\right)^2\n\\]\nwhere now \\(\\bar{y}_i\\) is the mean for the samples in treatment (factor, group) \\(i\\). We call the first term in the r.h.s. the between treatment sum of squares (SST) and the second term the within treatment (or residual) ssq (SSE). As such \\(SSD = SST + SSE\\). Similarly, we can decompose SSD as:\n\\[\nSSD = \\sum_{j = 1}^{J_{i}} Y_{ij}^2 - n \\bar{y}^2 = TSS - SSA\n\\] where now TSS is the total sum of squares and SSA is the sum of squares due to the average. Combining the two equations, we can rewrite TSS as the sum of three components:\n\\[\nTSS = SSA + SST + SSE\n\\]\nNote that the degrees of freedom associated with each term are \\(1\\), \\(k-1\\) and \\(n-k\\), respectively. What remains to be proved is how to conduct inference."
  },
  {
    "objectID": "09-ANOVA.html#inference-in-one-way-anova",
    "href": "09-ANOVA.html#inference-in-one-way-anova",
    "title": "10  ANOVA",
    "section": "10.2 Inference in one-way ANOVA",
    "text": "10.2 Inference in one-way ANOVA\nIf the null hypothesis were true, then we would expect the between-treatment “variance” SST, divided by the degrees of freedom (\\(k-1\\)) to be the same as the within-treatment “variance” divided by \\(n-k\\).\nLet’s look at this hypothesis more closely. If the null hypothesis were true, then \\(SST\\) would be the sum of the squares of independent, normally distributed random variables with mean zero and variance \\(\\sigma^2\\). If you remember, the distribution of:\n\\[\nQ = \\sum_{i=1}^d Z_i^2 \\sim \\chi^2(d)\n\\]\nis called the \\(\\chi^2\\) distribution with \\(d\\) degrees of freedom. Then, under the null hypothesis, \\(SST \\sim \\chi^2(k-1)\\) Similarly, \\(SSE \\sim \\chi^2(n-k)\\). Taking the ratio (having normalized using the degrees of freedom), we obtain:\n\\[\n\\frac{SST}{k-1} \\frac{n-k}{SSE} = \\frac{MST}{MSE} \\sim F(k-1, n-k)\n\\] where \\(F\\) is the F-distribution (in R, you can sample from this distribution using df(x, deg1, deg2)).\n\n10.2.1 Example of comparing diets\nFor example, the following data contains measurements of weights of individuals before starting a diet, after 6 weeks of dieting, the type of diet (1, 2, 3), and other variables.\n\nlibrary(tidyverse)\n# Original URL: \"https://www.sheffield.ac.uk/polopoly_fs/1.570199!/file/stcp-Rdataset-Diet.csv\"\ndiet <- read_csv(\"data/Diet.csv\") \ndiet <- diet %>% mutate(weight.loss = pre.weight - weight6weeks) \nglimpse(diet)\n\nRows: 78\nColumns: 8\n$ Person       <dbl> 25, 26, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 27…\n$ gender       <dbl> NA, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Age          <dbl> 41, 32, 22, 46, 55, 33, 50, 50, 37, 28, 28, 45, 60, 48, 4…\n$ Height       <dbl> 171, 174, 159, 192, 170, 171, 170, 201, 174, 176, 165, 16…\n$ pre.weight   <dbl> 60, 103, 58, 60, 64, 64, 65, 66, 67, 69, 70, 70, 72, 72, …\n$ Diet         <dbl> 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, …\n$ weight6weeks <dbl> 60.0, 103.0, 54.2, 54.0, 63.3, 61.1, 62.2, 64.0, 65.0, 60…\n$ weight.loss  <dbl> 0.0, 0.0, 3.8, 6.0, 0.7, 2.9, 2.8, 2.0, 2.0, 8.5, 1.9, 3.…\n\n# make diet into factors\ndiet <- diet %>% mutate(Diet = factor(Diet))\n\nWrite a script below using ggplot to generate boxplots for the weights after three different diets.\n\ndiet %>% ggplot() + \n  aes(y = weight.loss, \n      x = Diet, \n      fill = Diet) + \n  geom_boxplot()\n\n\n\n\nWe can see that there weight loss outcomes vary for each diet, but diet 3 seems to produce a larger effect on average. But is the difference between the means/medians actually due to the diet, or could it have been produced by sampling from the same distribution, given that we see substantial variation within each diet group?\nHere is the result of running ANOVA on the given data set:\n\ndiet_anova  <-  aov(weight.loss ~ Diet, data=diet) # note that this looks like lm!\nsummary(diet_anova)\n\n            Df Sum Sq Mean Sq F value  Pr(>F)   \nDiet         2   71.1   35.55   6.197 0.00323 **\nResiduals   75  430.2    5.74                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nprint(diet_anova)\n\nCall:\n   aov(formula = weight.loss ~ Diet, data = diet)\n\nTerms:\n                    Diet Residuals\nSum of Squares   71.0937  430.1793\nDeg. of Freedom        2        75\n\nResidual standard error: 2.394937\nEstimated effects may be unbalanced\n\n\n\n\n10.2.2 Comparison of theory and ANOVA output\nLet’s compare this with the calculations from the data set:\n\n# 1) compute the overall mean\nbar_y <- diet %>% \n  summarise(bar_y = mean(weight.loss)) %>% \n  as.numeric()\n# 2) compute means by diet and sample size by diet\nbar_y_i <- diet %>% \n  group_by(Diet) %>% \n  summarise(bar_y_i = mean(weight.loss),\n            J_i = n())\n#(NB: almost balanced!)\n\n# 3) compute degrees of freedom\nn <- nrow(diet)\nk <- nrow(diet %>% dplyr::select(Diet) %>% distinct())\ndeg_freedom <- c(1, k - 1, n - k)\n# 4) compute SSA, SST and SSE\nSSA <- n * bar_y^2\nSST <- bar_y_i %>% \n  mutate(tmp = J_i * (bar_y_i - bar_y)^2) %>% \n  summarise(sst = sum(tmp)) %>% \n  as.numeric()\nSSE <- diet %>% \n  inner_join(bar_y_i, by = \"Diet\") %>% \n  mutate(tmp = (weight.loss - bar_y_i)^2) %>% \n  summarise(sse = sum(tmp)) %>% \n  as.numeric()\n# 5) show that TSS = SSA + SST + SSE\nTSS <- diet %>% \n  summarise(tss = sum(weight.loss^2)) %>% \n  as.numeric()\nprint(c(TSS, SSA + SST + SSE))\n\n[1] 1654.35 1654.35\n\n\nNow that we have all the numbers in place, we can compute our F-statistics, and the associated p-value:\n\nFs <- (SST / (deg_freedom[2])) / (SSE / (deg_freedom[3]))\npval <- 1 - pf(Fs, deg_freedom[2], deg_freedom[3])\n\nContrast these with the output of aov:\n\nprint(deg_freedom[-1])\n\n[1]  2 75\n\nprint(c(SST, SSE))\n\n[1]  71.09369 430.17926\n\nprint(c(Fs, pval))\n\n[1] 6.197447453 0.003229014\n\nprint(summary(aov(weight.loss ~ Diet, data = diet)))\n\n            Df Sum Sq Mean Sq F value  Pr(>F)   \nDiet         2   71.1   35.55   6.197 0.00323 **\nResiduals   75  430.2    5.74                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nAt first glance, this process is not the same as fitting parameters for linear regression, but it is based on exactly the same assumptions: additive noise and additive effect of the factors, with the only difference being that factors are not numeric, so the effect of each one is added separately. One can run linear regression and calculate coefficients that are identical to the mean and the differences between means computed by ANOVA (and note the p-values too!)\n\ndiet.lm <- lm(weight.loss ~ Diet, data=diet)\nsummary(diet.lm)\n\n\nCall:\nlm(formula = weight.loss ~ Diet, data = diet)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.1259 -1.3815  0.1759  1.6519  5.7000 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   3.3000     0.4889   6.750 2.72e-09 ***\nDiet2        -0.2741     0.6719  -0.408  0.68449    \nDiet3         1.8481     0.6719   2.751  0.00745 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.395 on 75 degrees of freedom\nMultiple R-squared:  0.1418,    Adjusted R-squared:  0.1189 \nF-statistic: 6.197 on 2 and 75 DF,  p-value: 0.003229\n\nprint(diet.lm$coefficients)\n\n(Intercept)       Diet2       Diet3 \n  3.3000000  -0.2740741   1.8481481"
  },
  {
    "objectID": "09-ANOVA.html#further-steps",
    "href": "09-ANOVA.html#further-steps",
    "title": "10  ANOVA",
    "section": "10.3 Further steps",
    "text": "10.3 Further steps\n\n10.3.1 Post-hoc analysis\nThe ANOVA F-test tells us whether there is any difference in values of the response variable between the groups, but does not specify which group(s) are different. For this, a post-hoc test is used (Tukey’s “Honest Significant Difference”):\n\ntuk <- TukeyHSD(diet_anova)\ntuk\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = weight.loss ~ Diet, data = diet)\n\n$Diet\n          diff        lwr      upr     p adj\n2-1 -0.2740741 -1.8806155 1.332467 0.9124737\n3-1  1.8481481  0.2416067 3.454690 0.0201413\n3-2  2.1222222  0.5636481 3.680796 0.0047819\n\n\nThis compares the three pairs of groups and reports the p-value for the hypothesis that this particular pair has no difference in the response variable.\n\n\n10.3.2 Example of plant growth data\nExample taken from: One-Way ANOVA Test in R\n\nmy_data <- PlantGrowth # import built-in data\nhead(my_data)\n\n  weight group\n1   4.17  ctrl\n2   5.58  ctrl\n3   5.18  ctrl\n4   6.11  ctrl\n5   4.50  ctrl\n6   4.61  ctrl\n\n# Show the levels\nmy_data %>% dplyr::select(group) %>% distinct()\n\n  group\n1  ctrl\n2  trt1\n3  trt2\n\n\n\ngroup_by(my_data, group) %>%\n  summarise(\n    count = n(),\n    mean = mean(weight, na.rm = TRUE),\n    sd = sd(weight, na.rm = TRUE)\n  )\n\n# A tibble: 3 × 4\n  group count  mean    sd\n  <fct> <int> <dbl> <dbl>\n1 ctrl     10  5.03 0.583\n2 trt1     10  4.66 0.794\n3 trt2     10  5.53 0.443\n\n\n\nmy_data %>% \n  ggplot() + \n  aes(y = weight, x = group, \n      fill = group) + \n  geom_boxplot()\n\n\n\n\nExercise: perform ANOVA and Tukey’s HSD and interpret the results.\n\n\n10.3.3 Two-way ANOVA\nOne can compare the effect of two different factors simultaneously and see if considering both explains more of the variance than of one. This is equivalent to the multiple linear regression with two interacting variables. How would you interpret these results?\n\ndiet.fisher <- aov(weight.loss ~ Diet * gender, data = diet)\nsummary(diet.fisher)\n\n            Df Sum Sq Mean Sq F value  Pr(>F)   \nDiet         2   60.5  30.264   5.629 0.00541 **\ngender       1    0.2   0.169   0.031 0.85991   \nDiet:gender  2   33.9  16.952   3.153 0.04884 * \nResiduals   70  376.3   5.376                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n2 observations deleted due to missingness"
  },
  {
    "objectID": "09-ANOVA.html#investigate-the-uc-salaries-dataset",
    "href": "09-ANOVA.html#investigate-the-uc-salaries-dataset",
    "title": "10  ANOVA",
    "section": "10.4 Investigate the UC salaries dataset",
    "text": "10.4 Investigate the UC salaries dataset\n\n# read the data\n# Original URL\ndt <- read_csv(\"https://raw.githubusercontent.com/dailybruin/uc-salaries/master/data/uc_salaries.csv\", \ncol_names = c(\"first_name\", \"last_name\", \"title\", \"a\", \"pay\", \"loc\", \"year\", \"b\", \"c\", \"d\")) %>%  dplyr::select(first_name, last_name, title, loc, pay)\n\nRows: 175000 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): first_name, last_name, title, loc\ndbl (6): a, pay, year, b, c, d\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# get only profs\ndt <- dt %>% filter(title %in% c(\"PROF-AY\", \"ASSOC PROF-AY\", \"ASST PROF-AY\", \n                                 \"PROF-AY-B/E/E\", \"PROF-HCOMP\", \"ASST PROF-AY-B/E/E\", \n                                 \"ASSOC PROF-AY-B/E/E\", \"ASSOC PROF-HCOMP\", \"ASST PROF-HCOMP\"))\n# simplify titles\ndt <- dt %>% mutate(title = ifelse(grepl(\"ASST\", title), \"Assistant\", title))\ndt <- dt %>% mutate(title = ifelse(grepl(\"ASSOC\", title), \"Associate\", title))\ndt <- dt %>% mutate(title = ifelse(grepl(\"PROF\", title), \"Full\", title))\n# remove those making less than 50k (probably there only for a period)\ndt <- dt %>% filter(pay > 50000)\nglimpse(dt)\n\nRows: 4,795\nColumns: 5\n$ first_name <chr> \"CHRISTOPHER U\", \"HENRY DON ISAAC\", \"ADAM R\", \"KEVORK N.\", …\n$ last_name  <chr> \"ABANI\", \"ABARBANEL\", \"ABATE\", \"ABAZAJIAN\", \"ABBAS\", \"ABBAS…\n$ title      <chr> \"Full\", \"Full\", \"Assistant\", \"Assistant\", \"Full\", \"Full\", \"…\n$ loc        <chr> \"Riverside\", \"San Diego\", \"San Francisco\", \"Irvine\", \"Irvin…\n$ pay        <dbl> 151200.00, 160450.08, 85305.01, 82400.04, 168699.96, 286823…\n\n\n\nPlot the distributions of pay by location and title. Is it approximately normal? If not, transform the data.\n\n\n\n\n\nRun ANOVA for pay as dependent on the two factors separately, report the variance between means and the variance within groups, and the p-value for the null hypothesis.\n\n\n\n\n\nRun Tukey’s test for multiple comparison of means to report which group(s) are substantially different from the rest, if any.\n\n\n\n\n\nRun a two-way ANOVA for both location and title and provide interpretation.\n\n\n\n\n\n10.4.1 A word of caution about unbalanced designs\nWhen we have a different number of samples in each category, we might encounter some problems, as the order in which we enter the terms might matter: for example, run aov(pay ~ title + loc) vs. aov(pay ~ loc + title), and see that the sum of squares for the two models differ. In some cases, this might lead to the puzzling results—depending on how we enter the model, we might determine that a treatment has an effect or not. Turns out, there are three different ways to account for the sum-of-squares in ANOVA, all testing slightly different hypotheses. For balanced designs, they all return the same answer, but if you have different sizes, please read here."
  },
  {
    "objectID": "10-model_selection.html#goal",
    "href": "10-model_selection.html#goal",
    "title": "11  Model Selection",
    "section": "11.1 Goal",
    "text": "11.1 Goal\nFor any data you might want to fit, several competing statistical models seem to do a fairly good job. But which model should you use then?\nThe goal of model selection is to provide you with a disciplined way to choose among competing models. While there is no consensus on a single technique to perform model selection (we will examine some of the alternative paradigms below), all techniques are inspired by Occam’s razor: given models of similar explanatory power, choose the simplest.\nBut what does “simplest” mean? Measuring a model’s “complexity” is far from trivial, hence the different schools of thought. Some approaches simply count the number of free parameters, and penalize models with more parameters; others take into account how much each parameter should be “fine-tuned” to fit the data; other approaches are based on entirely different premises.\nBut why should you choose the simplest model? First, simpler models are easier to analyze, so that for example you could make analytical headway into the mechanics of the process you want to model; simpler models are also considered more beautiful. Second, you want to avoid over-fitting: each biological data set—however carefully crafted—is noisy, and you want to fit the signal, not the noise. If you include too much flexibility in your model, you will get what looks like an excellent fit for the specific data set, but you will be unable to fit other data sets to which your model should also apply.\n\nlibrary(tidyverse) # our friend \nlibrary(BayesFactor) # Bayesian model selection\nlibrary(tidymodels)  # for the parsnip package, along with the rest of tidymodels\nlibrary(palmerpenguins)\n# Helper packages\n#library(readr)       # for importing data\nlibrary(broom.mixed) # for converting bayesian models to tidy tibbles\nlibrary(dotwhisker)  # for visualizing regression results"
  },
  {
    "objectID": "10-model_selection.html#problems",
    "href": "10-model_selection.html#problems",
    "title": "11  Model Selection",
    "section": "11.2 Problems",
    "text": "11.2 Problems\n\nOver-fitting can lead to wrong inference. (The problem is similar to that of spurious correlations).\nIdentifiability of parameters. Sometimes it is hard/impossible to find the best value for a set of parameters. For example, when parameters only appear as sums or products in the model. In general, it is difficult to prove that the set of parameters leading to the maximum likelihood is unique.\nFinding best estimates. For complex models, it might be difficult to find the best estimates for a set of parameters. For example, several areas of the parameter space could yield a good fit, and the good sets of parameters could be separated by areas with poor fit. Then, we might get “stuck” in a sub-optimal region of the parameters space."
  },
  {
    "objectID": "10-model_selection.html#approaches-based-on-maximum-likelihoods",
    "href": "10-model_selection.html#approaches-based-on-maximum-likelihoods",
    "title": "11  Model Selection",
    "section": "11.3 Approaches based on maximum-likelihoods",
    "text": "11.3 Approaches based on maximum-likelihoods\nWe start by examining methods that are based on maximum likelihoods. For each data set and model, you find the best fitting parameters (those maximizing the likelihood). The parameters are said to be at their maximum-likelihood estimate.\n\n11.3.1 Likelihood function\nSome notation:\n\\(D \\to\\) the observed data\n\\(\\theta \\to\\) the free parameter(s) of the statistical model\n\\(L(\\theta \\vert D) \\to\\) the likelihood function, read “the likelihood of \\(\\theta\\) given the data”\n\\(\\hat{\\theta} \\to\\) the maximum-likelihood estimates (m.l.e.) of the parameters\n\\(\\mathcal L(\\theta \\vert D) = \\log L(\\theta \\vert D) \\to\\) the log-likelihood\n\\(L(\\hat{\\theta} \\vert D) \\to\\) the maximum likelihood\n\n\n11.3.2 Discrete probability distributions\nThe simplest case is that of a probability distribution function that takes discrete values. Then, the likelihood of \\(\\theta\\) given the data is simply the probability of obtaining the data when parameterizing the model with parameters \\(\\theta\\):\n\\[L(\\theta \\vert x_j) = P(X = x_j; \\theta)\\]\nFinding the m.l.e. of \\(\\theta\\) simply means finding the value(s) maximizing the probability of recovering the data under the model.\n\n\n11.3.3 Continuous probability distributions\nThe definition is more complex for continuous variables (because \\(P(X = x; \\theta) = 0\\) as there are infinitely many values…). What is commonly done is to use the density function \\(f(x; \\theta)\\) and considering the probability of obtaining a value \\(x \\in [x_j, x_j + h]\\), where \\(x_j\\) is our observed data point, and \\(h\\) is small. Then:\n\\[\nL(\\theta \\vert x_j) = \\lim_{h \\to 0^+} \\frac{1}{h} \\int_{x_j}^{x_j + h} f(x ; \\theta) dx = f(x_j ; \\theta)\n\\] Note that, contrary to probabilities, density values can take values greater than 1. As such, when the dispersion is small, one could end up with values of likelihood greater than 1 (or positive log-likelihoods). In fact, the likelihood function is proportional to but not necessarily equal to the probability of generating the data given the parameters: \\(L(\\theta\\vert X) \\propto P(X; \\theta)\\).\nIn many cases, maximizing the likelihood is equivalent to minimizing the sum of square errors (residuals)."
  },
  {
    "objectID": "10-model_selection.html#likelihoods-for-linear-regression",
    "href": "10-model_selection.html#likelihoods-for-linear-regression",
    "title": "11  Model Selection",
    "section": "11.4 Likelihoods for linear regression",
    "text": "11.4 Likelihoods for linear regression\nAs you remember, we have considered the normal equations:\n\\[\nY_i = \\beta_0 + \\beta_1 X_i + \\epsilon_i\n\\] Where the residuals have variance \\(\\sigma^2\\). The likelihood of the parameters is simply the product of the likelihood for each point:\n\\[\nL(\\beta_0, \\beta_1, \\sigma^2 \\vert Y) = \\prod_i L(\\beta_0, \\beta_1, \\sigma^2 \\vert Y_i) = \\prod_i f(Y_i; \\beta_0, \\beta_1, \\sigma^2) =\n\\prod_i \\frac{1}{\\sqrt{2 \\pi \\sigma^2}} \\exp\\left(-\\frac{(Y_i - (\\beta_0 + \\beta_1 X_i))^2}{2 \\sigma^2}\\right)\n\\] We want to choose the parameters such that they maximize the likelihood. Because the logarithm is monotonic then maximizing the likelihood is equivalent to maximizing the log-likelihood:\n\\[\n\\mathcal L(\\beta_0, \\beta_1, \\sigma^2 \\vert Y) = -\\log\\left(\\sqrt{2 \\pi \\sigma^2}\\right) -\\frac{1}{{2 \\sigma^2}} \\sum_i {(Y_i - (\\beta_0 + \\beta_1 X_i))^2}\n\\] Showing that by minimizing the sum of squares, we are maximizing the likelihood."
  },
  {
    "objectID": "10-model_selection.html#likelihood-ratio-tests",
    "href": "10-model_selection.html#likelihood-ratio-tests",
    "title": "11  Model Selection",
    "section": "11.5 Likelihood-ratio tests",
    "text": "11.5 Likelihood-ratio tests\nThese approaches contrast two models by taking the ratio of the maximum likelihoods of the sample data based on the models (i.e., when you evaluate the likelihood by setting the parameters to their m.l.e.). The two models are usually termed the null model (i.e., the “simpler” model), and the alternative model. The ratio of \\(L_a / L_n\\) tells us how many times more likely the data are under the alternative model vs. the null model. We want to determine whether this ratio is large enough to reject the null model and favor the alternative.\nLikelihood-ratio is especially easy to perform for nested models.\n\n11.5.0.1 Two nested models\nNested means that model \\(\\mathcal M_1\\) has parameters \\(\\theta_1\\), and model \\(\\mathcal M_2\\) has parameters \\(\\theta_2\\), such that \\(\\theta_1 \\in \\theta_2\\) — by setting some of the parameters of \\(\\mathcal M_2\\) to particular values, we recover \\(\\mathcal M_1\\).\nFor example, suppose we want to model the height of trees. We measure the response variable (height of tree \\(i\\), \\(h_i\\)) as well as the girth (\\(g_i\\)). We actually have a data set that ships with R that contains exactly this type of data:\n\ndata(trees)\nhead(trees)\n\n  Girth Height Volume\n1   8.3     70   10.3\n2   8.6     65   10.3\n3   8.8     63   10.2\n4  10.5     72   16.4\n5  10.7     81   18.8\n6  10.8     83   19.7\n\n\nThe Height of these cherry trees is measured in feet; the Girth is the diameter in inches, and the Volume is the measuring the amount of timber in cubic feet. Let’s add a Radius measured in feet:\n\ntrees <- trees %>% mutate (Radius = Girth / (2 * 12)) # diameter to radius; inches to feet\n\nLet’s look at the distribution of three heights:\n\ntrees %>% ggplot(aes(x = Height)) + geom_density()\n\n\n\n\nA possible simple model is one that says that all tree heights have heights taken from a Gaussian distribution with a given mean. In the context of linear regression, we can write the model \\(\\mathcal M_0\\):\n\\[\nh_i = \\theta_0 + \\epsilon_i\n\\] where we assume that the errors \\(\\epsilon_i \\overset{\\text{iid}}{\\sim} \\mathcal N(0, \\sigma^2)\\). Now fit the model, obtaining \\(\\hat{\\theta_0}\\), and compute the maximum log-likelihood \\(\\mathcal L_0(\\hat{\\theta_0}, \\hat{\\sigma}^2 \\vert h)\\).\nIn R, we would call:\n\nM0 <- lm(data = trees, Height ~ 1) # only intercept\n# the m.l.e. of theta_0\ntheta0_M0 <- M0$coefficients[1]\ntheta0_M0\n\n(Intercept) \n         76 \n\n# log likelihood\nlogLik(M0)\n\n'log Lik.' -100.8873 (df=2)\n\n\nNow let’s plot the height of the trees vs. their radius:\n\ntrees %>% ggplot(aes(x = Radius, y = Height)) + \n  geom_point()\n\n\n\n\nAnd compute their correlation:\n\ncor(trees$Radius, trees$Height)\n\n[1] 0.5192801\n\n\nGiven the positive correlation between radius and height, we can build a more complex model in which the height also depends on radius (\\(\\mathcal M_1\\)):\n\\[\nh_i = \\theta_0 + \\theta_1 r_i + \\epsilon_i\n\\] as for model \\(\\mathcal M_0\\), fit the parameters (note that \\(\\hat{\\theta_0}\\) for model \\(\\mathcal M_0\\) will in general be different from \\(\\hat{\\theta_0}\\) for model \\(\\mathcal M_1\\)), and compute \\(\\mathcal L_1(\\hat{\\theta_0},\\hat{\\theta_1},\\hat{\\sigma}^2 \\vert h)\\). These two models are nested, because when setting \\(\\theta_1 = 0\\) we recover \\(\\mathcal M_0\\).\nIn R:\n\nM1 <- lm(data = trees, Height ~ Radius) # intercept and slope\ntheta0_M1 <- M1$coefficients[1]\ntheta1_M1 <- M1$coefficients[2]\n# note that now theta_0 takes a different value:\nprint(c(theta0_M1, theta0_M1))\n\n(Intercept) (Intercept) \n   62.03131    62.03131 \n\n# the log likelihood should improve\nlogLik(M1)\n\n'log Lik.' -96.01663 (df=3)\n\n\nWhich model should we use? You can see that adding an extra parameter improved the likelihood somewhat.\nEnter the likelihood-ratio test. We want to know whether it’s worth using the more complex model, and to do this we need to calculate a likelihood-ratio statistics. We’re helped by Wilks’ theorem: as the sample size \\(n \\to \\infty\\), the test statistics \\(2 \\log(L_1 / L_0)\\) is asymptotically \\(\\chi^2\\) distributed with degrees of freedom equal to the difference in the number of parameters between \\(\\mathcal M_1\\) and \\(\\mathcal M_0\\).\nWhile there are many caveats [^1] this method is commonly used in practice.\n\n# 2 * log-likelihood ratio\nlrt <- as.numeric(2 * (logLik(M1) - logLik(M0)))\nprint(\"2 log(L1 / L0)\")\n\n[1] \"2 log(L1 / L0)\"\n\nprint(lrt)\n\n[1] 9.74125\n\n# difference in parameters\ndf0 <- length(M0$coefficients)\ndf1 <- length(M1$coefficients)\nk <- df1 - df0\nprint(\"Number of extra parameters\")\n\n[1] \"Number of extra parameters\"\n\nprint(k)\n\n[1] 1\n\n# calculate (approximate) p-value\nres <- pchisq(lrt, k, lower.tail = FALSE)\nprint(paste(\"p-value using Chi^2 with\", k, \"degrees of freedom\"))\n\n[1] \"p-value using Chi^2 with 1 degrees of freedom\"\n\nprint(round(res, 4))\n\n[1] 0.0018\n\n\nIn this case, the likelihood-ratio test would favor the use of the more complex model.\n\nPros: Straightforward; well-studied for nested models.\nCons: Difficult to generalize to more complex cases.\n\n\n\n11.5.0.2 Adding more models\nThe data also contains a column with the volume. Let’s take a look:\n\ntrees %>% ggplot() + aes(x = Volume, y = Height) + geom_point()\n\n\n\n\nAnd look at the correlation\n\ncor(trees$Volume, trees$Height)\n\n[1] 0.5982497\n\n\nWe can build another model:\n\nM2 <- lm(data = trees, Height ~ Volume) # intercept and slope\n\nCompute the log likelihood:\n\nlogLik(M2)\n\n'log Lik.' -94.02052 (df=3)\n\n\nand test whether that’s better than the (nested) model 0:\n\n# 2 * log-likelihood ratio\nlrt <- as.numeric(2 * (logLik(M2) - logLik(M0)))\nprint(\"2 log(L2 / L0)\")\n\n[1] \"2 log(L2 / L0)\"\n\nprint(lrt)\n\n[1] 13.73348\n\n# difference in parameters\ndf0 <- length(M0$coefficients)\ndf1 <- length(M2$coefficients)\nk <- df1 - df0\nprint(\"Number of extra parameters\")\n\n[1] \"Number of extra parameters\"\n\nprint(k)\n\n[1] 1\n\n# calculate (approximate) p-value\nres <- pchisq(lrt, k, lower.tail = FALSE)\nprint(paste(\"p-value using Chi^2 with\", k, \"degrees of freedom\"))\n\n[1] \"p-value using Chi^2 with 1 degrees of freedom\"\n\nprint(round(res, 4))\n\n[1] 2e-04\n\n\nAlso in this case, the likelihood-ratio test would favor the use of the more complex model. But how can we contrast the two more complex models \\(\\mathcal M_1\\) and \\(\\mathcal M_2\\)? They are not nested!\nIn fact, we can even concoct another model that uses a mix of radius and volume. If we assume that trees are cylinders, then we have \\(V = \\pi r^2 h\\), and as such \\(h = V / (\\pi r^2)\\). We can test whether this is a good approximation by creating a new variable:\n\ntrees <- trees %>% mutate(Guess = Radius^2)\n\n\ntrees %>% ggplot() + aes(x = Guess, y = Height) + geom_point()\n\n\n\n\n\ncor(trees$Guess, trees$Height)\n\n[1] 0.5084267\n\n\nPretty good! Let’s add it to our list of models:\n\nM3 <- lm(Height ~ Guess, data = trees)\nlogLik(M3)\n\n'log Lik.' -96.25156 (df=3)"
  },
  {
    "objectID": "10-model_selection.html#aic",
    "href": "10-model_selection.html#aic",
    "title": "11  Model Selection",
    "section": "11.6 AIC",
    "text": "11.6 AIC\nOf course, in most cases the models that we want to contrast need not to be nested. Then, we can try to penalize models according to the number of free parameters, such that more complex models (those with many free parameters) should be associated with much better likelihoods to be favored.\nIn the early 1970s, Hirotugu Akaike proposed “an information criterion” (AIC, now known as Akaike’s Information Criterion), based, as the name implies, on information theory. Basically, AIC is measuring (asymptotically) the information loss when using the model in lieu of the actual data. Philosophically, it is rooted in the idea that there is a “true model” that generated the data, and that several possible models can serve as its approximation. Practically, it is very easy to compute:\n\\[AIC = -2 \\mathcal L(\\theta \\vert D) + 2 k\\]\nwhere \\(k\\) is the number of free parameters (e.g., 3 for the simplest linear regression [intercept, slope, variance of the residuals]). In R, many models provide a way to access their AIC score:\n\nAIC(M0) # only intercept\n\n[1] 205.7745\n\nAIC(M1) # use radius\n\n[1] 198.0333\n\nAIC(M2) # use volume\n\n[1] 194.041\n\nAIC(M3) # use cylinder\n\n[1] 198.5031\n\n\nYou can see that AIC favors the cylinder model over the others. Typically, a difference of about 2 is considered “significant”, though of course this really depends on the size of the data, the values of AIC, etc.\n\nPros: Easy to calculate; very popular.\nCons: Sometimes it is difficult to “count” parameters; why should each parameter cost the same, when they have different effects on the likelihood?"
  },
  {
    "objectID": "10-model_selection.html#other-information-based-criteria",
    "href": "10-model_selection.html#other-information-based-criteria",
    "title": "11  Model Selection",
    "section": "11.7 Other information-based criteria",
    "text": "11.7 Other information-based criteria\nThe approach spearheaded by Akaike has been followed by a number of researchers, giving rise to many similar criteria for model selection. Without getting too much into the details, here are a few pointers:\n\nBayesian Information Criterion \\(BIC = -2 \\mathcal L(\\theta \\vert D) + k \\log(n)\\) where \\(n\\) is the number of data points. Penalizes parameters more strongly when there are much data.\nHannan–Quinn information criterion \\(HQC = -2 \\mathcal L(\\theta \\vert D) + k \\log(\\log(n))\\)"
  },
  {
    "objectID": "10-model_selection.html#bayesian-approaches-to-model-selection",
    "href": "10-model_selection.html#bayesian-approaches-to-model-selection",
    "title": "11  Model Selection",
    "section": "11.8 Bayesian approaches to model selection",
    "text": "11.8 Bayesian approaches to model selection\nThe approaches we’ve examined before are based on “point-estimates”, i.e., only consider the parameters at their maximum likelihood estimate. Bayesian approaches, on the other hand, consider distributions of parameters. As such, parameters that give high likelihoods for a restricted range of values are deemed “more expensive” (because they are “more important” or need to be “fine-tuned”) than those yielding about the same likelihood for a wide range of values.\n\n11.8.1 Marginal likelihoods\nA very beautiful approach is based on marginal likelihoods, i.e., likelihoods obtained integrating the parameters out. Unfortunately, the calculation becomes difficult to perform by hand for complex models, but it provides a good approach for simple models. In general, we want to assess the “goodness” of a model. Then, using Bayes’ rule:\n\\[\n  P(M\\vert D) = \\frac{P(D\\vert M) P(M)}{P(D)}\n\\]\nWhere \\(P(M\\vert D)\\) is the probability of the model given the data; and \\(P(D)\\) is the “probability of the data” (don’t worry, this need not to be calculated), and \\(P(M)\\) is the prior (the probability that we choose the model before seeing the data). \\(P(D\\vert M)\\) is a marginal likelihood: we cannot compute this directly, because the model requires the parameters \\(\\theta\\), however, we can write\n\\[\nP(D\\vert M) = \\int P(D\\vert M,\\theta)P(\\theta\\vert M) d\\theta\n\\]\nwhere \\(P(D\\vert M,\\theta)\\) is the likelihood, and \\(P(\\theta\\vert M)\\) is a distribution over the parameter values (typically, the priors).\nFor example, let’s compute the marginal likelihood for the case in which we flip a coin \\(n = a + b\\) times, and we obtain \\(a\\) heads and \\(b\\) tails. Call \\(\\theta\\) the probability of obtaining a head, and suppose that \\(P(\\theta\\vert M)\\) is a uniform distribution. Then:\n\\[\nP(a,b\\vert M) = \\int_0^1 P(a,b\\vert M,\\theta) d\\theta = \\int_0^1 \\binom{a+b}{a} \\theta^{a} (1-\\theta)^{b} d\\theta  = \\frac{1}{a+b+1} = \\frac{1}{n+1}\n\\]\nInterestingly, the marginal likelihood can be interpreted as the expected likelihood when parameters are sampled from the prior.\n\n\n11.8.2 Bayes factors\nTake two models, and assume that initially we have no preference \\(P(M_1) = P(M_2)\\), then:\n\\[\n  \\frac{P(M_1\\vert D)}{P(M_2\\vert D)} = \\frac{P(D\\vert M_1)P(M_1)}{P(D\\vert M_2)P(M_2)} = \\frac{P(D\\vert M_1)}{P(D\\vert M_2)}\n\\]\nThe ratio is called the “Bayes factor” and provides a rigorous way to perform model selection.\n\n\n11.8.3 Bayes factors in practice\nIn practice, Bayes Factors can be estimated from MCMC. While we’re not going to get into this here, we can use a package that a) automatically sets the priors for all the variables (close to the philosophy known as “Objective Bayes”); b) performs the calculation of the Bayes Factors for us.\nLet’s build very many models. Load the data:\n\ndata(trees)\nhead(trees)\n\n  Girth Height Volume\n1   8.3     70   10.3\n2   8.6     65   10.3\n3   8.8     63   10.2\n4  10.5     72   16.4\n5  10.7     81   18.8\n6  10.8     83   19.7\n\ntrees$Radius <- trees$Girth / (2 * 12)\ntrees$Guess <- trees$Volume / trees$Radius^2\n\nAnd build the models:\n\nlm_all <- lm(Height ~ ., data = trees) # . means use all cols besides Height\nsummary(lm_all)\n\n\nCall:\nlm(formula = Height ~ ., data = trees)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.7669 -2.4752 -0.2354  1.9335 10.5319 \n\nCoefficients: (1 not defined because of singularities)\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  22.6671    16.2947   1.391 0.175562    \nGirth         1.5127     1.2278   1.232 0.228543    \nVolume       -0.2045     0.2572  -0.795 0.433505    \nRadius            NA         NA      NA       NA    \nGuess         0.4291     0.1034   4.152 0.000296 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.023 on 27 degrees of freedom\nMultiple R-squared:  0.6413,    Adjusted R-squared:  0.6014 \nF-statistic: 16.09 on 3 and 27 DF,  p-value: 3.391e-06\n\nlogLik(lm_all)\n\n'log Lik.' -84.99667 (df=5)\n\n\nPerform selection among all models nested into lm_all:\n\nbf_analysis <- regressionBF(Height ~ ., data = trees)\nplot(bf_analysis)\n\n\n\n\nThese ratios measure how many times more probable the model is compared to that with only the intercept (assuming initially that all models are equiprobable). Note that the Bayes Factors automatically penalize for overly complex models (triplets/quadruplets are ranked after pairs or even only Guess).\n\nPros: Elegant, straightforward interpretation.\nCons: Difficult to compute for complex models; requires priors."
  },
  {
    "objectID": "10-model_selection.html#using-tidymodels-for-modeling-and-cross-validation",
    "href": "10-model_selection.html#using-tidymodels-for-modeling-and-cross-validation",
    "title": "11  Model Selection",
    "section": "11.9 Using tidymodels for modeling and cross-validation",
    "text": "11.9 Using tidymodels for modeling and cross-validation\nThere is an excellent suite of packages called tidymodels that offers very beautiful and streamlined tools for building models, training them, and evaluating their results. We will use the Palmer penguins data as an application, with the aim of building a predictive model for the bill length of penguins. Let us first examine the data graphically to see the relationship between body mass and bill length:\n\nlibrary(palmerpenguins)\ndata(\"penguins\")\npenguins %>% ggplot(aes( x= body_mass_g, y= bill_length_mm)) +\n  geom_point() +\n  geom_smooth(method = lm, se = FALSE) +\n  scale_color_viridis_d(option = \"plasma\", end = .7)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nThere is clearly a relationship, but would it help to add species and sex as variables? Let us see:\n\npenguins %>% filter (!is.na(sex)) %>% ggplot(aes( x= body_mass_g, y= bill_length_mm, color = sex)) +\n  geom_point() +\n  geom_smooth(method = lm, se = FALSE) +\n  facet_wrap(~species, scales = 'free') +\n  scale_color_viridis_d(option = \"plasma\", end = .7)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nIt certainly appears that including sex and species will result in a better fit. Let us try to compare the models we build using the syntax of tidymodels.\nFirst, we need to create the model that we will use in the pipeline. This is created like this:\n\nlm_mod <- \n  linear_reg() %>% \n  set_engine(\"lm\")\n\nNext, we clean the data and split it into the training and testing sets, and create a recipe that specifies the data set and the response variable that we want to model. The other variables are left as the predictors, but we can take them out of consideration by changing the role of those variables to “ID”. In this recipe, the only predictor (explanatory) variable in the data set is body_mass_g.\n\ndata(\"penguins\")\npen_clean <- penguins %>% filter(!is.na(bill_length_mm), !is.na(sex), !is.na(species))\n# Fix the random numbers by setting the seed  for reproducibility\nset.seed(314)\n# Put 3/4 of the data into the training set \ndata_split <- initial_split(pen_clean, prop = 3/4)\n\n# Create data frames for the two sets:\ntrain_data <- training(data_split)\ntest_data  <- testing(data_split)\n\npen_recipe <- \n  recipe(bill_length_mm ~ ., data = train_data) %>% \n  #update_role(sex, island, year, species, bill_depth_mm, flipper_length_mm, new_role = \"ID\")\n  update_role(sex, island, species, bill_depth_mm, flipper_length_mm, new_role = \"ID\") \n\nWe can now combine the recipe for the data and the model to create a workflow for training the data with a model, and then use it to create a fit:\n\n# create workflow\npen_wflow <- \n  workflow() %>% \n  add_model(lm_mod) %>% \n  add_recipe(pen_recipe)\n# fit the model to the data\npen_fit <- \n  pen_wflow %>% \n  fit(data = train_data)\n\nFinally, we can extract all sorts of information, such as best-fit parameters, errors, p-values, and likelihoods generated by the fit:\n\nfit1 <- pen_fit %>% \n  extract_fit_parsnip() \ntidy(fit1)\n\n# A tibble: 3 × 5\n  term          estimate  std.error statistic  p.value\n  <chr>            <dbl>      <dbl>     <dbl>    <dbl>\n1 (Intercept) -259.      698.          -0.371 7.11e- 1\n2 body_mass_g    0.00406   0.000352    11.5   6.35e-25\n3 year           0.142     0.347        0.410 6.83e- 1\n\nglance(fit1) # \n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>\n1     0.352         0.346  4.43      66.7 7.27e-24     2  -723. 1453. 1467.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\n\nThe tidy and glance functions return different summaries of information; the first one information about fitted parameters, the second the R-squared and likelihood of the model.\nLet us now modify the recipe to include the species and save the fitting results to a different object fit2:\n\npen_recipe2 <- \n  recipe(bill_length_mm ~ ., data = train_data) %>% \n  #update_role(sex, island, year, bill_depth_mm, flipper_length_mm, new_role = \"ID\")\n  update_role(sex, island, bill_depth_mm, flipper_length_mm, new_role = \"ID\") \n\n# create workflow\npen_wflow2 <- \n  workflow() %>% \n  add_model(lm_mod) %>% \n  add_recipe(pen_recipe2)\n# fit the model to the data\npen_fit2 <- \n  pen_wflow2 %>% \n  fit(data = train_data)\n# summarise the fit\nfit2 <- pen_fit2 %>% \n  extract_fit_parsnip() \ntidy(fit2)\n\n# A tibble: 5 × 5\n  term               estimate  std.error statistic  p.value\n  <chr>                 <dbl>      <dbl>     <dbl>    <dbl>\n1 (Intercept)      -650.      378.           -1.72 8.67e- 2\n2 speciesChinstrap   10.0       0.410        24.4  1.51e-67\n3 speciesGentoo       3.47      0.569         6.10 4.24e- 9\n4 body_mass_g         0.00374   0.000330     11.3  3.53e-24\n5 year                0.336     0.188         1.79 7.53e- 2\n\nglance(fit2) \n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>\n1     0.812         0.809  2.40      264. 2.64e-87     4  -568. 1149. 1170.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\n\nThe R-squared as well as the log likelihood have improved substantially and the AIC is lower.\nNow let us see if we can further improve the model quality by incorporating sex as another explanatory variable:\n\npen_recipe3 <- \n  recipe(bill_length_mm ~ ., data = train_data) %>% \n  #update_role(island, year, bill_depth_mm, flipper_length_mm, new_role = \"ID\")\n  update_role(island,  bill_depth_mm, flipper_length_mm, new_role = \"ID\") \n\n# create workflow\npen_wflow3 <- \n  workflow() %>% \n  add_model(lm_mod) %>% \n  add_recipe(pen_recipe3)\n# fit the model to the data\npen_fit3 <- \n  pen_wflow3 %>% \n  fit(data = train_data)\n# summarise the fit\nfit3 <- pen_fit3 %>% \n  extract_fit_parsnip() \ntidy(fit3)\n\n# A tibble: 6 × 5\n  term               estimate  std.error statistic  p.value\n  <chr>                 <dbl>      <dbl>     <dbl>    <dbl>\n1 (Intercept)      -700.      349.           -2.00 4.63e- 2\n2 speciesChinstrap   10.1       0.379        26.5  1.11e-73\n3 speciesGentoo       6.26      0.678         9.23 1.36e-17\n4 body_mass_g         0.00177   0.000429      4.13 4.93e- 5\n5 sexmale             2.59      0.398         6.52 3.96e-10\n6 year                0.364     0.174         2.09 3.75e- 2\n\nglance(fit3) \n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>\n1     0.840         0.837  2.21      255. 1.47e-94     5  -548. 1110. 1135.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\n\nAdding sex further improves the R-squared and log-likelihood, as the AIC drops again.\n\n11.9.1 Prediction and cross-validation\nNow let us the three trained models to predict the values of bill length in the test data that we set aside:\n\nbill_fit1 <- predict(fit1, test_data)\nbill_fit2 <- predict(fit2, test_data)\nbill_fit3 <- predict(fit3, test_data)\n\nprediction1 <- augment(fit1, test_data)\nglimpse(prediction1)\n\nRows: 84\nColumns: 10\n$ .pred             <dbl> 39.98780, 40.79993, 41.51054, 39.78476, 42.22115, 39…\n$ .resid            <dbl> 0.3122029, -4.0999256, -2.6105380, 1.3152350, -6.921…\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Biscoe, …\n$ bill_length_mm    <dbl> 40.3, 36.7, 38.9, 41.1, 35.3, 40.5, 37.9, 39.5, 37.2…\n$ bill_depth_mm     <dbl> 18.0, 19.3, 17.8, 17.6, 18.9, 17.9, 18.6, 16.7, 18.1…\n$ flipper_length_mm <int> 195, 193, 181, 182, 187, 187, 172, 178, 178, 196, 18…\n$ body_mass_g       <int> 3250, 3450, 3625, 3200, 3800, 3200, 3150, 3250, 3900…\n$ sex               <fct> female, female, female, female, female, female, fema…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\nggplot(prediction1, aes(x=.pred, y=bill_length_mm)) + geom_point() + geom_smooth() + geom_abline(slope = 1, intercept = 0)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\nmetrics(prediction1, truth = bill_length_mm, estimate = .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       4.42 \n2 rsq     standard       0.329\n3 mae     standard       3.57 \n\n\n\nbill_fit2 <- predict(fit2, test_data)\n\nprediction2<- augment(fit2, test_data)\nglimpse(prediction2)\n\nRows: 84\nColumns: 10\n$ .pred             <dbl> 36.83869, 37.58639, 38.24064, 36.65176, 38.89489, 36…\n$ .resid            <dbl> 3.4613143, -0.8863947, 0.6593600, 4.4482415, -3.5948…\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Biscoe, …\n$ bill_length_mm    <dbl> 40.3, 36.7, 38.9, 41.1, 35.3, 40.5, 37.9, 39.5, 37.2…\n$ bill_depth_mm     <dbl> 18.0, 19.3, 17.8, 17.6, 18.9, 17.9, 18.6, 16.7, 18.1…\n$ flipper_length_mm <int> 195, 193, 181, 182, 187, 187, 172, 178, 178, 196, 18…\n$ body_mass_g       <int> 3250, 3450, 3625, 3200, 3800, 3200, 3150, 3250, 3900…\n$ sex               <fct> female, female, female, female, female, female, fema…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\nggplot(prediction2, aes(x=.pred, y=bill_length_mm)) + geom_point() + geom_smooth() + geom_abline(slope = 1, intercept = 0)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\nmetrics(prediction2, truth = bill_length_mm, estimate = .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       2.46 \n2 rsq     standard       0.795\n3 mae     standard       2.05 \n\n\n\nbill_fit3 <- predict(fit3, test_data)\n\nprediction3 <- augment(fit3, test_data)\nglimpse(prediction3)\n\nRows: 84\nColumns: 10\n$ .pred             <dbl> 36.32554, 36.68002, 36.99019, 36.23692, 37.30036, 36…\n$ .resid            <dbl> 3.97446307, 0.01998059, 1.90980843, 4.86308368, -2.0…\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Biscoe, …\n$ bill_length_mm    <dbl> 40.3, 36.7, 38.9, 41.1, 35.3, 40.5, 37.9, 39.5, 37.2…\n$ bill_depth_mm     <dbl> 18.0, 19.3, 17.8, 17.6, 18.9, 17.9, 18.6, 16.7, 18.1…\n$ flipper_length_mm <int> 195, 193, 181, 182, 187, 187, 172, 178, 178, 196, 18…\n$ body_mass_g       <int> 3250, 3450, 3625, 3200, 3800, 3200, 3150, 3250, 3900…\n$ sex               <fct> female, female, female, female, female, female, fema…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\nggplot(prediction3, aes(x=.pred, y=bill_length_mm)) + geom_point() + geom_smooth() + geom_abline(slope = 1, intercept = 0)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\nmetrics(prediction3, truth = bill_length_mm, estimate = .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       2.35 \n2 rsq     standard       0.811\n3 mae     standard       1.92 \n\n\nThe function metrics from package yardstick returns several related measures of agreement between prediction and the data in the test set. Probably the most common is the root mean squared error, that is the root of the sum of squared differences between predictions and observations. Notice that the rmse drops for each successive variable that we add to the model.\nExercise Add one or several more variables to the list of predictors by modifying the recipe, calculate the predictions, and compare their performance (e.g. the rmse on the test data) to the simpler models."
  },
  {
    "objectID": "10-model_selection.html#other-approaches",
    "href": "10-model_selection.html#other-approaches",
    "title": "11  Model Selection",
    "section": "11.10 Other approaches",
    "text": "11.10 Other approaches\n\n11.10.1 Minimum description length\nAnother completely different way to perform model selection is based on the idea on “Minimum Description Length”, where models are seen as a way to “compress” the data, and the model leading to the strongest compression should be favored. While we do not cover it here, you can read about it in [4].\n\n\n11.10.2 Cross validation\nOne very robust method to perform model selection, often used in machine learning, is cross-validation. The idea is simple: split the data in three parts: a small data set for exploring; a large set for fitting; a small set for testing (for example, 5%, 75%, 20%). You can use the first data set to explore freely and get inspired for a good model. These data are then discarded. You use the largest data set for accurately fitting your model(s). Finally, you validate your model or select over competing models using the last data set.\nBecause you haven’t used the test data for fitting, this should dramatically reduce the risk of over-fitting. The downside of this is that we’re wasting precious data. There are less expensive methods for cross validation, but if you have much data, or data is cheap, then this has the virtue of being fairly robust.\n\n11.10.2.1 Exercise: Do shorter titles lead to more citations?\nTo test the power of cross-validation, we are going to examine a bold claim by Letchford et al., 2015: that papers with shorter titles attract more citations than those with longer titles. We are going to use their original data:\n\nLetchford A, Moat HS, Preis T (2015) The advantage of short paper titles. Royal Society Open Science 2(8): 150266.\n\n\n# original URL\n# https://datadryad.org/stash/dataset/doi:10.5061/dryad.hg3j0\ndt <- read_csv(\"data/LMP2015.csv\")\n\nRows: 140000 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): journal\ndbl (3): year, title_length, cites\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe data set reports information on the top 20000 articles for each year from 2007 to 2013. The Author’s claim is that shorter titles lead to more citations:\n\ndt %>% \n  group_by(year) %>% \n  summarise(correlation = cor(title_length, cites, method = \"kendall\"))\n\n# A tibble: 7 × 2\n   year correlation\n  <dbl>       <dbl>\n1  2007     -0.0535\n2  2008     -0.0687\n3  2009     -0.0560\n4  2010     -0.0655\n5  2011     -0.0525\n6  2012     -0.0528\n7  2013     -0.0451\n\n\nAs you can see, title length is anti-correlated (using rank correlation) with the number of citations.\nThere are several problems with this claim:\n\nThe authors selected papers based on their citations. As such their claim would need to be stated as “among top-cited papers there is a correlation”.\nThe journals cover a wide array of disciplines. The title length could reflect different publishing cultures.\nMost importantly, different journals have different requirements for title lengths. For example, Nature requires titles to be less than 90 characters:\n\n\ndt%>% filter(journal %in% c(\"Nature\", \"Science\")) %>% \n  ggplot() + aes(x = journal, y = title_length) + geom_violin()\n\n\n\n\nBut then, is the effect the Authors are reporting only due to the fact that high-profile journals mandate short titles? Let’s see whether their claims hold water when considering specific journals:\n\n# only consider journals with more than 1000 papers in the data set\ndt <- dt %>% \n  group_by(journal) %>% \n  mutate(num_papers = n())%>% \n  filter(num_papers > 1000) %>% \n  ungroup()\n# now compute correlation and plot\ndt %>% \n  group_by(year, journal) %>% \n  summarise(correlation = cor(title_length, cites, method = \"kendall\")) %>% \n  ggplot() + \n  aes(x = reorder(substr(journal, 1, 30), (correlation)), y = correlation) + \n  geom_boxplot() + \n  geom_hline(yintercept = 0, colour = \"red\", linetype = 2) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # rotate labels x axis\n  xlab(\"\")\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\nIt seems that in several medical journals (NEJM, Circulation, J Clin Oncology) longer titles fare better than shorter ones. In Nature and PNAS we see a negative correlation, while Science gives no clear trend.\nLet’s look at the mean and standard deviation of citations by journal/year\n\ndt %>% \n  group_by(journal, year) %>% \n  summarize(mean = mean(log(cites + 1)), sd = sd(log(cites + 1))) %>% \n  ggplot() + \n  aes(x = year, y = mean) + \n  geom_point() + \n  facet_wrap(~journal)\n\n`summarise()` has grouped output by 'journal'. You can override using the\n`.groups` argument.\n\n\n\n\ndt %>% \n  group_by(journal, year) %>% \n  summarize(mean = mean(log(cites + 1)), sd = sd(log(cites + 1))) %>% \n  ggplot() + \n  aes(x = year, y = sd) + \n  geom_point() + \n  facet_wrap(~journal)\n\n`summarise()` has grouped output by 'journal'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n11.10.2.2 Two models\nLet’s consider two competing models.\nModel1: each journal year has its mean\n\\(\\log(\\text{cits} + 1) \\sim \\text{journal}:\\text{year}\\)\nModel2: the length of titles influences citations\n\\(\\log(\\text{cits} + 1) \\sim \\text{journal}:\\text{year} + \\text{title-length}\\)\nWe are going to fit the model using 90% of the data; we are going to use the remaining data for cross-validation.\n\nset.seed(4)\ndt <- dt %>% mutate(logcit = log(cites + 1))\n# sample 10% of the data\ndata_test <- dt %>% sample_frac(0.3)\ndata_fit  <- anti_join(dt, data_test) # get all those not in data_test\n\nJoining with `by = join_by(year, journal, title_length, cites, num_papers,\nlogcit)`\n\n\nNow fit the models:\n\nM1 <- lm(logcit ~ factor(year)*journal, data = data_fit)\nM2 <- lm(logcit ~ factor(year)*journal + title_length, data = data_fit)\n\nNow let’s try to predict out-of-fit the data that we haven’t used:\n\nM1_predictions <- predict(M1, newdata = data_test)\nSSQ_M1 <- sum((log(data_test$cites + 1) - M1_predictions)^2)\nM2_predictions <- predict(M2, newdata = data_test)\nSSQ_M2 <- sum((log(data_test$cites + 1) - M2_predictions)^2)\nprint(SSQ_M1)\n\n[1] 2465.712\n\nprint(SSQ_M2)\n\n[1] 2465.96\n\n\nWe do not gain anything by including the information on titles.\n\nPros: Easy to use; quite general; asymptotically equivalent to AIC.\nCons: Sensitive to how the data was split (you can average over multiple partitions); need much data (instability in parameter estimates due to “data loss”)"
  },
  {
    "objectID": "10-model_selection.html#references-and-further-reading",
    "href": "10-model_selection.html#references-and-further-reading",
    "title": "11  Model Selection",
    "section": "11.11 References and further reading:",
    "text": "11.11 References and further reading:\n\nPinheiro, José C.; Bates, Douglas M. (2000), Mixed-Effects Models in S and S-PLUS, Springer-Verlag, pp. 82–93\nTidymodels tutorial\nEmil Hvitfeldt, Tidymodels for Introduction to Statistical Learning in R\nMark H Hansen and Bin Yu Model Selection and the Principle of Minimum Description Length."
  },
  {
    "objectID": "11-SVD_PCA.html#input",
    "href": "11-SVD_PCA.html#input",
    "title": "12  Principal Component Analysis",
    "section": "12.1 Input",
    "text": "12.1 Input\nWe have collected the \\(n \\times m\\) data matrix \\(X\\) (typically, with \\(n \\gg m\\)), in which the rows are samples and the columns are \\(m\\) measures on the samples. Each row of this matrix defines a point in the Euclidean space \\(\\mathbb R^m\\), i.e., each point in this space is a potential sample. Naturally, samples with similar measurements are “close” in this space, and samples that are very different are “far”. However, \\(m\\) can be quite large, and therefore we cannot easily visualize the position of the points. One way to think of PCA is as the best projection of the points in a \\(r\\)-dimensional space (with \\(r \\leq m\\)), for visualization and clustering.\nFor example, take the iris data set:\n\ndata(\"iris\")\nir <- iris %>% dplyr::select(-Species)\nsp <- iris %>% dplyr::select(Species)\npairs(ir, col = sp$Species)\n\n\n\n\nWe can separate the clusters better by finding the best projection in 2D:\n\nautoplot(prcomp(ir, center = TRUE), \n         data = iris, \n         colour = \"Species\",\n         scale = FALSE) + \n  coord_equal()"
  },
  {
    "objectID": "11-SVD_PCA.html#singular-value-decomposition",
    "href": "11-SVD_PCA.html#singular-value-decomposition",
    "title": "12  Principal Component Analysis",
    "section": "12.2 Singular Value Decomposition",
    "text": "12.2 Singular Value Decomposition\nAt the hearth of PCA is a particular matrix decomposition (or factorization): we represent the matrix \\(X\\) as a product of other matrices (or, equivalently, a sum of matrices). In particular, SVD is defined by the equation:\n\\[\nX = U \\Sigma V^T\n\\]\n\\(X\\) is a \\(n \\times m\\) matrix, \\(U\\) is an \\(n \\times n\\) orthogonal, unitary matrix and \\(V\\) is an \\(m \\times m\\) orthogonal, unitary matrix, and \\(\\Sigma\\) is a \\(m \\times n\\) rectangular, diagonal matrix with non-negative values on the diagonal. If \\(V\\) is a (real) unitary matrix, then \\(VV^T = I_m\\) (the \\(m \\times m\\) identity matrix), and if \\(U\\) is also unitary, then \\(UU^T = I_n\\). Another way to put this is \\(U^{-1} = U^T\\).\n(Note: this defines the “full” SVD of \\(A\\); equivalently, one can perform a “thin”, or “reduced” SVD by having \\(U\\) of dimension \\(n \\times p\\), and \\(\\Sigma\\) and \\(V\\) of dimension \\(p \\times p\\), where \\(p \\leq m\\) is the rank of \\(A\\)—by default R returns a “thin” SVD; read the details here).\nThe values on the diagonal of \\(\\Sigma\\) are the singular values of \\(X\\), i.e., the nonzero eigenvalues of \\(XX^T\\) (or \\(X^T X\\)). In this context, the matrix \\(U\\) contains the left singular vectors of \\(X\\) and \\(V\\) its right singular vectors. Let’s rearrange the rows/cols of \\(\\Sigma\\), \\(U\\) and \\(V\\) such that we have the singular values in decreasing order: \\(\\text{diag}(\\Sigma) = (\\sigma_1, \\sigma_2, \\ldots, \\sigma_m)\\).\nThrough SVD, the matrix \\(X\\) can be seen as a sum of \\(m\\) matrices:\n\\[\nX = \\sum_{i = 1}^m U_i \\Sigma_{ii} V_i^T = X_1 + X_2 + X_3 + \\ldots\n\\]\nWhere \\(U_i\\) is the \\(i\\)th column of \\(U\\). Most importantly, you can prove that at each step (\\(r\\)), you are computing the “best” approximation of \\(X\\) as a sum of \\(r\\) rank-1 matrices. I.e., for each \\(r\\) we have that \\(\\| X - (X_1 + X_2 + \\ldots + X_r) \\|\\) is as small as possible (Eckart–Young–Mirsky theorem).\nLet’s look at a concrete example. A monochromatic image can be represented as a matrix where the entries are pixels taking values in (for example, using 8 bits) \\(0, 1, \\ldots, 255\\):\n\nstefano <- as.matrix(read.csv(\"data/stefano.txt\"))\n# invert y axis and transpose for visualization\nstefano <- t(stefano[,ncol(stefano):1])\n# rescale values to suppress warning from ggimage\nstefano <- stefano / max(stefano)\nggimage(stefano)\n\n\n\n\nNow let’s perform SVD, and show that indeed we have factorized the image:\n\ns_svd <- svd(stefano)\nU <- s_svd$u\nV <- s_svd$v\nSigma <- diag(s_svd$d)\n# this should be equal to the original matrix\nstefano_2 <- U %*% Sigma %*% t(V)\n# let's plot the difference\nggimage(round(stefano - stefano_2, 10))\n\n\n\n\nNow we can visualize the approximation we’re making when we take only the first few singular values. We’re going to plot \\(X_k\\) (on the left), and \\(\\sum_{i=1}^k X_i\\) (on the right). Even with only a few iterations (7, out of 255) we obtain a recognizable image:\n\nr <- 7\nXdec <- array(0, c(dim(stefano), r))\nXsum <- array(0, c(dim(stefano), r))\n# store the first matrix\nXdec[,,1] <- (U[,1] %*% t(V[,1])) * Sigma[1,1]\n# the first term in the sum is the matrix itself\nXsum[,,1] <- Xdec[,,1]\n# store the other rank one matrices, along with the partial sum\nfor (i in 2:r){\n  Xdec[,,i] <- (U[,i] %*% t(V[,i])) * Sigma[i,i]\n  Xsum[,,i] <- Xsum[,,i - 1] + Xdec[,,i]\n}\n# now plot all matrices and their sum\nplots <- list()\nfor (i in 1:r){\n  plots[[length(plots) + 1]] <- ggimage(Xdec[,,i])\n  plots[[length(plots) + 1]] <- ggimage(Xsum[,,i])\n}\ngridExtra::grid.arrange(grobs = plots, ncol = 2)"
  },
  {
    "objectID": "11-SVD_PCA.html#svd-and-pca",
    "href": "11-SVD_PCA.html#svd-and-pca",
    "title": "12  Principal Component Analysis",
    "section": "12.3 SVD and PCA",
    "text": "12.3 SVD and PCA\nLet’s go back to our data matrix \\(X\\), and its representation as \\(n\\) points (the samples) in \\(m\\) dimensions (the measurements). For the moment, consider the case in which each column of \\(X\\) sums to zero (i.e., for each measurement, we have removed the mean—this is called “centering”). We would like to represent the data as best as possible in few dimensions, such that a) the axes are orthogonal; b) the axes are aligned with the principal sources of variation in the data. More precisely, PCA is an orthogonal linear transformation that transforms the data to a new coordinate system such that the direction of greatest variance of the data is aligned with the first coordinate, the second greatest with the second coordinate, and so on.\nFor example, let’s take the Petal.Lenght and Petal.Width in iris:\n\nX <- iris %>% dplyr::select(Petal.Length, Petal.Width) %>% as.matrix()\nX <- scale(X, center = TRUE, scale = FALSE) # remove mean\ncolors <- iris$Species\nplot(X, col = colors)\n\n\n\n\nYou can see that now the points are centered at (0,0).\nIn practice, we want to produce a new “data matrix” \\(Y\\):\n\\[\nY = XW\n\\]\nwhere \\(W\\) is an appropriate change of basis, transforming the data such that the directions of main variation are exposed. While we could choose any \\(m \\times m\\) matrix, we want a) \\(W\\) to be orthogonal (i.e., a “rotation” of the data), and b) all columns of \\(W\\) to be unit vectors (no stretching of the data).\nThe new columns (i.e., the transformed “measurements”) \\(Y_i\\) can be written as:\n\\[\nY_{i} = X W_i\n\\]\nWhere \\(Y_i\\) is the ith column of \\(Y\\) and \\(W_i\\) the ith column on \\(W\\). Let’s start with the first column \\(Y_1\\): we want to choose \\(W_1\\) such that the variance of \\(Y_i\\) is maximized. Because the mean of each column of \\(X\\) is zero, then also the mean of \\(Y_i\\) is zero. Thus, the variance is simply \\(\\frac{1}{n-1}\\sum_{j =1}^{n} Y_{ij}^2 =\\frac{1}{n-1} \\|Y_i\\|\\). We can write this is matrix form:\n\\[\\frac{1}{n-1}\\|Y_i\\| = \\frac{1}{n-1}\\|XW_i \\| = \\frac{1}{n-1} W_i^TX^T X W_i\\]\nNote that \\(S = \\frac{1}{n-1} X^T X\\) is the \\(m \\times m\\) sample covariance matrix of \\(X\\). Because \\(\\|W_i\\| = 1\\), we can rewrite this as:\n\\[\n\\frac{1}{n}\\|Y_i\\| = \\frac{W_i^T S W_i}{W_i^T W_i}\n\\]\nWhich is maximized (over \\(W_i\\)) when \\(W_i\\) is the eigenvector of \\(S\\) associated with the largest eigenvalue (see the Rayleigh quotient), in which case:\n\\[\n\\frac{1}{n-1}\\|Y_i\\| = \\frac{W_i^T S W_i}{W_i^T W_i} = \\lambda_1\n\\]\nTherefore, the first column of \\(Y\\) is given by the projection of the data on the first eigenvector of \\(S\\). The variance captured by this first axis is given by the largest eigenvalue of \\(S\\). To find the other columns of \\(Y\\), you can subtract from \\(X\\) the matrix \\(Y_1 W_1^T\\) and repeat.\nNote that the first axis captures \\(\\lambda_1 / \\sum_{i = 1}^m \\lambda_i\\) of the total variance in \\(X\\). This is typically reported in PCA as the “loadings” of the various components.\n\n# build sample covariance matrix\nS <- (1 / (nrow(X) - 1)) * t(X) %*% X\n# compute eigenvalues and eigenvectors\neS <- eigen(S, symmetric = TRUE)\n# W is the matrix of eigenvectors\nW <- eS$vectors\n# check \nY <- X %*% W\nplot(Y, col = colors)\n\n\n\n\n\neS$values\n\n[1] 3.66123805 0.03604607\n\napply(Y, 2, var)\n\n[1] 3.66123805 0.03604607\n\n\nTherefore, PCA amounts to simply taking the eigenvectors of \\(S\\) ordered by the corresponding eigenvalues. We can use the SVD to accomplish this task efficiently:\n\\[\nX = U \\Sigma V^T\n\\]\n\\[\n\\begin{aligned}\n(n-1) S = X^T X &= (V \\Sigma^T U^T) (U \\Sigma V^T)\\\\\n&= V \\Sigma^T \\Sigma V^T\\\\\n&= V \\widetilde{\\Sigma}^2 V^T\n\\end{aligned}\n\\]\nwhere \\(\\widetilde{\\Sigma}^2 = \\Sigma^T \\Sigma\\) (or, equivalently the square of the square version of \\(\\Sigma\\)). But contrasting \\(S = W \\Lambda W^T\\) and \\(S = V (\\widetilde{\\Sigma}^2 / (m-1))V^T\\) we see that \\(V = W\\). Finally, we have:\n\\[\nY = X W = U \\Sigma V^T V = U\\Sigma\n\\]\nTherefore, we can perform PCA efficiently by decomposing \\(X\\) using SVD.\n\n12.3.1 PCA in R—from scratch\n\ndt <- read_csv(\"data/handwritten_digits.csv\") %>% \n  arrange(id, x, y)\n\nRows: 123392 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (6): id, label, pixel, value, x, y\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(dt)\n\n# A tibble: 6 × 6\n     id label pixel value     x     y\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1     0     0     0     1     1\n2     1     0    16     0     1     2\n3     1     0    32     0     1     3\n4     1     0    48     0     1     4\n5     1     0    64     0     1     5\n6     1     0    80     0     1     6\n\n\n\n# make into a data matrix with pixels as cols\ndt_wide <- pivot_wider(dt %>% dplyr::select(-x, -y), \n                       names_from = pixel, \n                       values_from = value)\nX <- (as.matrix(dt_wide %>% dplyr::select(-id, -label)))\n# make col means = 0\nXs <- scale(X, center = TRUE, scale = FALSE)\n# compute SVD\nX_svd <- svd(Xs)\n# Y = US is the transformed data\nY <- X_svd$u %*% diag(X_svd$d)\n\n\nPCA_1 <- dt_wide %>% \n  dplyr::select(id, label) %>% \n  mutate(label = as.character(label)) %>% \n  add_column(PC1 = Y[,1], PC2 = Y[,2])\nggplot(PCA_1) + \n  aes(x = PC1, y = PC2, label = id, group = label, colour = label) + \n  geom_text()\n\n\n\n\nPretty good! Let’s see some of the poorly classified points:\n\n# This should be a 0\nggimage(matrix(X[122,], 16, 16, byrow = FALSE), fullpage = FALSE)\n\n\n\n# This should be a 1\nggimage(matrix(X[141,], 16, 16, byrow = FALSE), fullpage = FALSE)\n\n\n\n# This should be a 5\nggimage(matrix(X[322,], 16, 16, byrow = FALSE), fullpage = FALSE)\n\n\n\n\nYou can also scale the variables turning the sample covariance matrix \\(S\\) into a correlation matrix (this is useful when the variance of different measurements varies substantially).\n\n\n12.3.2 PCA in R — the easy way\n\nlibrary(ggfortify)\n# for prcomp, you need only numeric data\nX <- dt_wide %>% dplyr::select(-id, -label)\nPCA_3 <- prcomp(X)\nautoplot(PCA_3, \n         data = dt_wide %>% mutate(label = as.character(label)), \n         colour = \"label\",\n         frame = TRUE, frame.type = 'norm')"
  },
  {
    "objectID": "11-SVD_PCA.html#multidimensional-scaling",
    "href": "11-SVD_PCA.html#multidimensional-scaling",
    "title": "12  Principal Component Analysis",
    "section": "12.4 Multidimensional scaling",
    "text": "12.4 Multidimensional scaling\nThe input is the matrix of dissimilarities \\(D\\), potentially representing distances \\(d_{ij} = d(x_i, x_j)\\). A distance function is “metric” if:\n\n\\(d(x_i, x_j) \\geq 0\\) (non-negativity)\n\\(d(x_i, x_j) = 0\\) only if \\(x_i = x_j\\) (identity)\n\\(d(x_i, x_j) = d(x_j, x_i)\\) (symmetry)\n\\(d(x_i, x_k) \\leq d(x_i, x_j) + d(x_j, x_k)\\) (triangle inequality)\n\nGiven a set of dissimilarities, we can therefore ask whether they are distances, and particularly whether they represent Euclidean distances.\n\n12.4.1 Goal of MDS\nGiven the \\(n \\times n\\) matrix \\(D\\), find a set of coordinates \\(x_i, \\ldots x_n \\in \\mathbb R^p\\), such that \\(d_{ij} \\approx \\lVert x_i - x_j \\rVert_2\\) (as close as possible). The operator \\(\\lVert \\cdot \\rVert_2\\) is the Euclidean norm, measuring Euclidean distance.\nAs such, if we can find a perfect solution, then the dissimilarities can be mapped into Euclidean distances in a \\(k\\)-dimensional space.\n\n\n12.4.2 Classic MDS\nSuppose that the elements of \\(D\\) measure Euclidean distances between \\(n\\) points, each of which has \\(k\\) coordinates:\n\\[\nX = \\begin{bmatrix}\n    x_{11} & x_{12} &  \\dots  & x_{1k} \\\\\n    x_{21} & x_{22} &  \\dots  & x_{2k} \\\\\n    \\vdots & \\vdots &  \\ddots & \\vdots \\\\\n    x_{n1} & x_{n2} &  \\dots  & x_{nk}\n\\end{bmatrix}\n\\] We consider the centered coordinates:\n\\[\n\\sum_i x_{ij} = 0\n\\] And the matrix \\(B = X X^t\\), whose coefficients are \\(B_{ij} = \\sum_k x_{ik} x_{jk}\\). We can write the square of the distance between point \\(i\\) and \\(j\\) as:\n\\[ d_{ij}^2 = \\sum_k (x_{ik} - x_{jk})^2  = \\sum_k x_{ik}^2 + \\sum_k x_{jk}^2 -2 \\sum_k x_{ik} x_{jk} = B_{ii} + B_{jj} - 2 B_{ij}\\]\nNote that, because of the centering:\n\\[\n\\sum_i B_{ij} = \\sum_i \\sum_k x_{ik} x_{jk} = \\sum_k x_{jk} \\sum_i x_{ik} = 0\n\\]\nNow we compute:\n\\[\n\\sum_i d_{ij}^2 = \\sum_i (B_{ii} + B_{jj} - 2 B_{ij}) = \\sum_i B_{ii} + \\sum_i B_{jj} - 2 \\sum_i B_{ij} = \\text{Tr}(B) + n B_{jj}\n\\]\nSimilarly (distances are symmetric):\n\\[\n\\sum_j d_{ij}^2 = \\text{Tr}(B) + n B_{ii}\n\\]\nAnd, finally:\n\\[\n\\sum_i \\sum_j d_{ij}^2 = 2 n \\text{Tr}(B)\n\\]\nFrom these three equations, we obtain:\n\\[\nB_{ii} = \\frac{\\sum_j d_{ij}^2}{n} - \\frac{\\sum_i \\sum_j d_{ij}^2 }{2 n^2}\n\\]\nand\n\\[\nB_{jj} = \\frac{\\sum_i d_{ij}^2}{n} - \\frac{\\sum_i \\sum_j d_{ij}^2 }{2 n^2}\n\\]\nTherefore:\n\\[\nB_{ij} = -\\frac{1}{2}(d_{ij}^2 - B_{ii} - B_{jj}) = -\\frac{1}{2}\\left(d_{ij}^2 - \\frac{\\sum_i d_{ij}^2}{n} - \\frac{\\sum_j d_{ij}^2}{n}  + \\frac{\\sum_i \\sum_j d_{ij}^2 }{n^2} \\right)\n\\]\nWith some algebra, one can show that this is equivalent to:\n\\[B = -\\frac{1}{2} C D^{(2)} C\\]\nWhere \\(D^{(2)}\\) is the matrix of squared distances, and \\(C\\) is the centering matrix \\(C = 1 - \\frac{1}{n}\\mathcal O\\) (and \\(\\mathcal O\\) is the matrix of all ones). Thus, we can obtain \\(B\\) directly from the distance matrix. Once we’ve done this, \\(X\\) can be found by taking the eigenvalue decomposition:\n\\[\nB = X X^t = Q \\Lambda Q^t\n\\]\n(where \\(Q\\) is the matrix of eigenvectors of \\(B\\), and \\(\\Lambda\\) a diagonal matrix of the eigenvalues of \\(B\\)). Therefore:\n\\[ X = Q \\Lambda^{\\frac{1}{2}}\\]\nFor example, let’s look at the driving distance in km between cities in the US:\n\n# read distances US\nusa <- read_csv(\"data/dist_US.csv\")\n\nRows: 265356 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): from, to\ndbl (1): dist\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# make into a matrix of distances\nM <- usa %>% pivot_wider(names_from = to, values_from = `dist`) %>% \n  dplyr::select(-from) %>% \n  as.matrix()\nM[is.na(M)] <- 0 \nrownames(M) <- colnames(M)\n# make symmetric\nM <- M + t(M)\nM[1:2, 1:2]\n\n                                       Abilene, TX, United States\nAbilene, TX, United States                                   0.00\nAhwatukee Foothills, AZ, United States                    1487.19\n                                       Ahwatukee Foothills, AZ, United States\nAbilene, TX, United States                                            1487.19\nAhwatukee Foothills, AZ, United States                                   0.00\n\n\nAnd perform classic MDS using two dimensions:\n\nmds_fit <- cmdscale(M, k = 2) # k is the dimension of the embedding\nmds_fit <- tibble(id = rownames(M), \n                  x = mds_fit[,1], y = mds_fit[,2])\npl <- mds_fit %>% \n  ggplot() + \n  aes(x = x, y = y) + \n  geom_point() + \n  xlim(2 * range(mds_fit$x))\n\nshow(pl)\n\n\n\n# highlight some major cities\nhh <- c(122, 175, 177, 373, 408, 445, 572, 596, 691)\nmds_highlight <- mds_fit %>% slice(hh)\nshow(pl + geom_point(data  = mds_highlight, aes(colour = rownames(M)[hh])))"
  },
  {
    "objectID": "11-SVD_PCA.html#readings",
    "href": "11-SVD_PCA.html#readings",
    "title": "12  Principal Component Analysis",
    "section": "12.5 Readings",
    "text": "12.5 Readings\nSVD is the most important decomposition, but several interesting variations have been proposed for data science. Read this very cool paper on face recognition using Non-negative Matrix Factorization.\n\n12.5.1 Exercise: PCA sommelier\nThe file Wine.csv contains several measures made on 178 wines from Piedmont, produced using three different grapes (column Grape, with 1 = Barolo, 2 = Grignolino, 3 = Barbera). Use the 13 measured variables (i.e., all but Grape) to perform a PCA. First, do it “the hard way” using SVD, and then, calling the prcomp function. Can you recover the right classification of grapes?"
  },
  {
    "objectID": "12-clustering.html#k-means-algorithm",
    "href": "12-clustering.html#k-means-algorithm",
    "title": "13  Clustering",
    "section": "13.1 K-means algorithm",
    "text": "13.1 K-means algorithm\n\ndivide data into K clusters\ncalculate centroids for each\ngo through each data point until nothing changes\n\ncalculate distance to each centroid\nassign to nearest centroid\nrecalculate centroids for the two affected clusters\n\n\nLet us apply the k-means algorithm to our well-studied penguin data set. In the script below, we remove the NAs, and select out the categorical variables, as they are not directly useful for the distance-based algorithm, leaving the four numeric variables to define similarity between individuals. The question is, will they cluster penguins according to species?t\n\n#set.seed(20)\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\npen_data <- penguins %>% drop_na() \n#pen_train <- pen_data  %>% dplyr::select(-species,-island, -sex, -year) # remove species (the true labels)\npen_train <- pen_data  %>% dplyr::select(-species,-island, -sex) # remove species (the true labels)\npen_km <- kmeans(pen_train, 3) #k-means with 3 clusters\npen_km\n\nK-means clustering with 3 clusters of sizes 113, 140, 80\n\nCluster means:\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g     year\n1       44.24336      17.44779          201.5487    4310.619 2008.000\n2       41.12214      17.94643          189.6286    3461.250 2008.021\n3       48.66250      15.39750          219.9875    5365.938 2008.138\n\nClustering vector:\n  [1] 2 2 2 2 2 2 1 2 2 1 2 2 1 2 1 2 2 2 1 2 2 2 2 2 1 2 1 2 1 2 1 1 2 2 1 2 1\n [38] 2 1 2 1 2 2 1 2 1 2 1 2 2 2 2 2 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1\n [75] 2 1 2 1 2 2 2 2 1 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 2 2 1 2 1 2 1 2 1 1 1 2\n[112] 2 2 2 2 2 2 2 2 1 2 1 2 1 2 2 2 1 2 1 2 1 2 1 2 2 2 2 2 2 1 2 2 2 2 1 1 3\n[149] 1 3 3 1 1 3 1 3 1 3 1 3 1 3 1 3 1 3 3 3 1 3 3 3 3 1 3 3 1 3 3 3 3 3 3 1 3\n[186] 1 3 1 1 3 3 1 3 3 3 3 3 1 3 3 3 1 3 1 3 1 3 1 3 1 3 3 1 3 1 3 3 3 1 3 1 3\n[223] 1 3 1 3 1 3 1 3 1 3 3 3 3 3 1 3 3 3 3 3 1 3 3 3 3 3 3 1 3 1 3 3 3 1 3 1 3\n[260] 3 3 3 3 3 3 2 1 2 2 2 1 2 2 1 2 2 2 2 1 2 1 2 2 2 1 2 2 2 2 2 1 2 2 2 1 2\n[297] 1 2 1 2 1 2 1 2 1 1 2 2 2 2 1 2 1 2 2 2 1 2 1 2 2 2 1 2 2 1 2 2 1 2 2 1 2\n\nWithin cluster sum of squares by cluster:\n[1] 9318106 9724908 9718878\n (between_SS / total_SS =  86.6 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\ntable(pen_km$cluster, pen_data$species)\n\n   \n    Adelie Chinstrap Gentoo\n  1     52        22     39\n  2     94        46      0\n  3      0         0     80\n\nfviz_cluster(list(data = pen_train, cluster = pen_km$cluster),\nellipse.type = \"norm\", geom = \"point\", stand = FALSE, palette = \"jco\", ggtheme = theme_classic())\n\n\n\n\nThe plot is produced by performing PCA to reduce the number of variables from 4 to 2, helping present the data points in the way that optimizes their visual separation. Notice that the clusters are not well separated, and when compared with the actual classification given by species, they do not do well.\nHowever, the four measurements have very different variances, so we try scaling them to make them all have equal variance of one:\n\npen_data <- penguins %>% drop_na()\n#pen_scaled <- scale(pen_data %>% dplyr::select(-species, -island, -sex, -year) )\npen_scaled <- scale(pen_data %>% dplyr::select(-species, -island, -sex) )\npen_km <- kmeans(pen_scaled, 3)\npen_km\n\nK-means clustering with 3 clusters of sizes 119, 76, 138\n\nCluster means:\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g        year\n1      0.6537742    -1.1010497         1.1607163   1.0995561  0.03097981\n2     -0.3345668     0.5109535        -0.4989583  -0.6497332  1.17838142\n3     -0.3795077     0.6680613        -0.7261189  -0.5903438 -0.67567816\n\nClustering vector:\n  [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n [38] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n [75] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1\n[149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[260] 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n[297] 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n\nWithin cluster sum of squares by cluster:\n[1] 250.6269 142.1897 317.5351\n (between_SS / total_SS =  57.2 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\ntable(pen_km$cluster, pen_data$species)\n\n   \n    Adelie Chinstrap Gentoo\n  1      0         0    119\n  2     52        24      0\n  3     94        44      0\n\nfviz_cluster(list(data = pen_scaled, cluster = pen_km$cluster),\nellipse.type = \"norm\", geom = \"point\", stand = FALSE, palette = \"jco\", ggtheme = theme_classic())\n\n\n\n\nNow we get much better separation, as well as much better prediction quality. However, if you run the above code several times, you will see different results, because k-means starts with a random selection of centroids. In cases like this, where there is not very obvious clusters, it may converge to different classifications. Here, for some trials we see very good prediction quality for all three species, but other times two of the species are commingled.\n\n13.1.1 Assumptions of K-means algorithm\n\nThere is a meaningful distance measure\nClusters are roughly spherical\nClusters are of similar size\n\n\n# Generate random data which will be first cluster\nclust1 <- data_frame(x = rnorm(200), y = rnorm(200))\n# Generate the second cluster which will ‘surround’ the first cluster\nclust2 <- data_frame(r = rnorm(200, 15, .5), \n                     theta = runif(200, 0, 2 * pi),\n                 x = r * cos(theta), y = r * sin(theta)) %>%\n  dplyr::select(x, y)\n#Combine the data\ndataset_cir <- rbind(clust1, clust2)\n#see the plot\ndataset_cir %>% ggplot() + aes(x = x, y = y) + geom_point()\n\n\n\n\n\n#Fit the k-means model\nk_clust_spher1 <- kmeans(dataset_cir, centers=2)\n#Plot the data and clusters\nfviz_cluster(list(data = dataset_cir, \n                  cluster = k_clust_spher1$cluster),\n             ellipse.type = \"norm\", \n             geom = \"point\", stand = FALSE, \n             palette = \"jco\", \n             ggtheme = theme_classic())\n\n\n\n\n\n# Make the first cluster with 200 random values\nclust1 <- data_frame(x = rnorm(200), \n                     y = rnorm(200))\n# Keep 10 values together to make the second cluster\nclust2 <- data_frame(x=c(5,5.1,5.2,5.3,5.4),\n                     y=c(5,5,5,5,5))\n#Combine the data\ndataset_uneven <- rbind(clust1,clust2)\ndataset_uneven %>% ggplot() + aes(x = x, y = y) + geom_point()\n\n\n\n\n\nk_clust_spher3 <- kmeans(dataset_uneven, centers=2)\nfviz_cluster(list(data = dataset_uneven, \n                  cluster = k_clust_spher3$cluster),\n             ellipse.type = \"norm\", \n             geom = \"point\", \n             stand = FALSE, \n             palette = \"jco\", \n             ggtheme = theme_classic())"
  },
  {
    "objectID": "12-clustering.html#hierarchical-clustering",
    "href": "12-clustering.html#hierarchical-clustering",
    "title": "13  Clustering",
    "section": "13.2 Hierarchical clustering",
    "text": "13.2 Hierarchical clustering\nHierarchical clustering is different approach from k-means, although it is also based on a notion of distance. The goal is to create a tree, akin to phylogeny, based on proximity of different points to each other, and then to divide it into groups by cutting the tree a certain depth from the root.\n\n13.2.1 Agglomerative clustering\nStart with single data points as “clusters,” then iteratively combine the closest pair of clusters. The closeness may be defined in the following ways:\n\nSingle Linkage: In single linkage, we define the distance between two clusters as the minimum distance between any single data point in the first cluster and any single data point in the second cluster.\nComplete Linkage: In complete linkage, we define the distance between two clusters to be the maximum distance between any single data point in the first cluster and any single data point in the second cluster.\nAverage Linkage: In average linkage, we define the distance between two clusters to be the average distance between data points in the first cluster and data points in the second cluster.\nCentroid Method: In centroid method, the distance between two clusters is the distance between the two mean vectors of the clusters.\nWard’s Method: This method does not directly define a measure of distance between two points or clusters. It is an ANOVA based approach. One-way univariate ANOVAs are done for each variable with groups defined by the clusters at that stage of the process. At each stage, two clusters merge that provide the smallest increase in the combined error sum of squares.\n\n\n# Use hcut() which compute hclust and cut the tree\ncir_hc <- hcut(dataset_cir, k = 2, hc_method = \"single\")\n# Visualize dendrogram\nfviz_dend(cir_hc, show_labels = FALSE, rect = TRUE)\n\n\n\n# Visualize cluster\nfviz_cluster(cir_hc, ellipse.type = \"convex\")\n\n\n\n\n\n# Use hcut() which compute hclust and cut the tree\nuneven_hc <- hcut(dataset_uneven, k = 2, hc_method = \"single\")\n# Visualize dendrogram\nfviz_dend(uneven_hc, show_labels = FALSE, rect = TRUE)\n\n\n\n# Visualize cluster\nfviz_cluster(uneven_hc, ellipse.type = \"convex\")\n\n\n\n\n\n\n13.2.2 Clustering penguin data using hierarchical methods\nTry different methods and see which one generates the best results\n\n# Hierarchical clustering\n# ++++++++++++++++++++++++\n# Use hcut() which compute hclust and cut the tree\npen_hc <- hcut(pen_scaled, k = 3, hc_method = \"complete\")\n# Visualize dendrogram\nfviz_dend(pen_hc)\n\n\n\n# Visualize cluster\nfviz_cluster(pen_hc)\n\n\n\ntable(pen_hc$cluster, pen_data$species)\n\n   \n    Adelie Chinstrap Gentoo\n  1    145         7      0\n  2      1        61      0\n  3      0         0    119\n\n\nExercise Try using different clustering methods!"
  },
  {
    "objectID": "12-clustering.html#clustering-analysis-and-validation",
    "href": "12-clustering.html#clustering-analysis-and-validation",
    "title": "13  Clustering",
    "section": "13.3 Clustering analysis and validation",
    "text": "13.3 Clustering analysis and validation\n\n13.3.1 Hopkins statistic\nComparing the mean nearest-neighbor distance between uniformly generated sample points and mean nearest-neighbor distance within the data set. \\[\nH = 1 - \\frac{\\sum u^d_i}{\\sum u^d_i + \\sum w^d_i}\n\\] This quantifies the “clustering tendency” of the data set.\n\n# Check Cluster Tendency--Hopkins Statistic\nhopkins(pen_scaled, n = 30) # n should be about 20% of the data\n\n$H\n[1] 0.2272707\n\n# run a couple times to sample repeatedly\n\nIf H is below 0.5 reject the null hypothesis, which is that the data are generated by a Poisson point process (uniformly distributed.)\n\n# Visual Assessment of Cluster Tendency\nfviz_dist(dist(pen_scaled), show_labels = FALSE)+ labs(title = \"Scaled penguin data\")\n\n\n\n\n\nRed is high similarity (low dissimilarity)\nBlue is low similarity (high dissimilarity)\n\n\n\n13.3.2 Elbow method\n\n# Elbow method\nfviz_nbclust(pen_scaled, kmeans, method = \"wss\") + geom_vline(xintercept = 2, linetype = 2)+\nlabs(subtitle = \"Elbow method for K-means of the scaled penguin data\")\n\n\n\n\n\n\n13.3.3 Silhouette Plot\nMeasures how similar an object \\(i\\) is to the other objects in its same cluster versus the objects outside of its cluster; \\(S_i\\) values range from -1 to 1. Close to 1 means very similar to objects in its own group and dissimilar to others\n\n# Silhouette method\nfviz_nbclust(pen_scaled, kmeans, method = \"silhouette\")+ labs(subtitle = \"Silhouette method for k-means\")\n\n\n\n\n\n\n13.3.4 Lazy way: use all the methods!\n\n# not evaluating because it does not run on my computer SA Sept 22 2022\nnb <- NbClust(pen_scaled, distance = \"euclidean\", min.nc = 2,\n        max.nc = 10, method = \"kmeans\")\nfviz_nbclust(nb)\n\n\n\n13.3.5 Validation using bootstrapping\nOne common approach to validating clustering is to use the approach called bootstrapping which involves repeatedly sampling from the data set, running the clustering algorithm and comparing the results. One algorithm uses the Jaccard coefficient to quantify similarity between sets, which is defined as the number of points in the intersection of the two sets (those which are in both sets), divided by the number of points in the union of the two sets (the point that are in either one or the other set):\n\\[\nJ = \\frac{ \\vert A \\cap B \\vert }{\\vert A \\cup B \\vert}\n\\] The vertical lines indicate the number of points (cardinality) in the set.\n\nk <- 3\ncboot.hclust <- clusterboot(pen_scaled, clustermethod=kmeansCBI, k= k)\n\nboot 1 \nboot 2 \nboot 3 \nboot 4 \nboot 5 \nboot 6 \nboot 7 \nboot 8 \nboot 9 \nboot 10 \nboot 11 \nboot 12 \nboot 13 \nboot 14 \nboot 15 \nboot 16 \nboot 17 \nboot 18 \nboot 19 \nboot 20 \nboot 21 \nboot 22 \nboot 23 \nboot 24 \nboot 25 \nboot 26 \nboot 27 \nboot 28 \nboot 29 \nboot 30 \nboot 31 \nboot 32 \nboot 33 \nboot 34 \nboot 35 \nboot 36 \nboot 37 \nboot 38 \nboot 39 \nboot 40 \nboot 41 \nboot 42 \nboot 43 \nboot 44 \nboot 45 \nboot 46 \nboot 47 \nboot 48 \nboot 49 \nboot 50 \nboot 51 \nboot 52 \nboot 53 \nboot 54 \nboot 55 \nboot 56 \nboot 57 \nboot 58 \nboot 59 \nboot 60 \nboot 61 \nboot 62 \nboot 63 \nboot 64 \nboot 65 \nboot 66 \nboot 67 \nboot 68 \nboot 69 \nboot 70 \nboot 71 \nboot 72 \nboot 73 \nboot 74 \nboot 75 \nboot 76 \nboot 77 \nboot 78 \nboot 79 \nboot 80 \nboot 81 \nboot 82 \nboot 83 \nboot 84 \nboot 85 \nboot 86 \nboot 87 \nboot 88 \nboot 89 \nboot 90 \nboot 91 \nboot 92 \nboot 93 \nboot 94 \nboot 95 \nboot 96 \nboot 97 \nboot 98 \nboot 99 \nboot 100 \n\nprint(cboot.hclust)\n\n* Cluster stability assessment *\nCluster method:  kmeans \nFull clustering results are given as parameter result\nof the clusterboot object, which also provides further statistics\nof the resampling results.\nNumber of resampling runs:  100 \n\nNumber of clusters found in data:  3 \n\n Clusterwise Jaccard bootstrap (omitting multiple points) mean:\n[1] 0.5994643 0.5494741 0.7072403\ndissolved:\n[1] 33 67  0\nrecovered:\n[1] 23 15 27\n\n#cboot.hclust <- clusterboot(bcdata, clustermethod=hclustCBI,\n       #                    method=\"single\", k=2)"
  },
  {
    "objectID": "12-clustering.html#application-to-breast-cancer-data",
    "href": "12-clustering.html#application-to-breast-cancer-data",
    "title": "13  Clustering",
    "section": "13.4 Application to breast cancer data",
    "text": "13.4 Application to breast cancer data\nThe following measurements are based on biopsy data on patients with suspected breast cancer (see [5]). It contains several measurements of cell characteristics, as well as the classification of each biopsy into malignant or benign (2 or 4). Let us see if using clustering\n\n# Import Breast Cancer Data Set\nfulldata <- read_csv(\"data/Wisconsin_Breast_Cancers.csv\")\nbcdata <- fulldata %>% drop_na() %>% dplyr::select(-Sample, -Class)\nglimpse(fulldata)\n\nRows: 684\nColumns: 11\n$ Sample                      <dbl> 1000025, 1002945, 1015425, 1016277, 101702…\n$ Clump_Thickness             <dbl> 5, 5, 3, 6, 4, 8, 1, 2, 2, 4, 1, 2, 5, 1, …\n$ Size_Uniformity             <dbl> 1, 4, 1, 8, 1, 10, 1, 1, 1, 2, 1, 1, 3, 1,…\n$ Shape_Uniformity            <dbl> 1, 4, 1, 8, 1, 10, 1, 2, 1, 1, 1, 1, 3, 1,…\n$ Marginal_Adhesion           <dbl> 1, 5, 1, 1, 3, 8, 1, 1, 1, 1, 1, 1, 3, 1, …\n$ Single_Epithelial_Cell_Size <dbl> 2, 7, 2, 3, 2, 7, 2, 2, 2, 2, 1, 2, 2, 2, …\n$ Bare_Nuclei                 <dbl> 1, 10, 2, 4, 1, 10, 10, 1, 1, 1, 1, 1, 3, …\n$ Bland_Chromatin             <dbl> 3, 3, 3, 3, 3, 9, 3, 3, 1, 2, 3, 2, 4, 3, …\n$ Normal_Nucleoli             <dbl> 1, 2, 1, 7, 1, 7, 1, 1, 1, 1, 1, 1, 4, 1, …\n$ Mitoses                     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, …\n$ Class                       <dbl> 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 4, 2, …\n\n\n\n# Visually Inspect Data (PCA)\nfviz_pca_ind(prcomp(bcdata), title = \"PCA - Breast Cancer data\", geom = \"point\", ggtheme = theme_classic())\n\n\n\n\n\nbc_km <- kmeans(scale(bcdata), 2)\nbc_km\n\nK-means clustering with 2 clusters of sizes 231, 453\n\nCluster means:\n  Clump_Thickness Size_Uniformity Shape_Uniformity Marginal_Adhesion\n1       0.9752406       1.1970884        1.1888401         1.0181299\n2      -0.4973081      -0.6104358       -0.6062297        -0.5191788\n  Single_Epithelial_Cell_Size Bare_Nuclei Bland_Chromatin Normal_Nucleoli\n1                   1.0066757   1.1562984       1.0783707        1.042569\n2                  -0.5133379  -0.5896356      -0.5498977       -0.531641\n     Mitoses\n1  0.6021640\n2 -0.3070638\n\nClustering vector:\n  [1] 2 1 2 1 2 1 2 2 2 2 2 2 2 2 1 1 2 2 1 2 1 1 2 2 2 2 2 2 2 2 2 1 2 2 2 1 2\n [38] 1 1 1 1 1 1 2 1 2 2 1 1 2 1 1 1 1 1 2 2 2 1 2 1 2 2 1 2 1 1 2 2 1 2 1 1 2\n [75] 2 2 2 2 2 2 2 2 1 1 1 1 2 2 2 2 2 2 2 2 2 2 1 1 1 2 2 2 1 1 1 1 2 1 2 1 1\n[112] 1 2 2 2 1 2 2 2 2 1 1 1 2 1 2 1 2 2 2 1 2 2 2 2 2 2 2 2 1 2 2 2 2 2 1 2 1\n[149] 1 2 2 1 2 2 1 1 2 2 2 2 1 1 2 2 2 2 2 1 1 1 2 1 2 2 2 2 2 1 1 2 1 1 1 2 1\n[186] 1 2 2 2 2 1 2 2 2 1 1 2 2 2 1 1 2 2 2 1 1 2 1 1 1 2 2 1 2 2 1 2 1 1 2 1 1\n[223] 2 1 1 1 2 1 2 1 1 1 1 2 2 2 2 2 2 1 2 2 2 1 1 1 1 1 2 2 2 1 1 1 1 1 1 2 1\n[260] 1 1 2 1 2 1 2 2 2 2 2 1 2 2 1 1 1 1 1 2 1 1 2 2 1 1 1 2 1 1 2 1 2 1 1 2 2\n[297] 1 2 2 2 1 2 2 1 1 2 1 1 2 1 2 2 2 2 1 1 1 2 2 1 1 2 1 2 2 1 1 2 2 2 1 2 2\n[334] 2 2 1 2 2 1 1 2 2 2 1 1 1 1 1 2 2 2 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2\n[371] 2 2 1 2 2 2 2 1 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 1 2 1 2 1 2 2 2 2 1\n[408] 2 2 2 1 2 1 2 2 2 2 2 2 1 1 1 2 2 2 1 2 2 2 2 2 2 2 2 1 2 2 2 1 2 2 1 1 2\n[445] 2 2 2 2 2 2 1 1 1 2 2 2 2 2 2 2 2 2 2 2 1 2 2 1 1 2 2 2 1 1 2 2 1 2 1 2 2\n[482] 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 1 1 2 2 2 1 2 2 1 1 2 2 2 2 2 2 1 2 2\n[519] 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 1 1\n[556] 1 1 2 2 1 2 2 2 2 2 2 1 1 2 2 2 1 2 1 2 1 1 1 2 1 2 2 2 2 2 2 2 2 1 1 1 2\n[593] 2 1 2 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 1 2 2 1 2 2 2 2 2 2 2 2\n[630] 2 2 2 1 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 2 2 2 2 1 1 1 2 2 2 2 2 2 2 2 2 1 1\n[667] 2 2 2 2 2 2 2 2 2 1 2 2 2 2 1 1 1 1\n\nWithin cluster sum of squares by cluster:\n[1] 2156.785  573.108\n (between_SS / total_SS =  55.6 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\ntable(bc_km$cluster, fulldata$Class)\n\n   \n      2   4\n  1  10 221\n  2 434  19\n\n#irisCluster$cluster <- as.factor(irisCluster$cluster)\n#ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()\n\nfviz_cluster(list(data = bcdata, cluster = bc_km$cluster),\nellipse.type = \"norm\", geom = \"point\", stand = FALSE, palette = \"jco\", ggtheme = theme_classic())\n\n\n\n\n\n# Use hcut() which compute hclust and cut the tree\nbc_hc <- hcut(scale(bcdata), k = 2, hc_method = \"ward\")\n# Visualize dendrogram\nfviz_dend(bc_hc, show_labels = FALSE, rect = TRUE)\n\n\n\n# Visualize cluster\nfviz_cluster(bc_hc, ellipse.type = \"convex\")\n\n\n\ntable(bc_hc$cluster, fulldata$Class)\n\n   \n      2   4\n  1 412   2\n  2  32 238"
  },
  {
    "objectID": "12-clustering.html#references",
    "href": "12-clustering.html#references",
    "title": "13  Clustering",
    "section": "13.5 References:",
    "text": "13.5 References:\n\nhttps://www.r-bloggers.com/exploring-assumptions-of-k-means-clustering-using-r/\nhttps://onlinecourses.science.psu.edu/stat505/node/143/\nhttps://github.com/hhundiwala/hierarchical-clustering\nhttps://www.r-bloggers.com/bootstrap-evaluation-of-clusters/\nhttps://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)"
  },
  {
    "objectID": "13-generalized_linear_models.html#goal",
    "href": "13-generalized_linear_models.html#goal",
    "title": "14  Generalized linear models",
    "section": "14.1 Goal",
    "text": "14.1 Goal\nLearn about Generalized Linear Models (GLMs), and be able to decide which model is most appropriate for the problem at hand.\nLet’s load some packages:\n\nlibrary(tidyverse) # our friend the tidyverse\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(MASS) # negative binom regression\n\n\nAttaching package: 'MASS'\n\nThe following object is masked from 'package:dplyr':\n\n    select"
  },
  {
    "objectID": "13-generalized_linear_models.html#introduction",
    "href": "13-generalized_linear_models.html#introduction",
    "title": "14  Generalized linear models",
    "section": "14.2 Introduction",
    "text": "14.2 Introduction\nThe linear regression we’ve explored during the past weeks attempts to estimate the expected value for response (dependent) variable \\(Y\\) given the predictors \\(X\\). It assumes that the response variable changes continuously, and that errors are normally distributed around the mean. In many cases, however:\n\nthe response variable does not have support in the whole real line (e.g., binary, count, only positive values)\nthe errors are not normally distributed (e.g., the response variable can take only positive values)\nthe variance changes with the mean (heteroscedasticity)\n\nIn these cases, you can use Generalized Linear Models (GLMs) to fit the data. In the simplest form of GLMs,\n\nThe response variable is modeled by a single-parameter distribution from the exponential family (Gaussian, Gamma, Binomial, Poisson, etc.)\nA link function linearizes the relationship between the fitted values and the predictors.\nParameters are estimated through a least squares algorithm.\n\n\n14.2.1 Model structure\nIn practice, we need to determine three parts of the model:\n\nRandom component the entries of the response variable (\\(Y\\)) are assumed to be independently drawn from a certain distribution (e.g., Binomial)—typically a distribution that can be modeled using a single parameter.\nSystematic component the explanatory variables (\\(X_1\\), \\(X_2\\), \\(\\ldots\\)) are combined linearly to form a linear predictor (e.g., \\(\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\ldots\\)). The explanatory variables can be continuous, categorical, or mixed.\nLink function \\(g(u)\\) specifies how the random and systematic components are connected."
  },
  {
    "objectID": "13-generalized_linear_models.html#binary-data",
    "href": "13-generalized_linear_models.html#binary-data",
    "title": "14  Generalized linear models",
    "section": "14.3 Binary data",
    "text": "14.3 Binary data\nThe most extreme case of departure from normality is when the response variable can assume only values 0 or 1 (no/yes, survived/deceased, lost/won, etc.). A Bernoulli random variable can take values 0 or 1, and therefore provides the Random component of the model:\n\\[\nP(Y_i = y_i | \\pi_i) = \\pi_i^{y_i} (1 - \\pi_i)^{1 - y_i}\n\\]\nSaying that the probability \\(P(Y_i = 1) = \\pi_i\\), and \\(P(Y_i = 0) = 1 - \\pi_i\\). Now we want to relate the parameter \\(\\pi_i\\) to the linear predictor (i.e., choose a link function). This can be accomplished in a number of ways.\n\n14.3.1 Logistic regression\nThe most popular choice is to use the Logit function as the link function:\n\\[\n\\text{Logit}(\\pi_i) = \\beta_0 + \\beta_1 x_i\n\\]\nwhere the function can be written as:\n\\[\n\\text{Logit}(\\pi_i) = \\log\\left( \\frac{\\pi_i}{1 - \\pi_i} \\right) = \\log(\\pi_i) - \\log(1 - \\pi_i)\n\\]\nPractically, this means that\n\\[\n\\pi_i = \\frac{e^{\\beta_0 + \\beta_1 x_i}}{1 + e^{\\beta_0 + \\beta_1 x_i}} = 1 - \\frac{1}{1 + e^{\\beta_0 + \\beta_1 x_i}}\n\\]\nClearly, when \\(\\beta_0 + \\beta_1 x_i = 0\\), the probability \\(\\pi_i = 1/2\\), while the probability tends to 1 when \\((\\beta_0 + \\beta_1 x_i) \\to \\infty\\) and to zero when \\((\\beta_0 + \\beta_1 x_i) \\to -\\infty\\). :\n\n# some random data\nX <- rnorm(100)\nbeta_0 <- 0.35\nbeta_1 <- -3.2\nlinear_predictor <- beta_0 + beta_1 * X\npredicted_pi_i <- exp(linear_predictor) / (1 + exp(linear_predictor))\nggplot(data = tibble(linear_predictor = linear_predictor, probability = predicted_pi_i)) + \n  aes(x = linear_predictor, y = probability) + \n  geom_point() + geom_line()\n\n\n\n\nAs you can see, this is a logistic curve, hence the name. The parameters \\(\\beta_0\\) and \\(\\beta_1\\) control the location of the inflection point and the steepness of the curve, allowing you to model binary response variables (and, with a slight abuse of the error structure, proportions or probabilities).\nOther choices of link functions are possible. For example, in economics the probit function is preferred:\n\\[\n\\text{Probit}(\\pi_i) = \\beta_0 + \\beta_1 x_i\n\\]\nwhere\n\\[\n\\text{Probit}(\\pi_i) = \\Phi(\\pi_i)\n\\] and \\(\\Phi(\\cdot)\\) is the cumulative distribution function of the standard normal normal distribution:\n\\[\n\\Phi(z) = \\frac{1}{\\sqrt{2 \\pi}}\\int_{-\\infty}^z e^{\\frac{-t^2}{2}} dt\n\\] Clearly, you could alternatively use the cumulative distribution function of any distribution that has support on the real line.\n\n\n14.3.2 A simple example\nWe want to know whether being in first, second and third class, as well as gender (women and women first!) influenced the probability of survival in the Titanic disaster. We start with a null model (all passengers have the same probability of survival):\n\nlibrary(titanic)\n# model 0: probability of survival in general\n# regress against an intercept\nmodel0 <- glm(Survived ~ 1, # only intercept\n              data = titanic_train, \n              family = \"binomial\") # logistic regression\nsummary(model0)\n\n\nCall:\nglm(formula = Survived ~ 1, family = \"binomial\", data = titanic_train)\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -0.47329    0.06889   -6.87  6.4e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1186.7  on 890  degrees of freedom\nResidual deviance: 1186.7  on 890  degrees of freedom\nAIC: 1188.7\n\nNumber of Fisher Scoring iterations: 4\n\n# the best fitting (alpha) intercept should lead to \n# e^alpha / (1 + e^alpha) = mean(Survived)\nmean(titanic_train$Survived)\n\n[1] 0.3838384\n\nexp(model0$coefficients) / (1 + exp(model0$coefficients))\n\n(Intercept) \n  0.3838384 \n\n\nNow let’s include gender:\n\nmodel1 <- glm(Survived ~ Sex, # one sex as baseline, the other modifies intercept\n              data = titanic_train,\n              family = \"binomial\")\nsummary(model1)\n\n\nCall:\nglm(formula = Survived ~ Sex, family = \"binomial\", data = titanic_train)\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   1.0566     0.1290   8.191 2.58e-16 ***\nSexmale      -2.5137     0.1672 -15.036  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1186.7  on 890  degrees of freedom\nResidual deviance:  917.8  on 889  degrees of freedom\nAIC: 921.8\n\nNumber of Fisher Scoring iterations: 4\n\n\nWhat is the best-fitting probability of survival for male/female?\n\ncoeffs <- model1$coefficients\n# prob women\nas.numeric(1 - 1 / (1 + exp(coeffs[1])))\n\n[1] 0.7420382\n\n# prob men\nas.numeric(1 - 1 / (1 + exp(coeffs[1] + coeffs[2])))\n\n[1] 0.1889081\n\n\nNow let’s see whether we can explain better the data using the class:\n\nmodel2 <- glm(Survived ~ Sex + factor(Pclass), # combine Sex and Pclass\n              data = titanic_train,\n              family = \"binomial\")\nsummary(model2)\n\n\nCall:\nglm(formula = Survived ~ Sex + factor(Pclass), family = \"binomial\", \n    data = titanic_train)\n\nCoefficients:\n                Estimate Std. Error z value Pr(>|z|)    \n(Intercept)       2.2971     0.2190  10.490  < 2e-16 ***\nSexmale          -2.6419     0.1841 -14.351  < 2e-16 ***\nfactor(Pclass)2  -0.8380     0.2447  -3.424 0.000618 ***\nfactor(Pclass)3  -1.9055     0.2141  -8.898  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1186.66  on 890  degrees of freedom\nResidual deviance:  826.89  on 887  degrees of freedom\nAIC: 834.89\n\nNumber of Fisher Scoring iterations: 4\n\n\nA woman in first class would have survival probability:\n\ncoeffs <- model2$coefficients\n# prob women first class\nas.numeric(1 - 1 / (1 + exp(coeffs[1])))\n\n[1] 0.9086385\n\n\nWhile a man in third class:\n\nas.numeric(1 - 1 / (1 + exp(coeffs[1] + coeffs[2] + coeffs[4])))\n\n[1] 0.09532814\n\n\nConsider the alternative models Survived ~ Sex * factor(Pclass), Survived ~ Sex + Pclass, Survived ~ Sex * Pclass, Survived ~ Sex:factor(Pclass), Survived ~ Sex:Pclass. Explain what each model is doing in English.\n\n\n14.3.3 Exercise in class: College admissions\nWith slight abuse of notation, you can fit probabilities using the logistic regression (the only problem is that you don’t know how many values contributed to the calculations of the probabilities—i.e., sample sizes). Read in the file admission_rates.csv, containing data on admissions to several universities. Your goal is to find a good prediction (or a good combination of predictors) for the Admission_rate. You can use State, Ownership (public/private), Citytype (town, suburb, city), SAT (typical SAT score of admits), AvgCost (tuition). Fit the models using:\n\ndt <- read_csv(\"data/admission_rates.csv\")\n\nRows: 195 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Name, State, Ownership, Citytype\ndbl (3): SAT, AvgCost, Admission_rate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# example\nlogit_1 <- glm(Admission_rate ~ AvgCost, data = dt, family = \"binomial\")\n\nWarning in eval(family$initialize): non-integer #successes in a binomial glm!\n\n\n(do not worry about the warning non-integer #successes in a binomial glm!).\n\nPlot fitted vs. observed admission rates, when using different combinations of predictors.\n\nFor the example above:\n\nplot(dt$Admission_rate, logit_1$fitted.values)\nabline(c(0,1))\n\n\n\n\n\nScore the models using AIC: which is the single best predictor of acceptance rate? (Note: as we will see later this week, the lower the AIC, the better).\n\n\nAIC(logit_1)\n\n[1] 220.7783\n\n\n\nWhich the best combination of two predictors?"
  },
  {
    "objectID": "13-generalized_linear_models.html#count-data",
    "href": "13-generalized_linear_models.html#count-data",
    "title": "14  Generalized linear models",
    "section": "14.4 Count data",
    "text": "14.4 Count data\n\n14.4.1 Poisson regression\nSuppose your response variables are non-negative integers. For example, we are counting the number of eggs females lay as a function of their age, body size, etc. A possible model for this case is to think of the response variable as being sampled from a Poisson distribution:\n\\[\nY_i \\sim \\text{Pois}(\\lambda_i)\n\\]\nand that the logarithm of the parameter \\(\\lambda_i\\) depends linearly on the predictors:\n\\[\n\\mathbb E[\\lambda_i] = \\mathbb E[\\log(Y_i|X_i)] = \\beta_0 + \\beta_1 X_i\n\\]\nIn this case, our link function is the logarithm, transforming the relationship between the fitted values and the predictors into a linear regression.\n\n\n14.4.2 Exercise in class: Number of genomes\nThe file data/genomes.csv contains the year in which the genome of a given animal was published. The file sequence_cost.csv the estimated cost per sequencing a Mb in a given year.\n\nCount the number of genomes published per year (store the value as n) and store it in the tibble num_genomes along with the values Year and Dollars_per_Mb (note: you need to use inner_join to pull this off);\nFit the number of genomes published in a given year:\n\nusing only an intercept (your predictions should match the mean) (Code: pois_1 <- glm(n ~ 1, data = num_genomes, family = \"poisson\"))\nusing the year as a predictor\nusing the cost of sequencing as a predictor\n\nFor each model, plot the observed n vs its predicted value, and compute AIC. Is the fit superior when we use Year or Dollars_per_Mb?\n\n\n\n14.4.3 Underdispersed and Overdispersed data\nThe main feature of the Poisson distribution is that the mean and the variance are both equal to \\(\\lambda\\). You might remember (Taylor expansion) that:\n\\[\ne^x = \\sum_{n = 0}^{\\infty} \\frac{x^n}{n!}\n\\]\nThen, for \\(X\\) sampled from a Poisson distribution:\n\\[\n\\begin{aligned}\n\\mathbb E[X] &= \\sum_{x = 0}^{\\infty} x P(X = x) \\\\\n&= \\sum_{x = 0}^{\\infty} x e^{-\\lambda} \\frac{\\lambda^x}{x!} \\\\\n&= \\lambda e^{-\\lambda} \\sum_{(x - 1) = 0}^{\\infty} \\frac{\\lambda^{(x-1)}}{(x-1)!} \\\\\n&= \\lambda e^{-\\lambda}e^{\\lambda} \\\\\n&= \\lambda\n\\end{aligned}\n\\]\nSimilarly, using\n\\[\n\\begin{aligned}\n\\mathbb V[X] &= \\mathbb E[X^2]-\\mathbb E[X]^2\\\\\n&= \\left(\\sum_{x = 0}^{\\infty} x^2 e^{-\\lambda} \\frac{\\lambda^x}{x!} \\right) - \\lambda^2 \\\\\n&= \\ldots\\\\\n&= \\lambda\n\\end{aligned}\n\\]\nThe fact that the variance equals the mean is a hard constraint, rarely matched by real data. When you encounter over-dispersion (i.e., the variance in the data is much larger than what assumed by Poisson), you need to choose a different model. This happens very often, and the main solution to use is a Negative Binomial Regression (a negative binomial distribution can be thought of as a Poisson with a scaled variance). In practice, this amounts to fitting:\n\\[\n\\mathbb E[\\lambda_i] = \\beta_0 + \\beta_1 X_i\n\\] and\n\\[\n\\mathbb E[\\lambda_i^2] - \\mathbb E[\\lambda_i]^2 = \\mathbb V[\\lambda_i] = \\phi \\lambda_i\n\\] Where \\(\\phi\\) controls the dispersion of the data. A value \\(\\phi > 1\\) signals over-dispersion, while (the very rare case of) \\(\\phi < 1\\) under-dispersion. The Poisson regression is appropriate only when \\(\\phi \\approx 1\\). A simple way to test for dispersion in to fit a quasipoisson model, which returns a dispersion parameter (anything larger than 1 means over-dispersion).\n\n\n14.4.4 Exercise in class: Number of genomes\n\nFor the models above, change the family to quasipoisson to check the dispersion (e.g., qpois_1 <- glm(n ~ 1, data = num_genomes, family = \"quasipoisson\")).\nDo you have over-dispersion?\nIf the data are over-dispersed, fit them again using glm.nb (a negative binomial regression model provided by the package MASS).\n\n\n\n14.4.5 Separate distribution for the zeros\nIn several biologically-relevant cases, we have an excess of zeros. For example, you might have animals, that, if they reach the age of 1, will go on to a live a number of years—say well-described by a Poisson distribution. However, mortality immediately after birth is high. In such cases, you can use zero-inflated or zero-hurdle models.\nIn zero-inflated models, you can think of having a conditional branching: with probability \\(p_z\\) your count is zero; if not (prob. \\(1-p_z\\)) it is sampled from a given distribution. As such a count of zero can stem from two different processes: either because you got a zero at the first step, or because you have sampled a zero from the distribution.\nZero-hurdle models are slightly different: you first decide whether you’re going to have a zero; if not, you sample your data from a truncated distribution, such that you cannot sample a zero from this second source.\nZero-inflated and zero-hurdle models are examples of mixture models."
  },
  {
    "objectID": "13-generalized_linear_models.html#other-glms",
    "href": "13-generalized_linear_models.html#other-glms",
    "title": "14  Generalized linear models",
    "section": "14.5 Other GLMs",
    "text": "14.5 Other GLMs\nHistorically, GLMs have been defined for the canonical families:\n\nGaussian: linear regression\nGamma and Inverse Gaussian: Positive, continuous\nPoisson: count data\nNegative Binomial: count data (fit an ancillary parameter for over-dispersion)\nBinary/Binomial (logistic): binary responses; number of successes; probabilities/proportions (with slight abuse).\n\nHowever, the same basic idea led to the development of “non-canonical” GLMs:\n\nLog-normal: Positive, continuous\nLog-gamma: survival models\nProbit: binary\n\nand many others. Fitting the models can be done using Maximum Likelihoods, or in a Bayesian framework (typically, through MCMC)."
  },
  {
    "objectID": "13-generalized_linear_models.html#readings-and-homework",
    "href": "13-generalized_linear_models.html#readings-and-homework",
    "title": "14  Generalized linear models",
    "section": "14.6 Readings and homework",
    "text": "14.6 Readings and homework\n\nThere are two useful swirls in the course Regression Models: Binary Outcomes and Count Outcomes\nAn excellent book on GLMs in R\nRegression Models for Count Data in R"
  },
  {
    "objectID": "14-machine-learning.html#introduction",
    "href": "14-machine-learning.html#introduction",
    "title": "15  Machine learning methods for classification",
    "section": "15.1 Introduction",
    "text": "15.1 Introduction\nThe classification problem is a very common one in practice, and we have already seen the use of GLMs to systematically predict binary response variables. We have also used clustering to perform unsupervised learning, where we do not have any information about correct labels for data points. We now turn to supervised classification problems and introduce two different approaches: a Bayesian one and a tree-based one."
  },
  {
    "objectID": "14-machine-learning.html#naive-bayes-classifier",
    "href": "14-machine-learning.html#naive-bayes-classifier",
    "title": "15  Machine learning methods for classification",
    "section": "15.2 Naive Bayes classifier",
    "text": "15.2 Naive Bayes classifier\nSuppose that we wish to classify an observation into one of K classes, which means there is a response variable Y can take on K different values, or labels. Let \\(π_k\\) be the prior probability that a randomly chosen observation comes from the k-th class. Let \\(f_k(X) =Pr(X|Y = k)\\) be the density function of X for an observation that comes from the k-th class.\nAssuming we have the prior probabilities and the conditional probability distributions of the observations within each category \\(k\\), we can use Bayes’ theorem to compute the probability of each class, given a set of observations \\(x\\) by turning around the conditionality:\n\\[\nP(Y = k | X = x) = \\frac{\\pi_k f_k(x)}{\\sum_i^K \\pi_i f_i(x)}\n\\] And let us use the notation \\(p_k (x) = P(Y = k | X = x)\\) to mean the posterior probability that an observation \\(x\\) belongs to class \\(k\\).\nLet us use the penguin data as an example, where we want to classify the observations by species. Then, if we take a training set with known classifications, we can take the prior probabilities \\(\\pi_k\\) to be the fractions of observed birds of each species, and the probability distributions of each explanatory variable for each species \\(f_k(X)\\) can be estimated from the observed distributions of the explanatory variables (flipper lengths, etc.) for Adelie, Gentoo, and Chinstrap subsets of observations.\nThe difficult part in the above example is estimating the distributions \\(f_k(X)\\), which is especially challenging for joint distributions of multiple variables. One method, called Linear Discriminant Analysis, assumes the distributions have the same covariance matrices for all classes and only differ in their mean values. Another, called Quadratic Discriminant Analysis, assumes different covariance matrices for different classes.\nThe Naive Bayes classifier instead assumes that within each class the explanatory variables \\(X_i\\) are independent, and thus\n\\[\nf_k(x) = f_{k1} (x_1) \\times f_{k2} (x_2) \\times ... \\times f_{kn} (x_n)\n\\]\nwhere \\(f_{ki}(x_i)\\) is the probability distribution of the i-th explanatory variable \\(x_i\\) for class \\(k\\).\nThis modifies the Bayes’ formula to look like this:\n\\[\nP(Y = k | X = x) = \\frac{\\pi_k f_{k1} (x_1) \\times f_{k2} (x_2) \\times ... \\times f_{kn} (x_n)}{\\sum_i^K \\pi_i f_{k1} (x_1) \\times f_{k2} (x_2) \\times ... \\times f_{kn} (x_n)}\n\\] Although it looks more complicated, we can compute each distribution function separately, so as long as there is enough data in the training set to estimate each explanatory variable for each class, the calculation is manageable.\n\n15.2.1 Penguin data\n\ndata(\"penguins\")\npen_clean <- penguins %>% drop_na()\n# Fix the random numbers by setting the seed  for reproducibility\n#set.seed(314)\n# Put 3/4 of the data into the training set \npen_split <- initial_split(pen_clean, prop = 3/4)\n\n# Create data frames for the two sets:\npen_train <- training(pen_split)\npen_test  <- testing(pen_split)\n\n\nnb_spec <- naive_Bayes() %>% \n  set_mode(\"classification\") %>% \n  set_engine(\"naivebayes\") %>% \n  set_args(usekernel = FALSE)  \n\n\npen_recipe <- \n  recipe(species ~ ., data = pen_train) %>% \n  update_role(island,  new_role = \"ID\")\n\n\n#nb_fit <- nb_spec %>% \n#  fit(Direction ~ Lag1 + Lag2, data =pen_\n\npen_workflow_nb <- workflow() %>%\n  add_model(nb_spec) %>%\n  add_recipe(pen_recipe)\n\nfit_nb <- pen_workflow_nb %>% fit(pen_train)\n\n\ncompare_pred <- augment(fit_nb, new_data = pen_test) \n\ncompare_pred %>% conf_mat(truth = species, estimate = .pred_class)\n\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie        42         3      0\n  Chinstrap      0        11      0\n  Gentoo         0         0     28\n\ncompare_pred %>%  accuracy(truth = species, estimate = .pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy multiclass     0.964\n\n\n\n\n15.2.2 Breast cancer data\n\ndata(\"breastcancer\")\nglimpse(breastcancer)\n\nRows: 699\nColumns: 10\n$ `Clump Thickness`             <int> 5, 5, 3, 6, 4, 8, 1, 2, 2, 4, 1, 2, 5, 1…\n$ `Uniformity of Cell Size`     <int> 1, 4, 1, 8, 1, 10, 1, 1, 1, 2, 1, 1, 3, …\n$ `Uniformity of Cell Shape`    <int> 1, 4, 1, 8, 1, 10, 1, 2, 1, 1, 1, 1, 3, …\n$ `Marginal Adhesion`           <int> 1, 5, 1, 1, 3, 8, 1, 1, 1, 1, 1, 1, 3, 1…\n$ `Single Epithelial Cell Size` <int> 2, 7, 2, 3, 2, 7, 2, 2, 2, 2, 1, 2, 2, 2…\n$ `Bare Nuclei`                 <int> 1, 10, 2, 4, 1, 10, 10, 1, 1, 1, 1, 1, 3…\n$ `Bland Chromatin`             <int> 3, 3, 3, 3, 3, 9, 3, 3, 1, 2, 3, 2, 4, 3…\n$ `Normal Nucleoli`             <int> 1, 2, 1, 7, 1, 7, 1, 1, 1, 1, 1, 1, 4, 1…\n$ Mitoses                       <int> 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1…\n$ Class                         <fct> benign, benign, benign, benign, benign, …\n\ncancer_clean <- breastcancer %>% drop_na()\n# Fix the random numbers by setting the seed  for reproducibility\n#set.seed(314)\n# Put 3/4 of the data into the training set \ncan_split <- initial_split(cancer_clean, prop = 1/2)\n\n# Create data frames for the two sets:\ncan_train <- training(can_split)\ncan_test  <- testing(can_split)\n\n\nnb_spec <- naive_Bayes() %>% \n  set_mode(\"classification\") %>% \n  set_engine(\"naivebayes\") %>% \n  set_args(usekernel = FALSE)  \n\n\ncan_recipe <- \n  recipe(Class ~ ., data = can_train) %>% \n  update_role(`Uniformity of Cell Shape`,  `Uniformity of Cell Size`, `Bland Chromatin`, new_role = \"ID\")\n  \n\ncan_workflow_nb <- workflow() %>%\n  add_model(nb_spec) %>%\n  add_recipe(can_recipe)\n\ncan_fit_nb <- can_workflow_nb %>% fit(can_train)\n\n\ncompare_pred <- augment(can_fit_nb, new_data = can_test) \n\ncompare_pred %>% conf_mat(truth = Class, estimate = .pred_class)\n\n           Truth\nPrediction  benign malignant\n  benign       207         3\n  malignant      8       124\n\ncompare_pred %>%  accuracy(truth = Class, estimate = .pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.968"
  },
  {
    "objectID": "14-machine-learning.html#decision-trees",
    "href": "14-machine-learning.html#decision-trees",
    "title": "15  Machine learning methods for classification",
    "section": "15.3 Decision Trees",
    "text": "15.3 Decision Trees\nSuppose instead that we represent the classification process as a sequence of binary choices, that eventually lead to a category. This can be represented by a decision tree, whose internal nodes are separators of the space of observations (all the values of explanatory variables) that divide it into regions, and the leaves are the labels of these regions. (Decision trees can also be used for quantitative response variables, but we will focus on classification.) For example, here is a a decision tree for accepting a job offer:\n\n\n\nDo you want this job?\n\n\nBuilding a decision tree for classification happens by sequential splitting the space of observations, starting with the decision that gives the most bang for the buck. Let us define the quality of the split into \\(M\\) region by calculating how many observations in that regions actually belong to each category \\(k\\). The Gini index (or impurity) is defined as the product of the probability of an observation (in practice, the fraction of observations in the training set) being labeled correctly with label \\(k\\) (\\(p_k\\)) times the probability of it being labeled incorrectly (\\(1-p_k\\)), summed over all the labels \\(k\\):\n\\[\nG = \\sum_k (1-p_k)p_k\n\\]\nAlternatively, one can use the Shannon information or entropy measure:\n\\[\nS = -\\sum_k p_k log(p_k)\n\\] Notice that both measures are smallest when \\(p_k\\) is close to 1 or 0, so they both tell the same story for a particular region: if (almost) all the points are points are either classified or incorrectly, these measures are close to 0.\n\n\n\nRecursive splitting of a two-dimensional set of observations\n\n\nOne of these measures is used to create the sequential splits in the training data set. The biggest problem with this decision tree method is that it’s a greedy algorithm that easily leads to overfitting: as you can see in the figure above, it can create really complicated regions in the observation space that may not correspond to meaningful distinctions.\n\n15.3.1 Penguin data\n\ntree_spec <- decision_tree() %>%\n  set_engine(\"rpart\") %>%\n  set_mode(\"classification\")\n\n\npen_recipe <- \n  recipe(species ~ ., data = pen_train) %>% \n  update_role(island,  new_role = \"ID\")\n\npen_workflow_tree <- workflow() %>%\n  add_model(tree_spec) %>%\n  add_recipe(pen_recipe)\n\nfit_tree <- pen_workflow_tree %>% fit(pen_train)\n\n\ncompare_pred <- augment(fit_tree, new_data = pen_test) \n\ncompare_pred %>% conf_mat(truth = species, estimate = .pred_class)\n\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie        42         3      0\n  Chinstrap      0         9      1\n  Gentoo         0         2     27\n\ncompare_pred %>%  accuracy(truth = species, estimate = .pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy multiclass     0.929\n\n\n\nfit_tree %>%\n  extract_fit_engine() %>%\n  rpart.plot()\n\n\n\n\n\n\n15.3.2 Breast cancer data\n\ncan_recipe <- \n  recipe(Class ~ ., data = can_train) %>% \n  update_role(`Uniformity of Cell Shape`,  `Uniformity of Cell Size`, `Bland Chromatin`, new_role = \"ID\")\n  \n\ncan_workflow_tree <- workflow() %>%\n  add_model(tree_spec) %>%\n  add_recipe(can_recipe)\n\nfit_tree <- can_workflow_tree %>% fit(can_train)\n\n\ncompare_pred <- augment(fit_tree, new_data = can_test) \n\ncompare_pred %>% conf_mat(truth = Class, estimate = .pred_class)\n\n           Truth\nPrediction  benign malignant\n  benign       203         3\n  malignant     12       124\n\ncompare_pred %>%  accuracy(truth = Class, estimate = .pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.956\n\n\n\nfit_tree %>%\n  extract_fit_engine() %>%\n  rpart.plot()"
  },
  {
    "objectID": "14-machine-learning.html#random-forests",
    "href": "14-machine-learning.html#random-forests",
    "title": "15  Machine learning methods for classification",
    "section": "15.4 Random Forests",
    "text": "15.4 Random Forests\nOverfitting usually results from modeling meaningless noise in the data instead of real differences. This gave rise to the idea to “shake up” the algorithm and see if the splits it produces are robust if the training set is different. In fact, let’s use multiple trees and look at what the consensus of the ensemble can produce. This approach is called bagging, which makes use of an random ensemble of parallel classifiers, each of which over-fits the data, it combines the results to find a better classification. An ensemble of randomized decision trees is known as a random forest.\nEssentially, the process is as follows: use random sampling from the data set (bootstrapping) to generate different training sets and train different decision trees on each. Then for each observation, find its consensus classification among the whole ensemble; that is, how does the plurality of the trees classify it.\nSince each data point is left out of a number of trees, one can estimate an unbiased error of classification by computing the “out-of-bag” error: for each observation, used the classification produced by all the trees that did not have this one points in the bag. This is basically a built-in cross-validation measure.\n\n15.4.1 Penguin data\n\nrf_spec <- rand_forest(mtry = 4) %>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"classification\")\n\n\nrf_recipe <- \n  recipe(species ~ ., data = pen_clean) %>% \n  update_role(island,  new_role = \"ID\")\n\npen_workflow_rf <- workflow() %>%\n  add_model(rf_spec) %>%\n  add_recipe(pen_recipe)\n\nfit_rf <- pen_workflow_rf %>% fit(pen_clean)\n\n\ncompare_pred <- augment(fit_rf, new_data = pen_clean) \n\ncompare_pred %>% conf_mat(truth = species, estimate = .pred_class)\n\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie       144         1      0\n  Chinstrap      2        67      0\n  Gentoo         0         0    119\n\ncompare_pred %>%  accuracy(truth = species, estimate = .pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy multiclass     0.991\n\n\nImportance measures of different variables:\n\nlast_rf <- \n  rand_forest(mtry = 4, trees = 100) %>% \n  set_engine(\"ranger\",  importance = \"impurity\") %>% \n  set_mode(\"classification\")\n# the last workflow\nlast_workflow <- \n  pen_workflow_rf %>% \n  update_model(last_rf)\n\n# the last fit\nset.seed(3)\nlast_rf_fit <- \n  last_workflow %>% \n  last_fit(pen_split)\n\n\nlast_rf_fit %>% \n  collect_metrics()\n\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy multiclass     0.964 Preprocessor1_Model1\n2 roc_auc  hand_till      0.995 Preprocessor1_Model1\n\nlast_rf_fit %>% \n  pluck(\".workflow\", 1) %>%   \n  pull_workflow_fit() %>% \n  vip(num_features = 20)\n\n\n\n\n\n\n15.4.2 Cancer data\n\nrf_spec <- rand_forest(mtry = 4) %>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"classification\")\n\n\ncan_rf_recipe <- \n  recipe(Class ~ ., data = cancer_clean) \n\ncan_workflow_rf <- workflow() %>%\n  add_model(rf_spec) %>%\n  add_recipe(can_rf_recipe)\n\nfit_rf <- can_workflow_rf  %>% \n  fit(cancer_clean)\n\n\ncompare_pred <- augment(fit_rf, new_data = can_test) \n\ncompare_pred %>% conf_mat(truth = Class, estimate = .pred_class)\n\n           Truth\nPrediction  benign malignant\n  benign       211         1\n  malignant      4       126\n\ncompare_pred %>%  accuracy(truth = Class, estimate = .pred_class)\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.985\n\n\nImportance measures of different variables:\n\nlast_rf <- \n  rand_forest(mtry = 4, trees = 100) %>% \n  set_engine(\"ranger\",  importance = \"impurity\") %>% \n  set_mode(\"classification\")\n# the last workflow\nlast_workflow <- \n  can_workflow_rf %>% \n  update_model(last_rf)\n\n# the last fit\nset.seed(3)\nlast_rf_fit <- \n  last_workflow %>% \n  last_fit(can_split)\n\n\nlast_rf_fit %>% \n  collect_metrics()\n\n# A tibble: 2 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy binary         0.968 Preprocessor1_Model1\n2 roc_auc  binary         0.990 Preprocessor1_Model1\n\nlast_rf_fit %>% \n  pluck(\".workflow\", 1) %>%   \n  pull_workflow_fit() %>% \n  vip(num_features = 20)"
  },
  {
    "objectID": "14-machine-learning.html#references",
    "href": "14-machine-learning.html#references",
    "title": "15  Machine learning methods for classification",
    "section": "15.5 References",
    "text": "15.5 References\n\nIntroduction to Statistical Learning\nIntrocution to Statistical Learning Labs with Tidymodels\nTidy models tutorial\nHow Decision Trees Work\nPython Data Science Handbook\nVisualization of Random Forests"
  }
]